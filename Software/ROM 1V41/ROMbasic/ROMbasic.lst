                      (     ROMbasic.ASM):00001         ; Extended MS BASIC with autostart ROM 
                      (     ROMbasic.ASM):00002         ;
                      (     ROMbasic.ASM):00003         ; This is a derived work from that of Grant Searle.
                      (     ROMbasic.ASM):00004         ; http://searle.hostei.com/grant/6809/Simple6809.html
                      (     ROMbasic.ASM):00005         ;
                      (     ROMbasic.ASM):00006         ; I have used Grant's 6809 Extended BASIC with very
                      (     ROMbasic.ASM):00007         ; minimal adapations to port to hd6309 CPU or the
                      (     ROMbasic.ASM):00008         ; SBC hardware CPLD V1.3.
                      (     ROMbasic.ASM):00009         ;
                      (     ROMbasic.ASM):00010         ; target toolchain: lwtools lwasm ver 4.10 
                      (     ROMbasic.ASM):00011         ;
                      (     ROMbasic.ASM):00012         ; tomcircuit 5/20/2014
                      (     ROMbasic.ASM):00013         
     E012             (     ROMbasic.ASM):00014         ZSCCAC    EQU  $E012          ; SCC channel A command
     E013             (     ROMbasic.ASM):00015         ZSCCAD    EQU  $E013          ; SCC channel A data
     E040             (     ROMbasic.ASM):00016         SYSCFG    EQU  $E040            ; ROM WS, ROMSEL, ROMSEH, and RA14 select
     E050             (     ROMbasic.ASM):00017         IOPORT    EQU  $E050          ; SD card and LED control
                      (     ROMbasic.ASM):00018                                        
     0008             (     ROMbasic.ASM):00019         BS        EQU  8              BACKSPACE 
     000A             (     ROMbasic.ASM):00020         LF        EQU  $A             LINEFEED
     000D             (     ROMbasic.ASM):00021         CR        EQU  $D             ENTER KEY 
     001B             (     ROMbasic.ASM):00022         ESC       EQU  $1B            ESCAPE CODE 
     0020             (     ROMbasic.ASM):00023         SPACE     EQU  $20            SPACE (BLANK) 
     003A             (     ROMbasic.ASM):00024         STKBUF    EQU  58             STACK BUFFER ROOM 
     00FA             (     ROMbasic.ASM):00025         LBUFMX    EQU  250            MAX NUMBER OF CHARS IN A BASIC LINE 
     00FA             (     ROMbasic.ASM):00026         MAXLIN    EQU  $FA            MAXIMUM MS BYTE OF LINE NUMBER 
                      (     ROMbasic.ASM):00027         
                      (     ROMbasic.ASM):00028         ; PSEUDO OPS                      
     0021             (     ROMbasic.ASM):00029         SKP1      EQU  $21            OP CODE OF BRN — SKIP ONE BYTE 
     008C             (     ROMbasic.ASM):00030         SKP2      EQU  $8C            OP CODE OF CMPX # - SKIP TWO BYTES 
     0086             (     ROMbasic.ASM):00031         SKP1LD    EQU  $86            OP CODE OF LDA # - SKIP THE NEXT BYTE 
                      (     ROMbasic.ASM):00032         ;                             AND LOAD THE VALUE OF THAT BYTE INTO ACCA — THIS 
                      (     ROMbasic.ASM):00033         ;                             IS USUALLY USED TO LOAD ACCA WITH A NON ZERO VALUE 
     0095             (     ROMbasic.ASM):00034         RTS_LOW   EQU  $95             
                      (     ROMbasic.ASM):00035         
                      (     ROMbasic.ASM):00036                   ORG  0               
0000                  (     ROMbasic.ASM):00037         ENDFLG    RMB  1              STOP/END FLAG: POSITIVE=STOP, NEG=END 
0001                  (     ROMbasic.ASM):00038         CHARAC    RMB  1              TERMINATOR FLAG 1 
0002                  (     ROMbasic.ASM):00039         ENDCHR    RMB  1              TERMINATOR FLAG 2 
0003                  (     ROMbasic.ASM):00040         TMPLOC    RMB  1              SCRATCH VARIABLE 
0004                  (     ROMbasic.ASM):00041         IFCTR     RMB  1              IF COUNTER - HOW MANY IF STATEMENTS IN A LINE 
0005                  (     ROMbasic.ASM):00042         DIMFLG    RMB  1              *DV* ARRAY FLAG 0=EVALUATE, 1=DIMENSIONING 
0006                  (     ROMbasic.ASM):00043         VALTYP    RMB  1              *DV* *PV TYPE FLAG: 0=NUMERIC, $FF=STRING 
0007                  (     ROMbasic.ASM):00044         GARBFL    RMB  1              *TV STRING SPACE HOUSEKEEPING FLAG 
0008                  (     ROMbasic.ASM):00045         ARYDIS    RMB  1              DISABLE ARRAY SEARCH: 00=ALLOW SEARCH 
0009                  (     ROMbasic.ASM):00046         INPFLG    RMB  1              *TV INPUT FLAG: READ=0, INPUT<>0 
000A                  (     ROMbasic.ASM):00047         RELFLG    RMB  1              *TV RELATIONAL OPERATOR FLAG 
000B                  (     ROMbasic.ASM):00048         TEMPPT    RMB  2              *PV TEMPORARY STRING STACK POINTER 
000D                  (     ROMbasic.ASM):00049         LASTPT    RMB  2              *PV ADDR OF LAST USED STRING STACK ADDRESS 
000F                  (     ROMbasic.ASM):00050         TEMPTR    RMB  2              TEMPORARY POINTER 
0011                  (     ROMbasic.ASM):00051         TMPTR1    RMB  2              TEMPORARY DESCRIPTOR STORAGE (STACK SEARCH) 
0013                  (     ROMbasic.ASM):00052         FPA2      RMB  4              FLOATING POINT ACCUMULATOR #2 MANTISSA 
0017                  (     ROMbasic.ASM):00053         BOTSTK    RMB  2              BOTTOM OF STACK AT LAST CHECK 
0019                  (     ROMbasic.ASM):00054         TXTTAB    RMB  2              *PV BEGINNING OF BASIC PROGRAM 
001B                  (     ROMbasic.ASM):00055         VARTAB    RMB  2              *PV START OF VARIABLES 
001D                  (     ROMbasic.ASM):00056         ARYTAB    RMB  2              *PV START OF ARRAYS 
001F                  (     ROMbasic.ASM):00057         ARYEND    RMB  2              *PV END OF ARRAYS (+1) 
0021                  (     ROMbasic.ASM):00058         FRETOP    RMB  2              *PV START OF STRING STORAGE (TOP OF FREE RAM) 
0023                  (     ROMbasic.ASM):00059         STRTAB    RMB  2              *PV START OF STRING VARIABLES 
0025                  (     ROMbasic.ASM):00060         FRESPC    RMB  2              UTILITY STRING POINTER 
0027                  (     ROMbasic.ASM):00061         MEMSIZ    RMB  2              *PV TOP OF STRING SPACE 
0029                  (     ROMbasic.ASM):00062         OLDTXT    RMB  2              SAVED LINE NUMBER DURING A "STOP" 
002B                  (     ROMbasic.ASM):00063         BINVAL    RMB  2              BINARY VALUE OF A CONVERTED LINE NUMBER 
002D                  (     ROMbasic.ASM):00064         OLDPTR    RMB  2              SAVED INPUT PTR DURING A "STOP" 
002F                  (     ROMbasic.ASM):00065         TINPTR    RMB  2              TEMPORARY INPUT POINTER STORAGE 
0031                  (     ROMbasic.ASM):00066         DATTXT    RMB  2              *PV 'DATA' STATEMENT LINE NUMBER POINTER 
0033                  (     ROMbasic.ASM):00067         DATPTR    RMB  2              *PV 'DATA' STATEMENT ADDRESS POINTER 
0035                  (     ROMbasic.ASM):00068         DATTMP    RMB  2              DATA POINTER FOR 'INPUT' & 'READ' 
0037                  (     ROMbasic.ASM):00069         VARNAM    RMB  2              *TV TEMP STORAGE FOR A VARIABLE NAME 
0039                  (     ROMbasic.ASM):00070         VARPTR    RMB  2              *TV POINTER TO A VARIABLE DESCRIPTOR 
003B                  (     ROMbasic.ASM):00071         VARDES    RMB  2              TEMP POINTER TO A VARIABLE DESCRIPTOR 
003D                  (     ROMbasic.ASM):00072         RELPTR    RMB  2              POINTER TO RELATIONAL OPERATOR PROCESSING ROUTINE 
003F                  (     ROMbasic.ASM):00073         TRELFL    RMB  1              TEMPORARY RELATIONAL OPERATOR FLAG BYTE 
                      (     ROMbasic.ASM):00074         ; FLOATING POINT ACCUMULATORS #3,4 & 5 ARE MOSTLY                      
                      (     ROMbasic.ASM):00075         ; USED AS SCRATCH PAD VARIABLES.                      
                      (     ROMbasic.ASM):00076         ; FLOATING POINT ACCUMULATOR #3 :PACKED: ($40-$44)                      
0040                  (     ROMbasic.ASM):00077         V40       RMB  1               
0041                  (     ROMbasic.ASM):00078         V41       RMB  1               
0042                  (     ROMbasic.ASM):00079         V42       RMB  1               
0043                  (     ROMbasic.ASM):00080         V43       RMB  1               
0044                  (     ROMbasic.ASM):00081         V44       RMB  1               
                      (     ROMbasic.ASM):00082         ; FLOATING POINT ACCUMULATOR #4 :PACKED: ($45-$49)                      
0045                  (     ROMbasic.ASM):00083         V45       RMB  1               
0046                  (     ROMbasic.ASM):00084         V46       RMB  1               
0047                  (     ROMbasic.ASM):00085         V47       RMB  1               
0048                  (     ROMbasic.ASM):00086         V48       RMB  2               
                      (     ROMbasic.ASM):00087         ; FLOATING POINT ACCUMULATOR #5 :PACKED: ($4A—$4E)                      
004A                  (     ROMbasic.ASM):00088         V4A       RMB  1               
004B                  (     ROMbasic.ASM):00089         V4B       RMB  2               
004D                  (     ROMbasic.ASM):00090         V4D       RMB  2               
                      (     ROMbasic.ASM):00091         ; FLOATING POINT ACCUMULATOR #0                      
004F                  (     ROMbasic.ASM):00092         FP0EXP    RMB  1              *PV FLOATING POINT ACCUMULATOR #0 EXPONENT 
0050                  (     ROMbasic.ASM):00093         FPA0      RMB  4              *PV FLOATING POINT ACCUMULATOR #0 MANTISSA 
0054                  (     ROMbasic.ASM):00094         FP0SGN    RMB  1              *PV FLOATING POINT ACCUMULATOR #0 SIGN 
0055                  (     ROMbasic.ASM):00095         COEFCT    RMB  1              POLYNOMIAL COEFFICIENT COUNTER 
0056                  (     ROMbasic.ASM):00096         STRDES    RMB  5              TEMPORARY STRING DESCRIPTOR 
005B                  (     ROMbasic.ASM):00097         FPCARY    RMB  1              FLOATING POINT CARRY BYTE 
                      (     ROMbasic.ASM):00098         ; FLOATING POINT ACCUMULATOR #1                      
005C                  (     ROMbasic.ASM):00099         FP1EXP    RMB  1              *PV FLOATING POINT ACCUMULATOR #1 EXPONENT 
005D                  (     ROMbasic.ASM):00100         FPA1      RMB  4              *PV FLOATING POINT ACCUMULATOR #1 MANTISSA 
0061                  (     ROMbasic.ASM):00101         FP1SGN    RMB  1              *PV FLOATING POINT ACCUMULATOR #1 SIGN 
0062                  (     ROMbasic.ASM):00102         RESSGN    RMB  1              SIGN OF RESULT OF FLOATING POINT OPERATION 
0063                  (     ROMbasic.ASM):00103         FPSBYT    RMB  1              FLOATING POINT SUB BYTE (FIFTH BYTE) 
0064                  (     ROMbasic.ASM):00104         COEFPT    RMB  2              POLYNOMIAL COEFFICIENT POINTER 
0066                  (     ROMbasic.ASM):00105         LSTTXT    RMB  2              CURRENT LINE POINTER DURING LIST 
0068                  (     ROMbasic.ASM):00106         CURLIN    RMB  2              *PV CURRENT LINE # OF BASIC PROGRAM, $FFFF = DIRECT 
006A                  (     ROMbasic.ASM):00107         DEVCFW    RMB  1              *TV TAB FIELD WIDTH 
006B                  (     ROMbasic.ASM):00108         DEVLCF    RMB  1              *TV TAB ZONE 
006C                  (     ROMbasic.ASM):00109         DEVPOS    RMB  1              *TV PRINT POSITION 
006D                  (     ROMbasic.ASM):00110         DEVWID    RMB  1              *TV PRINT WIDTH 
006E                  (     ROMbasic.ASM):00111         RSTFLG    RMB  1              *PV WARM START FLAG: $55=WARM, OTHER=COLD 
006F                  (     ROMbasic.ASM):00112         RSTVEC    RMB  2              *PV WARM START VECTOR - JUMP ADDRESS FOR WARM START 
0071                  (     ROMbasic.ASM):00113         TOPRAM    RMB  2              *PV TOP OF RAM 
0073                  (     ROMbasic.ASM):00114         IKEYIM    RMB  1              *TV INKEY$ RAM IMAGE 
0074                  (     ROMbasic.ASM):00115         ZERO      RMB  2              *PV DUMMY - THESE TWO BYTES ARE ALWAYS ZERO 
                      (     ROMbasic.ASM):00116         ; THE FOLLOWING BYTES ARE MOVED DOWN FROM ROM                      
0076                  (     ROMbasic.ASM):00117         LPTCFW    RMB  1              16 
0077                  (     ROMbasic.ASM):00118         LPTLCF    RMB  1              112 
0078                  (     ROMbasic.ASM):00119         LPTWID    RMB  1              132 
0079                  (     ROMbasic.ASM):00120         LPTPOS    RMB  1              0 
007A                  (     ROMbasic.ASM):00121         EXECJP    RMB  2              LB4AA 
                      (     ROMbasic.ASM):00122                                        
                      (     ROMbasic.ASM):00123         ; THIS ROUTINE PICKS UP THE NEXT INPUT CHARACTER FROM                      
                      (     ROMbasic.ASM):00124         ; BASIC. THE ADDRESS OF THE NEXT BASIC BYTE TO BE                      
                      (     ROMbasic.ASM):00125         ; INTERPRETED IS STORED AT CHARAD.
                      (     ROMbasic.ASM):00126         ;
                      (     ROMbasic.ASM):00127         ; this gets copied to RAM from ROM around LA123
                      (     ROMbasic.ASM):00128         ;
007C                  (     ROMbasic.ASM):00129         GETNCH    RMB  6
0082                  (     ROMbasic.ASM):00130         GETCCH    RMB  1
0083                  (     ROMbasic.ASM):00131         CHARAD    RMB  5
                      (     ROMbasic.ASM):00132                                        
0088                  (     ROMbasic.ASM):00133         VAB       RMB  1              LOW ORDER FOUR BYTES OF THE PRODUCT 
0089                  (     ROMbasic.ASM):00134         VAC       RMB  1                 OF A FLOATING POINT MULTIPLICATION 
008A                  (     ROMbasic.ASM):00135         VAD       RMB  1                 THESE BYTES ARE USE AS RANDOM DATA 
008B                  (     ROMbasic.ASM):00136         VAE       RMB  1                 BY THE RND STATEMENT 
                      (     ROMbasic.ASM):00137                                        
                      (     ROMbasic.ASM):00138         ; EXTENDED BASIC VARIABLES                      
008C                  (     ROMbasic.ASM):00139         TRCFLG    RMB  1              *PV TRACE FLAG 0=OFF ELSE=ON 
008D                  (     ROMbasic.ASM):00140         USRADR    RMB  2              *PV ADDRESS OF THE START OF USR VECTORS 
                      (     ROMbasic.ASM):00141                                        
                      (     ROMbasic.ASM):00142         ; EXTENDED BASIC SCRATCH PAD VARIABLES                      
008F                  (     ROMbasic.ASM):00143         VCF       RMB  2               
0091                  (     ROMbasic.ASM):00144         VD1       RMB  2               
0093                  (     ROMbasic.ASM):00145         VD3       RMB  2               
0095                  (     ROMbasic.ASM):00146         VD5       RMB  2               
0097                  (     ROMbasic.ASM):00147         VD7       RMB  1               
0098                  (     ROMbasic.ASM):00148         VD8       RMB  1               
0099                  (     ROMbasic.ASM):00149         VD9       RMB  1               
009A                  (     ROMbasic.ASM):00150         VDA       RMB  1               
009B                  (     ROMbasic.ASM):00151         SW3VEC    RMB  3               
009E                  (     ROMbasic.ASM):00152         SW2VEC    RMB  3               
00A1                  (     ROMbasic.ASM):00153         SWIVEC    RMB  3               
00A4                  (     ROMbasic.ASM):00154         NMIVEC    RMB  3               
00A7                  (     ROMbasic.ASM):00155         IRQVEC    RMB  3               
00AA                  (     ROMbasic.ASM):00156         FRQVEC    RMB  3               
00AD                  (     ROMbasic.ASM):00157         USRJMP    RMB  3              JUMP ADDRESS FOR BASIC'S USR FUNCTION 
00B0                  (     ROMbasic.ASM):00158         RVSEED    RMB  1              * FLOATING POINT RANDOM NUMBER SEED EXPONENT 
00B1                  (     ROMbasic.ASM):00159                   RMB  4              * MANTISSA: INITIALLY SET TO $804FC75259 
                      (     ROMbasic.ASM):00160                                        
                      (     ROMbasic.ASM):00161         ;** USR FUNCTION VECTOR ADDRESSES (EX BASIC ONLY)                      
00B5                  (     ROMbasic.ASM):00162         USR0      RMB  2              USR 0 VECTOR 
00B7                  (     ROMbasic.ASM):00163                   RMB  2              USR 1 
00B9                  (     ROMbasic.ASM):00164                   RMB  2              USR 2 
00BB                  (     ROMbasic.ASM):00165                   RMB  2              USR 3 
00BD                  (     ROMbasic.ASM):00166                   RMB  2              USR 4 
00BF                  (     ROMbasic.ASM):00167                   RMB  2              USR 5 
00C1                  (     ROMbasic.ASM):00168                   RMB  2              USR 6 
00C3                  (     ROMbasic.ASM):00169                   RMB  2              USR 7 
00C5                  (     ROMbasic.ASM):00170                   RMB  2              USR 8 
00C7                  (     ROMbasic.ASM):00171                   RMB  2              USR 9 
                      (     ROMbasic.ASM):00172                                        
00C9                  (     ROMbasic.ASM):00173         STRSTK    RMB  8*5            STRING DESCRIPTOR STACK 
00F1                  (     ROMbasic.ASM):00174         LINHDR    RMB  2              LINE INPUT BUFFER HEADER 
00F3                  (     ROMbasic.ASM):00175         LINBUF    RMB  LBUFMX+1       BASIC LINE INPUT BUFFER 
01EE                  (     ROMbasic.ASM):00176         STRBUF    RMB  41             STRING BUFFER 
                      (     ROMbasic.ASM):00177                                        
0217                  (     ROMbasic.ASM):00178         PROGST    RMB  1              START OF PROGRAM SPACE 
                      (     ROMbasic.ASM):00179         
                      (     ROMbasic.ASM):00180         ;         INTERRUPT VECTORS                 
     FFF2             (     ROMbasic.ASM):00181         V_SWI3    EQU  $FFF2
     FFF4             (     ROMbasic.ASM):00182         V_SWI2    EQU  $FFF4           
     FFF6             (     ROMbasic.ASM):00183         V_FIRQ    EQU  $FFF6           
     FFF8             (     ROMbasic.ASM):00184         V_IRQ     EQU  $FFF8           
     FFFA             (     ROMbasic.ASM):00185         V_SWI     EQU  $FFFA           
     FFFC             (     ROMbasic.ASM):00186         V_NMI     EQU  $FFFC           
     FFFE             (     ROMbasic.ASM):00187         V_RESET   EQU  $FFFE           
                      (     ROMbasic.ASM):00188                                        
                      (     ROMbasic.ASM):00189                   ORG  $D000           
                      (     ROMbasic.ASM):00190                                        
                      (     ROMbasic.ASM):00191         ; Wait for a keystroke from the console.
D000 8D03             (     ROMbasic.ASM):00192         KEYWAIT   BSR  KEYIN          ; GET A CHARACTER FROM CONSOLE IN 
D002 27FC             (     ROMbasic.ASM):00193                   BEQ  KEYWAIT        ; LOOP IF NO KEY DOWN 
D004 39               (     ROMbasic.ASM):00194                   RTS                  
                      (     ROMbasic.ASM):00195                                        
                      (     ROMbasic.ASM):00196         ; THIS ROUTINE GETS A KEYSTROKE FROM THE KEYBOARD IF A KEY                      
                      (     ROMbasic.ASM):00197         ; IS DOWN. IT RETURNS ZERO TRUE IF THERE WAS NO KEY DOWN.                      
D005 B6E012           (     ROMbasic.ASM):00198         KEYIN     LDA  ZSCCAC         ; reset register pointer to WR0/RR0
D008 B6E012           (     ROMbasic.ASM):00199                   LDA  ZSCCAC         ; load RR0 (status)
D00B 8501             (     ROMbasic.ASM):00200                   BITA #1              
D00D 2706             (     ROMbasic.ASM):00201                   BEQ  NOCHAR          
D00F B6E013           (     ROMbasic.ASM):00202                   LDA  ZSCCAD         ; read character from SCC into A
D012 847F             (     ROMbasic.ASM):00203                   ANDA #$7F            
D014 39               (     ROMbasic.ASM):00204                   RTS                  
D015 4F               (     ROMbasic.ASM):00205         NOCHAR    CLRA                 
D016 39               (     ROMbasic.ASM):00206                   RTS                  
                      (     ROMbasic.ASM):00207                                        
                      (     ROMbasic.ASM):00208         ; CONSOLE OUT                      
D017 8D24             (     ROMbasic.ASM):00209         PUTCHR    BSR  WAITACIA        
D019 3402             (     ROMbasic.ASM):00210                   PSHS A               
D01B 810D             (     ROMbasic.ASM):00211                   CMPA #CR            IS IT CARRIAGE RETURN? 
D01D 270B             (     ROMbasic.ASM):00212                   BEQ  NEWLINE        YES 
D01F B7E013           (     ROMbasic.ASM):00213                   STA  ZSCCAD         ; put character in data register        
D022 0C79             (     ROMbasic.ASM):00214                   INC  LPTPOS         INCREMENT CHARACTER COUNTER 
D024 9679             (     ROMbasic.ASM):00215                   LDA  LPTPOS         CHECK FOR END OF LINE PRINTER LINE 
D026 9178             (     ROMbasic.ASM):00216                   CMPA LPTWID         AT END OF LINE PRINTER LINE? 
D028 2510             (     ROMbasic.ASM):00217                   BLO  PUTEND         NO 
D02A 0F79             (     ROMbasic.ASM):00218         NEWLINE   CLR  LPTPOS         RESET CHARACTER COUNTER 
D02C 8D0F             (     ROMbasic.ASM):00219                   BSR  WAITACIA        
D02E 860D             (     ROMbasic.ASM):00220                   LDA  #CR
D030 B7E013           (     ROMbasic.ASM):00221                   STA  ZSCCAD         ; put CR in data register        
D033 8D08             (     ROMbasic.ASM):00222                   BSR  WAITACIA        
D035 860A             (     ROMbasic.ASM):00223                   LDA  #LF            DO LINEFEED AFTER CR 
D037 B7E013           (     ROMbasic.ASM):00224                   STA  ZSCCAD         ; put LF in data register        
D03A 3502             (     ROMbasic.ASM):00225         PUTEND    PULS A               
D03C 39               (     ROMbasic.ASM):00226                   RTS                  
                      (     ROMbasic.ASM):00227                                        
D03D 3402             (     ROMbasic.ASM):00228         WAITACIA  PSHS A               
D03F B6E012           (     ROMbasic.ASM):00229         WRWAIT    LDA  ZSCCAC         ; reset register pointer to WR0/RR0
D042 B6E012           (     ROMbasic.ASM):00230                   LDA  ZSCCAC         ; load RR0 (status)
D045 8504             (     ROMbasic.ASM):00231                   BITA #4              
D047 27F6             (     ROMbasic.ASM):00232                   BEQ  WRWAIT          
D049 3502             (     ROMbasic.ASM):00233                   PULS A               
D04B 39               (     ROMbasic.ASM):00234                   RTS                  
                      (     ROMbasic.ASM):00235                                       
D04C                  (     ROMbasic.ASM):00236         RESVEC:
D04C 10CE01EE         (     ROMbasic.ASM):00237         LA00E     LDS  #LINBUF+LBUFMX+1 SET STACK TO TOP OF LINE INPUT BUFFER
D050 72FCE050         (     ROMbasic.ASM):00238                      AIM  %11111100,IOPORT  ; turn off LED1 and LED2
D054 72FEE040         (     ROMbasic.ASM):00239                         AIM  %11111110,SYSCFG  ; make ROM 0WS access
D058 BDF6F5           (     ROMbasic.ASM):00240                   JSR  SCCA_INIT      ;initialize SCC channel A
D05B 966E             (     ROMbasic.ASM):00241                   LDA  RSTFLG         GET WARM START FLAG 
D05D 8155             (     ROMbasic.ASM):00242                   CMPA #$55           IS IT A WARM START? 
D05F 260A             (     ROMbasic.ASM):00243                   BNE  BACDST         NO - D0 A COLD START          
D061 9E6F             (     ROMbasic.ASM):00244                   LDX  RSTVEC         WARM START VECTOR 
D063 A684             (     ROMbasic.ASM):00245                   LDA  ,X             GET FIRST BYTE OF WARM START ADDR 
D065 8112             (     ROMbasic.ASM):00246                   CMPA #$12           IS IT NOP? 
D067 2602             (     ROMbasic.ASM):00247                   BNE  BACDST         NO - DO A COLD START 
D069 6E84             (     ROMbasic.ASM):00248                   JMP  ,X             YES, G0 THERE 
                      (     ROMbasic.ASM):00249                         
                      (     ROMbasic.ASM):00250         ;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (     ROMbasic.ASM):00251         ; COLD START ENTRY
                      (     ROMbasic.ASM):00252         ;;;;;;;;;;;;;;;;;;;;;;;;;;
D06B 7113E050         (     ROMbasic.ASM):00253         BACDST    OIM  %00010011,IOPORT   ; turn ON LED1 and LED2, disable SD card
D06F 8E0218           (     ROMbasic.ASM):00254                   LDX  #PROGST+1      POINT X TO CLEAR 1ST 1K OF RAM 
D072 6F83             (     ROMbasic.ASM):00255         LA077     CLR  ,--X           MOVE POINTER DOWN TWO-CLEAR BYTE 
D074 3001             (     ROMbasic.ASM):00256                   LEAX 1,X            ADVANCE POINTER ONE 
D076 26FA             (     ROMbasic.ASM):00257                   BNE  LA077          KEEP GOING IF NOT AT BOTTOM OF PAGE 0 
D078 8E0217           (     ROMbasic.ASM):00258                   LDX  #PROGST        SET TO START OF PROGRAM SPACE 
D07B 6F80             (     ROMbasic.ASM):00259                   CLR  ,X+            CLEAR 1ST BYTE OF BASIC PROGRAM 
D07D 9F19             (     ROMbasic.ASM):00260                   STX  TXTTAB         BEGINNING OF BASIC PROGRAM 
D07F A602             (     ROMbasic.ASM):00261         LA084     LDA  2,X            LOOK FOR END OF MEMORY 
D081 43               (     ROMbasic.ASM):00262                   COMA                * COMPLEMENT IT AND PUT IT BACK 
D082 A702             (     ROMbasic.ASM):00263                   STA  2,X            * INTO SYSTEM MEMORY 
D084 A102             (     ROMbasic.ASM):00264                   CMPA 2,X            IS IT RAM? 
D086 2606             (     ROMbasic.ASM):00265                   BNE  LA093          BRANCH IF NOT (ROM, BAD RAM OR NO RAM) 
D088 3001             (     ROMbasic.ASM):00266                   LEAX 1,X            MOVE POINTER UP ONE 
D08A 6301             (     ROMbasic.ASM):00267                   COM  1,X            RE-COMPLEMENT TO RESTORE BYTE 
D08C 20F1             (     ROMbasic.ASM):00268                   BRA  LA084          KEEP LOOKING FOR END OF RAM 
D08E 9F71             (     ROMbasic.ASM):00269         LA093     STX  TOPRAM         SAVE ABSOLUTE TOP OF RAM 
D090 9F27             (     ROMbasic.ASM):00270                   STX  MEMSIZ         SAVE TOP OF STRING SPACE 
D092 9F23             (     ROMbasic.ASM):00271                   STX  STRTAB         SAVE START OF STRING VARIABLES 
D094 3089FF38         (     ROMbasic.ASM):00272                   LEAX -200,X         CLEAR 200 - DEFAULT STRING SPACE TO 200 BYTES 
D098 9F21             (     ROMbasic.ASM):00273                   STX  FRETOP         SAVE START OF STRING SPACE 
D09A 1F14             (     ROMbasic.ASM):00274                   TFR  X,S            PUT STACK THERE 
D09C 8ED0F0           (     ROMbasic.ASM):00275                   LDX  #LA10D         POINT X TO ROM SOURCE DATA 
D09F CE0076           (     ROMbasic.ASM):00276                   LDU  #LPTCFW        POINT U TO RAM DESTINATION 
D0A2 C612             (     ROMbasic.ASM):00277                   LDB  #18            MOVE 18 BYTES 
D0A4 BDD1D1           (     ROMbasic.ASM):00278                   JSR  LA59A          MOVE 18 BYTES FROM ROM TO RAM 
D0A7 CE00A7           (     ROMbasic.ASM):00279                   LDU  #IRQVEC        POINT U TO NEXT RAM DESTINATION 
D0AA C604             (     ROMbasic.ASM):00280                   LDB  #4             MOVE 4 MORE BYTES 
D0AC BDD1D1           (     ROMbasic.ASM):00281                   JSR  LA59A          MOVE 4 BYTES FROM ROM TO RAM 
D0AF 8639             (     ROMbasic.ASM):00282                   LDA  #$39            
D0B1 97F0             (     ROMbasic.ASM):00283                   STA  LINHDR-1       PUT RTS IN LINHDR-1 
D0B3 BDD4DD           (     ROMbasic.ASM):00284                   JSR  LAD19          G0 DO A ‘NEW’ 
                      (     ROMbasic.ASM):00285         ; EXTENDED BASIC INITIALISATION                      
D0B6 8E00B5           (     ROMbasic.ASM):00286                   LDX  #USR0          INITIALIZE ADDRESS OF START OF 
D0B9 9F8D             (     ROMbasic.ASM):00287                   STX  USRADR         USR JUMP TABLE 
                      (     ROMbasic.ASM):00288         ; INITIALIZE THE USR CALLS TO ‘FC ERROR’                      
D0BB CEDBF1           (     ROMbasic.ASM):00289                   LDU  #LB44A         ADDRESS OF ‘FC ERROR’ ROUTINE 
D0BE C60A             (     ROMbasic.ASM):00290                   LDB  #10            10 USR CALLS IN EX BASIC 
D0C0 EF81             (     ROMbasic.ASM):00291         L8031     STU  ,X++           STORE ‘FC’ ERROR AT USR ADDRESSES 
D0C2 5A               (     ROMbasic.ASM):00292                   DECB                FINISHED ALL 10? 
D0C3 26FB             (     ROMbasic.ASM):00293                   BNE  L8031          NO 
                      (     ROMbasic.ASM):00294                         
                      (     ROMbasic.ASM):00295         ; HD6309 SBC can be USB powered, which means that
                      (     ROMbasic.ASM):00296         ; power is applied before USB bridge enumerates.
                      (     ROMbasic.ASM):00297         ; Therefore, to ensure that communications are
                      (     ROMbasic.ASM):00298         ; established, wait for TWO characters to come in 
                      (     ROMbasic.ASM):00299         ; from the SCC. This ensures that the copyright 
                      (     ROMbasic.ASM):00300         ; banner is visible, also.
D0C5 BDD005           (     ROMbasic.ASM):00301         L8032     JSR  KEYIN
D0C8 27FB             (     ROMbasic.ASM):00302                   BEQ  L8032
D0CA 72FEE050         (     ROMbasic.ASM):00303                         AIM  %11111110,IOPORT  ; turn OFF LED1
D0CE BDD005           (     ROMbasic.ASM):00304         L8033     JSR  KEYIN
D0D1 27FB             (     ROMbasic.ASM):00305                   BEQ  L8033
D0D3 72FCE050         (     ROMbasic.ASM):00306                         AIM  %11111100,IOPORT  ; turn OFF LED1 and LED2
                      (     ROMbasic.ASM):00307         ; OUTPUT THE WELCOME BANNER AT COLDSTART
D0D7 8ED125           (     ROMbasic.ASM):00308                   LDX  #LA147-1       POINT X TO COLOR BASIC COPYRIGHT MESSAGE 
D0DA BDE403           (     ROMbasic.ASM):00309                   JSR  LB99C          PRINT ‘COLOR BASIC’ 
D0DD 8ED0E8           (     ROMbasic.ASM):00310                   LDX  #BAWMST        WARM START ADDRESS 
D0E0 9F6F             (     ROMbasic.ASM):00311                   STX  RSTVEC         SAVE IT 
D0E2 8655             (     ROMbasic.ASM):00312                   LDA  #$55           WARM START FLAG 
D0E4 976E             (     ROMbasic.ASM):00313                   STA  RSTFLG         SAVE IT 
D0E6 2004             (     ROMbasic.ASM):00314                   BRA  LA0F3          GO TO BASIC’S MAIN LOOP 
                      (     ROMbasic.ASM):00315                         
                      (     ROMbasic.ASM):00316         ;;;;;;;;;;;;;;;;;;;;;;;;;;                               
                      (     ROMbasic.ASM):00317         ; WARM START ENTRY
                      (     ROMbasic.ASM):00318         ;;;;;;;;;;;;;;;;;;;;;;;;;;                               
D0E8 12               (     ROMbasic.ASM):00319         BAWMST    NOP                 NOP REQ’D FOR WARM START  
D0E9 BDD4F7           (     ROMbasic.ASM):00320                   JSR  LAD33          DO PART OF A NEW 
D0EC 7ED445           (     ROMbasic.ASM):00321         LA0F3     JMP  LAC73          GO TO MAIN LOOP OF BASIC 
                      (     ROMbasic.ASM):00322         ;                              
                      (     ROMbasic.ASM):00323         ; FIRQ SERVICE ROUTINE                      
D0EF                  (     ROMbasic.ASM):00324         BFRQSV                         
D0EF 3B               (     ROMbasic.ASM):00325                   RTI                  
                      (     ROMbasic.ASM):00326         ;                              
                      (     ROMbasic.ASM):00327         ; THESE BYTES ARE MOVED TO ADDRESSES $76 - $85 THE DIRECT PAGE                      
D0F0 10               (     ROMbasic.ASM):00328         LA10D     FCB  16             TAB FIELD WIDTH 
D0F1 40               (     ROMbasic.ASM):00329                   FCB  64             LAST TAB ZONE 
D0F2 50               (     ROMbasic.ASM):00330                   FCB  80             PRINTER WIDTH 
D0F3 00               (     ROMbasic.ASM):00331                   FCB  0              LINE PRINTER POSITION 
D0F4 DBF1             (     ROMbasic.ASM):00332                   FDB  LB44A          ARGUMENT OF EXEC COMMAND - SET TO ‘FC’ ERROR 
                      (     ROMbasic.ASM):00333         ; LINE INPUT ROUTINE                      
D0F6 0C84             (     ROMbasic.ASM):00334                   INC  CHARAD+1        
D0F8 2602             (     ROMbasic.ASM):00335                   BNE  LA123           
D0FA 0C83             (     ROMbasic.ASM):00336                   INC  CHARAD          
D0FC B60000           (     ROMbasic.ASM):00337         LA123     LDA  >0000           
D0FF 7ED1E2           (     ROMbasic.ASM):00338                   JMP  BROMHK          
                      (     ROMbasic.ASM):00339         ;                              
                      (     ROMbasic.ASM):00340         ; THESE BYTES ARE MOVED TO ADDRESSES $A7-$B1                      
D102 7ED1E1           (     ROMbasic.ASM):00341                   JMP  BIRQSV         IRQ SERVICE 
D105 7ED0EF           (     ROMbasic.ASM):00342                   JMP  BFRQSV         FIRQ SERVICE 
D108 7EDBF1           (     ROMbasic.ASM):00343                   JMP  LB44A          USR ADDRESS FOR 8K BASIC (INITIALIZED TO ‘FC’ ERROR) 
D10B 80               (     ROMbasic.ASM):00344                   FCB  $80            *RANDOM SEED 
D10C 4FC7             (     ROMbasic.ASM):00345                   FDB  $4FC7          *RANDON SEED OF MANTISSA 
D10E 5259             (     ROMbasic.ASM):00346                   FDB  $5259          *.811635157 
                      (     ROMbasic.ASM):00347         ; BASIC COMMAND INTERPRETATION TABLE ROM IMAGE                      
D110 32               (     ROMbasic.ASM):00348         COMVEC    FCB  50             50 BASIC COMMANDS 
D111 D240             (     ROMbasic.ASM):00349                   FDB  LAA66          POINTS TO RESERVED WORDS 
D113 D34D             (     ROMbasic.ASM):00350                   FDB  LAB67          POINTS TO JUMP TABLE FOR COMMANDS 
D115 1D               (     ROMbasic.ASM):00351                   FCB  29             29 BASIC SECONDARY COMMANDS 
D116 D2E0             (     ROMbasic.ASM):00352                   FDB  LAB1A          POINTS TO SECONDARY FUNCTION RESERVED WORDS 
D118 D1F1             (     ROMbasic.ASM):00353                   FDB  LAA29          POINTS TO SECONDARY FUNCTION JUMP TABLE 
D11A 0000             (     ROMbasic.ASM):00354                   FDB  0              NO MORE TABLES (RES WORDS=0) 
D11C 0000             (     ROMbasic.ASM):00355                   FDB  0              NO MORE TABLES 
D11E 0000             (     ROMbasic.ASM):00356                   FDB  0              NO MORE TABLES 
D120 0000             (     ROMbasic.ASM):00357                   FDB  0              NO MORE TABLES 
D122 0000             (     ROMbasic.ASM):00358                   FDB  0              NO MORE TABLES 
D124 0000             (     ROMbasic.ASM):00359                   FDB  0              NO MORE TABLES (SECONDARY FNS =0) 
                      (     ROMbasic.ASM):00360                                        
                      (     ROMbasic.ASM):00361         ; COPYRIGHT MESSAGES                      
D126 0D               (     ROMbasic.ASM):00362         LA147     FCB  CR
D127 3638303920455854 (     ROMbasic.ASM):00363                   FCC  "6809 EXTENDED BASIC"  
     454E444544204241
     534943
D13A 0D               (     ROMbasic.ASM):00364                   FCB  CR              
D13B 2843292031393832 (     ROMbasic.ASM):00365                   FCC  "(C) 1982 BY MICROSOFT"  
     204259204D494352
     4F534F4654
D150 0D0D             (     ROMbasic.ASM):00366         LA156     FCB  CR,CR           
D152 00               (     ROMbasic.ASM):00367         LA165     FCB  $00             
                      (     ROMbasic.ASM):00368                                        
D153 3416             (     ROMbasic.ASM):00369         LA35F     PSHS X,B,A          SAVE REGISTERS 
D155 9E76             (     ROMbasic.ASM):00370                   LDX  LPTCFW         TAB FIELD WIDTH AND TAB ZONE 
D157 DC78             (     ROMbasic.ASM):00371                   LDD  LPTWID         PRINTER WIDTH AND POSITION 
D159 9F6A             (     ROMbasic.ASM):00372         LA37C     STX  DEVCFW         SAVE TAB FIELD WIDTH AND ZONE 
D15B D76C             (     ROMbasic.ASM):00373                   STB  DEVPOS         SAVE PRINT POSITION 
D15D 976D             (     ROMbasic.ASM):00374                   STA  DEVWID         SAVE PRINT WIDTH 
D15F 3596             (     ROMbasic.ASM):00375                   PULS A,B,X,PC       RESTORE REGISTERS 
                      (     ROMbasic.ASM):00376                                        
                      (     ROMbasic.ASM):00377         ; THIS IS THE ROUTINE THAT GETS AN INPUT LINE FOR BASIC                      
                      (     ROMbasic.ASM):00378         ; EXIT WITH BREAK KEY: CARRY = 1                      
                      (     ROMbasic.ASM):00379         ; EXIT WITH ENTER KEY: CARRY = 0                      
D161                  (     ROMbasic.ASM):00380         LA38D                          
D161 0F73             (     ROMbasic.ASM):00381         LA390     CLR  IKEYIM         RESET BREAK CHECK KEY TEMP KEY STORAGE 
D163 8E00F4           (     ROMbasic.ASM):00382                   LDX  #LINBUF+1      INPUT LINE BUFFER 
D166 C601             (     ROMbasic.ASM):00383                   LDB  #1             ACCB CHAR COUNTER: SET TO 1 TO ALLOW A 
                      (     ROMbasic.ASM):00384                                                         ;  BACKSPACE AS FIRST CHARACTER  
D168 BDD000           (     ROMbasic.ASM):00385         LA39A     JSR  KEYWAIT        GO GET A CHARACTER FROM CONSOLE IN 
D16B 8108             (     ROMbasic.ASM):00386                   CMPA #BS            BACKSPACE 
D16D 2607             (     ROMbasic.ASM):00387                   BNE  LA3B4          NO 
D16F 5A               (     ROMbasic.ASM):00388                   DECB                YES - DECREMENT CHAR COUNTER 
D170 27EF             (     ROMbasic.ASM):00389                   BEQ  LA390          BRANCH IF BACK AT START OF LINE AGAIN 
D172 301F             (     ROMbasic.ASM):00390                   LEAX -1,X           DECREMENT BUFFER POINTER 
D174 2034             (     ROMbasic.ASM):00391                   BRA  LA3E8          ECHO CHAR TO SCREEN 
D176 8115             (     ROMbasic.ASM):00392         LA3B4     CMPA #$15           SHIFT RIGHT ARROW? 
D178 260A             (     ROMbasic.ASM):00393                   BNE  LA3C2          NO 
                      (     ROMbasic.ASM):00394         ; YES, RESET BUFFER TO BEGINNING AND ERASE CURRENT LINE                      
D17A 5A               (     ROMbasic.ASM):00395         LA3B8     DECB                DEC CHAR CTR 
D17B 27E4             (     ROMbasic.ASM):00396                   BEQ  LA390          GO BACK TO START IF CHAR CTR = 0 
D17D 8608             (     ROMbasic.ASM):00397                   LDA  #BS            BACKSPACE? 
D17F BDD017           (     ROMbasic.ASM):00398                   JSR  PUTCHR         SEND TO CONSOLE OUT (SCREEN) 
D182 20F6             (     ROMbasic.ASM):00399                   BRA  LA3B8          KEEP GOING 
D184 8103             (     ROMbasic.ASM):00400         LA3C2     CMPA #3             BREAK KEY? 
D186 1A01             (     ROMbasic.ASM):00401                   ORCC #1             SET CARRY FLAG 
D188 2705             (     ROMbasic.ASM):00402                   BEQ  LA3CD          BRANCH IF BREAK KEY DOWN 
D18A 810D             (     ROMbasic.ASM):00403         LA3C8     CMPA #CR            ENTER KEY? 
D18C 260D             (     ROMbasic.ASM):00404                   BNE  LA3D9          NO 
D18E 4F               (     ROMbasic.ASM):00405         LA3CC     CLRA                CLEAR CARRY FLAG IF ENTER KEY - END LINE ENTRY 
D18F 3401             (     ROMbasic.ASM):00406         LA3CD     PSHS CC             SAVE CARRY FLAG 
D191 BDE3C3           (     ROMbasic.ASM):00407                   JSR  LB958          SEND CR TO SCREEN 
D194 6F84             (     ROMbasic.ASM):00408                   CLR  ,X             MAKE LAST BYTE IN INPUT BUFFER = 0 
D196 8E00F3           (     ROMbasic.ASM):00409                   LDX  #LINBUF        RESET INPUT BUFFER POINTER 
D199 3581             (     ROMbasic.ASM):00410                   PULS CC,PC          RESTORE CARRY FLAG 
                      (     ROMbasic.ASM):00411                                        
                      (     ROMbasic.ASM):00412         ; INSERT A CHARACTER INTO THE BASIC LINE INPUT BUFFER                      
D19B 8120             (     ROMbasic.ASM):00413         LA3D9     CMPA #$20           IS IT CONTROL CHAR? 
D19D 25C9             (     ROMbasic.ASM):00414                   BLO  LA39A          BRANCH IF CONTROL CHARACTER 
D19F 817B             (     ROMbasic.ASM):00415                   CMPA #'z+1          * 
D1A1 24C5             (     ROMbasic.ASM):00416                   BCC  LA39A          * IGNORE IF > LOWER CASE Z 
D1A3 C1FA             (     ROMbasic.ASM):00417                   CMPB #LBUFMX        HAVE 250 OR MORE CHARACTERS BEEN ENTERED? 
D1A5 24C1             (     ROMbasic.ASM):00418                   BCC  LA39A          YES, IGNORE ANY MORE 
D1A7 A780             (     ROMbasic.ASM):00419                   STA  ,X+            PUT IT IN INPUT BUFFER 
D1A9 5C               (     ROMbasic.ASM):00420                   INCB                INCREMENT CHARACTER COUNTER 
D1AA BDD017           (     ROMbasic.ASM):00421         LA3E8     JSR  PUTCHR         ECHO IT TO SCREEN 
D1AD 20B9             (     ROMbasic.ASM):00422                   BRA  LA39A          GO SET SOME MORE 
                      (     ROMbasic.ASM):00423                                        
                      (     ROMbasic.ASM):00424                                        
                      (     ROMbasic.ASM):00425         ; EXEC                         
D1AF 2705             (     ROMbasic.ASM):00426         EXEC      BEQ  LA545          BRANCH IF NO ARGUMENT 
D1B1 BDDEE4           (     ROMbasic.ASM):00427                   JSR  LB73D          EVALUATE ARGUMENT - ARGUMENT RETURNED IN X 
D1B4 9F7A             (     ROMbasic.ASM):00428                   STX  EXECJP         STORE X TO EXEC JUMP ADDRESS 
D1B6 6E9F007A         (     ROMbasic.ASM):00429         LA545     JMP  [EXECJP]       GO DO IT 
                      (     ROMbasic.ASM):00430                                        
                      (     ROMbasic.ASM):00431         ; BREAK CHECK                      
D1BA 7ED5C6           (     ROMbasic.ASM):00432         LA549     JMP  LADEB          GO DO BREAK KEY CHECK 
                      (     ROMbasic.ASM):00433                                        
                      (     ROMbasic.ASM):00434         ; INKEY$                       
D1BD 9673             (     ROMbasic.ASM):00435         INKEY     LDA  IKEYIM         WAS A KEY DOWN IN THE BREAK CHECK? 
D1BF 2603             (     ROMbasic.ASM):00436                   BNE  LA56B          YES 
D1C1 BDD005           (     ROMbasic.ASM):00437                   JSR  KEYIN          GO GET A KEY 
D1C4 0F73             (     ROMbasic.ASM):00438         LA56B     CLR  IKEYIM         CLEAR INKEY RAM IMAGE 
D1C6 9753             (     ROMbasic.ASM):00439                   STA  FPA0+3         STORE THE KEY IN FPA0 
D1C8 10260C6A         (     ROMbasic.ASM):00440                   LBNE LB68F          CONVERT FPA0+3 TO A STRING 
D1CC 9756             (     ROMbasic.ASM):00441                   STA  STRDES         SET LENGTH OF STRING = 0 IF NO KEY DOWN 
D1CE 7EDE42           (     ROMbasic.ASM):00442                   JMP  LB69B          PUT A NULL STRING ONTO THE STRING STACK 
                      (     ROMbasic.ASM):00443                                        
                      (     ROMbasic.ASM):00444         ; MOVE ACCB BYTES FROM (X) TO (U)                      
D1D1 A680             (     ROMbasic.ASM):00445         LA59A     LDA  ,X+            GET BYTE FROM X 
D1D3 A7C0             (     ROMbasic.ASM):00446                   STA  ,U+            STORE IT AT U 
D1D5 5A               (     ROMbasic.ASM):00447                   DECB                MOVED ALL BYTES? 
D1D6 26F9             (     ROMbasic.ASM):00448                   BNE  LA59A          NO 
D1D8 39               (     ROMbasic.ASM):00449         LA5A1     RTS                  
                      (     ROMbasic.ASM):00450                                        
D1D9 39               (     ROMbasic.ASM):00451         LA5C4     RTS                  
                      (     ROMbasic.ASM):00452                                        
                      (     ROMbasic.ASM):00453         ; THIS ROUTINE WILL SCAN OFF THE FILE NAME FROM A BASIC LINE                      
                      (     ROMbasic.ASM):00454         ; AND RETURN A SYNTAX ERROR IF THERE ARE ANY CHARACTERS                      
                      (     ROMbasic.ASM):00455         ; FOLLOWING THE END OF THE NAME                      
D1DA 9D82             (     ROMbasic.ASM):00456         LA5C7     JSR  GETCCH         GET CURRENT INPUT CHAR FROM BASIC LINE 
D1DC 27FB             (     ROMbasic.ASM):00457         LA5C9     BEQ  LA5C4          RETURN IF END OF LINE 
D1DE 7EDA23           (     ROMbasic.ASM):00458                   JMP  LB277          SYNTAX ERROR IF ANY MORE CHARACTERS 
                      (     ROMbasic.ASM):00459         ; IRQ SERVICE                      
D1E1                  (     ROMbasic.ASM):00460         BIRQSV                         
D1E1 3B               (     ROMbasic.ASM):00461         LA9C5     RTI  RETURN FROM INTERRUPT  
                      (     ROMbasic.ASM):00462                                        
                      (     ROMbasic.ASM):00463         ; SET CARRY IF NUMERIC - RETURN WITH                      
                      (     ROMbasic.ASM):00464         ; ZERO FLAG SET IF ACCA = 0 OR 3A(:) - END                      
                      (     ROMbasic.ASM):00465         ; OF BASIC LINE OR SUB LINE                      
D1E2 813A             (     ROMbasic.ASM):00466         BROMHK    CMPA #'9+1          IS THIS CHARACTER >=(ASCII 9)+1? 
D1E4 240A             (     ROMbasic.ASM):00467                   BHS  LAA28          BRANCH IF > 9; Z SET IF = COLON 
D1E6 8120             (     ROMbasic.ASM):00468                   CMPA #SPACE         SPACE? 
D1E8 2602             (     ROMbasic.ASM):00469                   BNE  LAA24          NO - SET CARRY IF NUMERIC 
D1EA 0E7C             (     ROMbasic.ASM):00470                   JMP  GETNCH         IF SPACE, GET NECT CHAR (IGNORE SPACES) 
D1EC 8030             (     ROMbasic.ASM):00471         LAA24     SUBA #'0            * SET CARRY IF 
D1EE 80D0             (     ROMbasic.ASM):00472                   SUBA #-'0           * CHARACTER > ASCII 0 
D1F0 39               (     ROMbasic.ASM):00473         LAA28     RTS                  
                      (     ROMbasic.ASM):00474                                        
                      (     ROMbasic.ASM):00475         ; DISPATCH TABLE FOR SECONDARY FUNCTIONS                      
                      (     ROMbasic.ASM):00476         ; TOKENS ARE PRECEEDED BY $FF                      
                      (     ROMbasic.ASM):00477         ; FIRST SET ALWAYS HAS ONE PARAMETER                      
D1F1                  (     ROMbasic.ASM):00478         FUNC_TAB                       
D1F1 E6E1             (     ROMbasic.ASM):00479         LAA29     FDB  SGN            SGN 
D1F3 E755             (     ROMbasic.ASM):00480                   FDB  INT            INT 
D1F5 E6FA             (     ROMbasic.ASM):00481                   FDB  ABS            ABS 
D1F7 00AD             (     ROMbasic.ASM):00482                   FDB  USRJMP         USR 
     0083             (     ROMbasic.ASM):00483         TOK_USR   EQU  (*-FUNC_TAB)/2+$7F     
     FF83             (     ROMbasic.ASM):00484         TOK_FF_USR EQU  (*-FUNC_TAB)/2+$FF7F    
D1F9 E986             (     ROMbasic.ASM):00485                   FDB  RND            RND 
D1FB E9DB             (     ROMbasic.ASM):00486                   FDB  SIN            SIN 
D1FD DEF7             (     ROMbasic.ASM):00487                   FDB  PEEK           PEEK 
D1FF DE28             (     ROMbasic.ASM):00488                   FDB  LEN            LEN 
D201 DCA4             (     ROMbasic.ASM):00489                   FDB  STR            STR$ 
D203 DEBD             (     ROMbasic.ASM):00490                   FDB  VAL            VAL 
D205 DE47             (     ROMbasic.ASM):00491                   FDB  ASC            ASC 
D207 DE33             (     ROMbasic.ASM):00492                   FDB  CHR            CHR$ 
D209 EA8B             (     ROMbasic.ASM):00493                   FDB  ATN            ATN 
D20B EA53             (     ROMbasic.ASM):00494                   FDB  COS            COS 
D20D EA5C             (     ROMbasic.ASM):00495                   FDB  TAN            TAN 
D20F EBCD             (     ROMbasic.ASM):00496                   FDB  EXP            EXP 
D211 EBFF             (     ROMbasic.ASM):00497                   FDB  FIX            FIX 
D213 EB21             (     ROMbasic.ASM):00498                   FDB  LOG            LOG 
D215 ED87             (     ROMbasic.ASM):00499                   FDB  POS            POS 
D217 EB5B             (     ROMbasic.ASM):00500                   FDB  SQR            SQR 
D219 F259             (     ROMbasic.ASM):00501                   FDB  HEXDOL         HEX$ 
                      (     ROMbasic.ASM):00502         ; LEFT, RIGHT AND MID ARE TREATED SEPARATELY                      
D21B DE52             (     ROMbasic.ASM):00503                   FDB  LEFT           LEFT$ 
     0095             (     ROMbasic.ASM):00504         TOK_LEFT  EQU  (*-FUNC_TAB)/2+$7F    
D21D DE6F             (     ROMbasic.ASM):00505                   FDB  RIGHT          RIGHT$ 
D21F DE76             (     ROMbasic.ASM):00506                   FDB  MID            MID$ 
     0097             (     ROMbasic.ASM):00507         TOK_MID   EQU  (*-FUNC_TAB)/2+$7F
                      (     ROMbasic.ASM):00508         ; REMAINING FUNCTIONS                      
D221 D1BD             (     ROMbasic.ASM):00509                   FDB  INKEY          INKEY$ 
     0098             (     ROMbasic.ASM):00510         TOK_INKEY EQU  (*-FUNC_TAB)/2+$7F
D223 DC95             (     ROMbasic.ASM):00511                   FDB  MEM            MEM 
D225 ED8F             (     ROMbasic.ASM):00512                   FDB  VARPT          VARPTR 
D227 EE4F             (     ROMbasic.ASM):00513                   FDB  INSTR          INSTR 
D229 EE1F             (     ROMbasic.ASM):00514                   FDB  STRING         STRING$ 
     001D             (     ROMbasic.ASM):00515         NUM_SEC_FNS EQU  (*-FUNC_TAB)/2 
                      (     ROMbasic.ASM):00516                                        
                      (     ROMbasic.ASM):00517         ; THIS TABLE CONTAINS PRECEDENCES AND DISPATCH ADDRESSES FOR ARITHMETIC                      
                      (     ROMbasic.ASM):00518         ; AND LOGICAL OPERATORS - THE NEGATION OPERATORS DO NOT ACT ON TWO OPERANDS                      
                      (     ROMbasic.ASM):00519         ; S0 THEY ARE NOT LISTED IN THIS TABLE. THEY ARE TREATED SEPARATELY IN THE                      
                      (     ROMbasic.ASM):00520         ; EXPRESSION EVALUATION ROUTINE. THEY ARE:                      
                      (     ROMbasic.ASM):00521         ; UNARY NEGATION (-), PRECEDENCE &7D AND LOGICAL NEGATION (NOT), PRECEDENCE $5A                      
                      (     ROMbasic.ASM):00522         ; THE RELATIONAL OPERATORS < > = ARE ALSO NOT LISTED, PRECEDENCE $64.                      
                      (     ROMbasic.ASM):00523         ; A PRECEDENCE VALUE OF ZERO INDICATES END OF EXPRESSION OR PARENTHESES                      
                      (     ROMbasic.ASM):00524         ;                              
D22B 79               (     ROMbasic.ASM):00525         LAA51     FCB  $79             
D22C E42C             (     ROMbasic.ASM):00526                   FDB  LB9C5          + 
D22E 79               (     ROMbasic.ASM):00527                   FCB  $79             
D22F E423             (     ROMbasic.ASM):00528                   FDB  LB9BC          - 
D231 7B               (     ROMbasic.ASM):00529                   FCB  $7B             
D232 E533             (     ROMbasic.ASM):00530                   FDB  LBACC          * 
D234 7B               (     ROMbasic.ASM):00531                   FCB  $7B             
D235 E5F8             (     ROMbasic.ASM):00532                   FDB  LBB91          / 
D237 7F               (     ROMbasic.ASM):00533                   FCB  $7F             
D238 EB64             (     ROMbasic.ASM):00534                   FDB  L8489          EXPONENTIATION 
D23A 50               (     ROMbasic.ASM):00535                   FCB  $50             
D23B DA7C             (     ROMbasic.ASM):00536                   FDB  LB2D5          AND 
D23D 46               (     ROMbasic.ASM):00537                   FCB  $46             
D23E DA7B             (     ROMbasic.ASM):00538                   FDB  LB2D4          OR 
                      (     ROMbasic.ASM):00539                                        
                      (     ROMbasic.ASM):00540         ; THIS IS THE RESERVED WORD TABLE                      
                      (     ROMbasic.ASM):00541         ; FIRST PART OF THE TABLE CONTAINS EXECUTABLE COMMANDS                      
D240 464F             (     ROMbasic.ASM):00542         LAA66     FCC  "FO"           80 
D242 D2               (     ROMbasic.ASM):00543                   FCB  $80+'R'         
D243 47               (     ROMbasic.ASM):00544                   FCC  "G"            81 
D244 CF               (     ROMbasic.ASM):00545                   FCB  $80+'O'         
     0081             (     ROMbasic.ASM):00546         TOK_GO    EQU  $81             
D245 5245             (     ROMbasic.ASM):00547                   FCC  "RE"           82 
D247 CD               (     ROMbasic.ASM):00548                   FCB  $80+'M'         
D248 A7               (     ROMbasic.ASM):00549                   FCB  ''+$80         83 
D249 454C53           (     ROMbasic.ASM):00550                   FCC  "ELS"          84 
D24C C5               (     ROMbasic.ASM):00551                   FCB  $80+'E'         
D24D 49               (     ROMbasic.ASM):00552                   FCC  "I"            85 
D24E C6               (     ROMbasic.ASM):00553                   FCB  $80+'F'         
D24F 444154           (     ROMbasic.ASM):00554                   FCC  "DAT"          86 
D252 C1               (     ROMbasic.ASM):00555                   FCB  $80+'A'         
D253 5052494E         (     ROMbasic.ASM):00556                   FCC  "PRIN"         87 
D257 D4               (     ROMbasic.ASM):00557                   FCB  $80+'T'         
D258 4F               (     ROMbasic.ASM):00558                   FCC  "O"            88 
D259 CE               (     ROMbasic.ASM):00559                   FCB  $80+'N'         
D25A 494E5055         (     ROMbasic.ASM):00560                   FCC  "INPU"         89 
D25E D4               (     ROMbasic.ASM):00561                   FCB  $80+'T'         
D25F 454E             (     ROMbasic.ASM):00562                   FCC  "EN"           8A 
D261 C4               (     ROMbasic.ASM):00563                   FCB  $80+'D'         
D262 4E4558           (     ROMbasic.ASM):00564                   FCC  "NEX"          8B 
D265 D4               (     ROMbasic.ASM):00565                   FCB  $80+'T'         
D266 4449             (     ROMbasic.ASM):00566                   FCC  "DI"           8C 
D268 CD               (     ROMbasic.ASM):00567                   FCB  $80+'M'         
D269 524541           (     ROMbasic.ASM):00568                   FCC  "REA"          8D 
D26C C4               (     ROMbasic.ASM):00569                   FCB  $80+'D'         
D26D 5255             (     ROMbasic.ASM):00570                   FCC  "RU"           8E 
D26F CE               (     ROMbasic.ASM):00571                   FCB  $80+'N'         
D270 524553544F52     (     ROMbasic.ASM):00572                   FCC  "RESTOR"       8F 
D276 C5               (     ROMbasic.ASM):00573                   FCB  $80+'E'         
D277 5245545552       (     ROMbasic.ASM):00574                   FCC  "RETUR"        90 
D27C CE               (     ROMbasic.ASM):00575                   FCB  $80+'N'         
D27D 53544F           (     ROMbasic.ASM):00576                   FCC  "STO"          91 
D280 D0               (     ROMbasic.ASM):00577                   FCB  $80+'P'         
D281 504F4B           (     ROMbasic.ASM):00578                   FCC  "POK"          92 
D284 C5               (     ROMbasic.ASM):00579                   FCB  $80+'E'         
D285 434F4E           (     ROMbasic.ASM):00580                   FCC  "CON"          93 
D288 D4               (     ROMbasic.ASM):00581                   FCB  $80+'T'         
D289 4C4953           (     ROMbasic.ASM):00582                   FCC  "LIS"          94 
D28C D4               (     ROMbasic.ASM):00583                   FCB  $80+'T'         
D28D 434C4541         (     ROMbasic.ASM):00584                   FCC  "CLEA"         95 
D291 D2               (     ROMbasic.ASM):00585                   FCB  $80+'R'         
D292 4E45             (     ROMbasic.ASM):00586                   FCC  "NE"           96 
D294 D7               (     ROMbasic.ASM):00587                   FCB  $80+'W'         
D295 455845           (     ROMbasic.ASM):00588                   FCC  "EXE"          97 
D298 C3               (     ROMbasic.ASM):00589                   FCB  $80+'C'         
D299 54524F           (     ROMbasic.ASM):00590                   FCC  "TRO"          98 
D29C CE               (     ROMbasic.ASM):00591                   FCB  $80+'N'         
D29D 54524F46         (     ROMbasic.ASM):00592                   FCC  "TROF"         99 
D2A1 C6               (     ROMbasic.ASM):00593                   FCB  $80+'F'         
D2A2 4445             (     ROMbasic.ASM):00594                   FCC  "DE"           9A 
D2A4 CC               (     ROMbasic.ASM):00595                   FCB  $80+'L'         
D2A5 4445             (     ROMbasic.ASM):00596                   FCC  "DE"           9B 
D2A7 C6               (     ROMbasic.ASM):00597                   FCB  $80+'F'         
D2A8 4C494E           (     ROMbasic.ASM):00598                   FCC  "LIN"          9C 
D2AB C5               (     ROMbasic.ASM):00599                   FCB  $80+'E'         
D2AC 52454E55         (     ROMbasic.ASM):00600                   FCC  "RENU"         9D 
D2B0 CD               (     ROMbasic.ASM):00601                   FCB  $80+'M'         
D2B1 454449           (     ROMbasic.ASM):00602                   FCC  "EDI"          9E 
D2B4 D4               (     ROMbasic.ASM):00603                   FCB  $80+'T'         
                      (     ROMbasic.ASM):00604         ; END OF EXECUTABLE COMMANDS. THE REMAINDER OF THE TABLE ARE NON-EXECUTABLE TOKENS                      
D2B5 544142           (     ROMbasic.ASM):00605                   FCC  "TAB"          9F 
D2B8 A8               (     ROMbasic.ASM):00606                   FCB  $80+'('         
     009F             (     ROMbasic.ASM):00607         TOK_TAB   EQU  $9F             
D2B9 54               (     ROMbasic.ASM):00608                   FCC  "T"            A0 
D2BA CF               (     ROMbasic.ASM):00609                   FCB  $80+'O'         
     00A0             (     ROMbasic.ASM):00610         TOK_TO    EQU  $A0             
D2BB 5355             (     ROMbasic.ASM):00611                   FCC  "SU"           A1 
D2BD C2               (     ROMbasic.ASM):00612                   FCB  $80+'B'         
     00A1             (     ROMbasic.ASM):00613         TOK_SUB   EQU  $A1             
D2BE 544845           (     ROMbasic.ASM):00614                   FCC  "THE"          A2 
D2C1 CE               (     ROMbasic.ASM):00615                   FCB  $80+'N'         
     00A2             (     ROMbasic.ASM):00616         TOK_THEN  EQU  $A2             
D2C2 4E4F             (     ROMbasic.ASM):00617                   FCC  "NO"           A3 
D2C4 D4               (     ROMbasic.ASM):00618                   FCB  $80+'T'         
     00A3             (     ROMbasic.ASM):00619         TOK_NOT   EQU  $A3             
D2C5 535445           (     ROMbasic.ASM):00620                   FCC  "STE"          A4 
D2C8 D0               (     ROMbasic.ASM):00621                   FCB  $80+'P'         
     00A4             (     ROMbasic.ASM):00622         TOK_STEP  EQU  $A4             
D2C9 4F46             (     ROMbasic.ASM):00623                   FCC  "OF"           A5 
D2CB C6               (     ROMbasic.ASM):00624                   FCB  $80+'F'         
D2CC AB               (     ROMbasic.ASM):00625                   FCB  '++$80         A6 
     00A6             (     ROMbasic.ASM):00626         TOK_PLUS  EQU  $A6             
D2CD AD               (     ROMbasic.ASM):00627                   FCB  '-+$80         A7 
     00A7             (     ROMbasic.ASM):00628         TOK_MINUS EQU  $A7             
D2CE AA               (     ROMbasic.ASM):00629                   FCB  '*+$80         A8 
D2CF AF               (     ROMbasic.ASM):00630                   FCB  '/+$80         A9 
D2D0 DE               (     ROMbasic.ASM):00631                   FCB  '^+$80         AA 
D2D1 414E             (     ROMbasic.ASM):00632                   FCC  "AN"           AB 
D2D3 C4               (     ROMbasic.ASM):00633                   FCB  $80+'D'         
D2D4 4F               (     ROMbasic.ASM):00634                   FCC  "O"            AC 
D2D5 D2               (     ROMbasic.ASM):00635                   FCB  $80+'R'         
D2D6 BE               (     ROMbasic.ASM):00636                   FCB  '>+$80         AD 
     00AD             (     ROMbasic.ASM):00637         TOK_GREATER EQU  $AD             
D2D7 BD               (     ROMbasic.ASM):00638                   FCB  '=+$80         AE 
     00AE             (     ROMbasic.ASM):00639         TOK_EQUALS EQU  $AE             
D2D8 BC               (     ROMbasic.ASM):00640                   FCB  '<+$80         AF 
D2D9 46               (     ROMbasic.ASM):00641                   FCC  "F"            B0 
D2DA CE               (     ROMbasic.ASM):00642                   FCB  $80+'N'         
     00B0             (     ROMbasic.ASM):00643         TOK_FN    EQU  $B0             
D2DB 5553494E         (     ROMbasic.ASM):00644                   FCC  "USIN"         B1 
D2DF C7               (     ROMbasic.ASM):00645                   FCB  $80+'G'         
     00B1             (     ROMbasic.ASM):00646         TOK_USING EQU  $B1             
                      (     ROMbasic.ASM):00647         ;                              
                      (     ROMbasic.ASM):00648                                        
                      (     ROMbasic.ASM):00649         ; FIRST SET ALWAYS HAS ONE PARAMETER                      
D2E0 5347             (     ROMbasic.ASM):00650         LAB1A     FCC  "SG"           80 
D2E2 CE               (     ROMbasic.ASM):00651                   FCB  $80+'N'         
D2E3 494E             (     ROMbasic.ASM):00652                   FCC  "IN"           81 
D2E5 D4               (     ROMbasic.ASM):00653                   FCB  $80+'T'         
D2E6 4142             (     ROMbasic.ASM):00654                   FCC  "AB"           82 
D2E8 D3               (     ROMbasic.ASM):00655                   FCB  $80+'S'         
D2E9 5553             (     ROMbasic.ASM):00656                   FCC  "US"           83 
D2EB D2               (     ROMbasic.ASM):00657                   FCB  $80+'R'         
D2EC 524E             (     ROMbasic.ASM):00658                   FCC  "RN"           84 
D2EE C4               (     ROMbasic.ASM):00659                   FCB  $80+'D'         
D2EF 5349             (     ROMbasic.ASM):00660                   FCC  "SI"           85 
D2F1 CE               (     ROMbasic.ASM):00661                   FCB  $80+'N'         
D2F2 504545           (     ROMbasic.ASM):00662                   FCC  "PEE"          86 
D2F5 CB               (     ROMbasic.ASM):00663                   FCB  $80+'K'         
D2F6 4C45             (     ROMbasic.ASM):00664                   FCC  "LE"           87 
D2F8 CE               (     ROMbasic.ASM):00665                   FCB  $80+'N'         
D2F9 535452           (     ROMbasic.ASM):00666                   FCC  "STR"          88 
D2FC A4               (     ROMbasic.ASM):00667                   FCB  $80+'$'         
D2FD 5641             (     ROMbasic.ASM):00668                   FCC  "VA"           89 
D2FF CC               (     ROMbasic.ASM):00669                   FCB  $80+'L'         
D300 4153             (     ROMbasic.ASM):00670                   FCC  "AS"           8A 
D302 C3               (     ROMbasic.ASM):00671                   FCB  $80+'C'         
D303 434852           (     ROMbasic.ASM):00672                   FCC  "CHR"          8B 
D306 A4               (     ROMbasic.ASM):00673                   FCB  $80+'$'         
D307 4154             (     ROMbasic.ASM):00674                   FCC  "AT"           8C 
D309 CE               (     ROMbasic.ASM):00675                   FCB  $80+'N'         
D30A 434F             (     ROMbasic.ASM):00676                   FCC  "CO"           8D 
D30C D3               (     ROMbasic.ASM):00677                   FCB  $80+'S'         
D30D 5441             (     ROMbasic.ASM):00678                   FCC  "TA"           8E 
D30F CE               (     ROMbasic.ASM):00679                   FCB  $80+'N'         
D310 4558             (     ROMbasic.ASM):00680                   FCC  "EX"           8F 
D312 D0               (     ROMbasic.ASM):00681                   FCB  $80+'P'         
D313 4649             (     ROMbasic.ASM):00682                   FCC  "FI"           90 
D315 D8               (     ROMbasic.ASM):00683                   FCB  $80+'X'         
D316 4C4F             (     ROMbasic.ASM):00684                   FCC  "LO"           91 
D318 C7               (     ROMbasic.ASM):00685                   FCB  $80+'G'         
D319 504F             (     ROMbasic.ASM):00686                   FCC  "PO"           92 
D31B D3               (     ROMbasic.ASM):00687                   FCB  $80+'S'         
D31C 5351             (     ROMbasic.ASM):00688                   FCC  "SQ"           93 
D31E D2               (     ROMbasic.ASM):00689                   FCB  $80+'R'         
D31F 484558           (     ROMbasic.ASM):00690                   FCC  "HEX"          94 
D322 A4               (     ROMbasic.ASM):00691                   FCB  $80+'$'         
                      (     ROMbasic.ASM):00692         ; LEFT, RIGHT AND MID ARE TREATED SEPARATELY                      
D323 4C454654         (     ROMbasic.ASM):00693                   FCC  "LEFT"         95 
D327 A4               (     ROMbasic.ASM):00694                   FCB  $80+'$'         
D328 5249474854       (     ROMbasic.ASM):00695                   FCC  "RIGHT"        96 
D32D A4               (     ROMbasic.ASM):00696                   FCB  $80+'$'         
D32E 4D4944           (     ROMbasic.ASM):00697                   FCC  "MID"          97 
D331 A4               (     ROMbasic.ASM):00698                   FCB  $80+'$'         
                      (     ROMbasic.ASM):00699         ; REMAINING FUNCTIONS                      
D332 494E4B4559       (     ROMbasic.ASM):00700                   FCC  "INKEY"        98 
D337 A4               (     ROMbasic.ASM):00701                   FCB  $80+'$'         
D338 4D45             (     ROMbasic.ASM):00702                   FCC  "ME"           99 
D33A CD               (     ROMbasic.ASM):00703                   FCB  $80+'M'         
D33B 5641525054       (     ROMbasic.ASM):00704                   FCC  "VARPT"        9A 
D340 D2               (     ROMbasic.ASM):00705                   FCB  $80+'R'         
D341 494E5354         (     ROMbasic.ASM):00706                   FCC  "INST"         9B 
D345 D2               (     ROMbasic.ASM):00707                   FCB  $80+'R'         
D346 535452494E47     (     ROMbasic.ASM):00708                   FCC  "STRING"       9C 
D34C A4               (     ROMbasic.ASM):00709                   FCB  $80+'$'         
                      (     ROMbasic.ASM):00710                                        
                      (     ROMbasic.ASM):00711         ;                              
                      (     ROMbasic.ASM):00712         ; DISPATCH TABLE FOR COMMANDS TOKEN #               
D34D                  (     ROMbasic.ASM):00713         CMD_TAB                        
D34D D50B             (     ROMbasic.ASM):00714         LAB67     FDB  FOR             80   
D34F D656             (     ROMbasic.ASM):00715                   FDB  GO              81   
D351 D6B3             (     ROMbasic.ASM):00716                   FDB  REM             82   
     0082             (     ROMbasic.ASM):00717         TOK_REM   EQU  (*-CMD_TAB)/2+$7F   
D353 D6B3             (     ROMbasic.ASM):00718                   FDB  REM             83 (') 
     0083             (     ROMbasic.ASM):00719         TOK_SNGL_Q EQU  (*-CMD_TAB)/2+$7F 
D355 D6B3             (     ROMbasic.ASM):00720                   FDB  REM             84 (ELSE) 
     0084             (     ROMbasic.ASM):00721         TOK_ELSE  EQU  (*-CMD_TAB)/2+$7F 
D357 D6E4             (     ROMbasic.ASM):00722                   FDB  IF              85   
     0085             (     ROMbasic.ASM):00723         TOK_IF    EQU  (*-CMD_TAB)/2+$7F 
D359 D6B0             (     ROMbasic.ASM):00724                   FDB  DATA            86   
     0086             (     ROMbasic.ASM):00725         TOK_DATA    EQU  (*-CMD_TAB)/2+$7F
D35B E388             (     ROMbasic.ASM):00726                   FDB  PRINT           87   
     0087             (     ROMbasic.ASM):00727         TOK_PRINT EQU  (*-CMD_TAB)/2+$7F 
D35D D712             (     ROMbasic.ASM):00728                   FDB  ON              88   
D35F D7BF             (     ROMbasic.ASM):00729                   FDB  INPUT           89   
     0089             (     ROMbasic.ASM):00730         TOK_INPUT EQU  (*-CMD_TAB)/2+$7F  
D361 D5DD             (     ROMbasic.ASM):00731                   FDB  END             8A   
D363 D8A4             (     ROMbasic.ASM):00732                   FDB  NEXT            8B   
D365 DAF5             (     ROMbasic.ASM):00733                   FDB  DIM             8C   
D367 D7F9             (     ROMbasic.ASM):00734                   FDB  READ            8D   
D369 D64B             (     ROMbasic.ASM):00735                   FDB  RUN             8E   
D36B D5BF             (     ROMbasic.ASM):00736                   FDB  RESTOR         8F 
D36D D690             (     ROMbasic.ASM):00737                   FDB  RETURN          90   
D36F D5E1             (     ROMbasic.ASM):00738                   FDB  STOP            91   
D371 DEFE             (     ROMbasic.ASM):00739                   FDB  POKE            92   
D373 D606             (     ROMbasic.ASM):00740                   FDB  CONT           93 
D375 E200             (     ROMbasic.ASM):00741                   FDB  LIST            94   
D377 D617             (     ROMbasic.ASM):00742                   FDB  CLEAR           95   
D379 D4DB             (     ROMbasic.ASM):00743                   FDB  NEW             96   
D37B D1AF             (     ROMbasic.ASM):00744                   FDB  EXEC           97 
D37D ED82             (     ROMbasic.ASM):00745                   FDB  TRON           98 
D37F ED83             (     ROMbasic.ASM):00746                   FDB  TROFF          99 
D381 EFFE             (     ROMbasic.ASM):00747                   FDB  DEL            9A 
D383 EF42             (     ROMbasic.ASM):00748                   FDB  DEF            9B 
D385 F6EC             (     ROMbasic.ASM):00749                   FDB  LINE           9C 
D387 F088             (     ROMbasic.ASM):00750                   FDB  RENUM          9D 
D389 EC0E             (     ROMbasic.ASM):00751                   FDB  EDIT           9E 
     009E             (     ROMbasic.ASM):00752         TOK_HIGH_EXEC EQU  (*-CMD_TAB)/2+$7F 
                      (     ROMbasic.ASM):00753                                        
                      (     ROMbasic.ASM):00754         ; ERROR MESSAGES AND THEIR NUMBERS AS USED INTERNALLY                      
D38B 4E46             (     ROMbasic.ASM):00755         LABAF     FCC  "NF"           0 NEXT WITHOUT FOR   
D38D 534E             (     ROMbasic.ASM):00756                   FCC  "SN"           1 SYNTAX ERROR   
D38F 5247             (     ROMbasic.ASM):00757                   FCC  "RG"           2 RETURN WITHOUT GOSUB   
D391 4F44             (     ROMbasic.ASM):00758                   FCC  "OD"           3 OUT OF DATA   
D393 4643             (     ROMbasic.ASM):00759                   FCC  "FC"           4 ILLEGAL FUNCTION CALL   
D395 4F56             (     ROMbasic.ASM):00760                   FCC  "OV"           5 OVERFLOW   
D397 4F4D             (     ROMbasic.ASM):00761                   FCC  "OM"           6 OUT OF MEMORY   
D399 554C             (     ROMbasic.ASM):00762                   FCC  "UL"           7 UNDEFINED LINE NUMBER   
D39B 4253             (     ROMbasic.ASM):00763                   FCC  "BS"           8 BAD SUBSCRIPT   
D39D 4444             (     ROMbasic.ASM):00764                   FCC  "DD"           9 REDIMENSIONED ARRAY   
D39F 2F30             (     ROMbasic.ASM):00765                   FCC  "/0"           10 DIVISION BY ZERO 
D3A1 4944             (     ROMbasic.ASM):00766                   FCC  "ID"           11 ILLEGAL DIRECT STATEMENT 
D3A3 544D             (     ROMbasic.ASM):00767                   FCC  "TM"           12 TYPE MISMATCH 
D3A5 4F53             (     ROMbasic.ASM):00768                   FCC  "OS"           13 OUT OF STRING SPACE 
D3A7 4C53             (     ROMbasic.ASM):00769                   FCC  "LS"           14 STRING TOO LONG 
D3A9 5354             (     ROMbasic.ASM):00770                   FCC  "ST"           15 STRING FORMULA TOO COMPLEX 
D3AB 434E             (     ROMbasic.ASM):00771                   FCC  "CN"           16 CAN'T CONTINUE 
D3AD 4644             (     ROMbasic.ASM):00772                   FCC  "FD"           17 BAD FILE DATA 
D3AF 414F             (     ROMbasic.ASM):00773                   FCC  "AO"           18 FILE ALREADY OPEN 
D3B1 444E             (     ROMbasic.ASM):00774                   FCC  "DN"           19 DEVICE NUMBER ERROR 
D3B3 494F             (     ROMbasic.ASM):00775                   FCC  "IO"           20 I/O ERROR 
D3B5 464D             (     ROMbasic.ASM):00776                   FCC  "FM"           21 BAD FILE MODE 
D3B7 4E4F             (     ROMbasic.ASM):00777                   FCC  "NO"           22 FILE NOT OPEN 
D3B9 4945             (     ROMbasic.ASM):00778                   FCC  "IE"           23 INPUT PAST END OF FILE 
D3BB 4453             (     ROMbasic.ASM):00779                   FCC  "DS"           24 DIRECT STATEMENT IN FILE 
                      (     ROMbasic.ASM):00780         ; ADDITIONAL ERROR MESSAGES ADDED BY EXTENDED BASIC                      
D3BD 5546             (     ROMbasic.ASM):00781         L890B     FCC  "UF"           25 UNDEFINED FUNCTION (FN) CALL 
D3BF 4E45             (     ROMbasic.ASM):00782         L890D     FCC  "NE"           26 FILE NOT FOUND 
                      (     ROMbasic.ASM):00783                                        
D3C1 204552524F52     (     ROMbasic.ASM):00784         LABE1     FCC  " ERROR"        
D3C7 00               (     ROMbasic.ASM):00785                   FCB  $00             
D3C8 20494E20         (     ROMbasic.ASM):00786         LABE8     FCC  " IN "          
D3CC 00               (     ROMbasic.ASM):00787                   FCB  $00             
D3CD 0D               (     ROMbasic.ASM):00788         LABED     FCB  CR              
D3CE 4F4B             (     ROMbasic.ASM):00789         LABEE     FCC  "OK"            
D3D0 0D00             (     ROMbasic.ASM):00790                   FCB  CR,$00          
D3D2 0D               (     ROMbasic.ASM):00791         LABF2     FCB  CR              
D3D3 425245414B       (     ROMbasic.ASM):00792                   FCC  "BREAK"         
D3D8 00               (     ROMbasic.ASM):00793                   FCB  $00             
                      (     ROMbasic.ASM):00794                                        
                      (     ROMbasic.ASM):00795         ; SEARCH THE STACK FOR ‘GOSUB/RETURN’ OR ‘FOR/NEXT’ DATA.                      
                      (     ROMbasic.ASM):00796         ; THE ‘FOR/NEXT’ INDEX VARIABLE DESCRIPTOR ADDRESS BEING                      
                      (     ROMbasic.ASM):00797         ; SOUGHT IS STORED IN VARDES. EACH BLOCK OF FOR/NEXT DATA IS 18                      
                      (     ROMbasic.ASM):00798         ; BYTES WITH A $80 LEADER BYTE AND THE GOSUB/RETURN DATA IS 5 BYTES                      
                      (     ROMbasic.ASM):00799         ; WITH AN $A6 LEADER BYTE. THE FIRST NON "FOR/NEXT" DATA                      
                      (     ROMbasic.ASM):00800         ; IS CONSIDERED ‘GOSUB/RETURN’                      
D3D9 3064             (     ROMbasic.ASM):00801         LABF9     LEAX 4,S            POINT X TO 3RD ADDRESS ON STACK - IGNORE THE 
                      (     ROMbasic.ASM):00802         ;                             FIRST TWO RETURN ADDRESSES ON THE STACK  
D3DB C612             (     ROMbasic.ASM):00803         LABFB     LDB  #18            18 BYTES SAVED ON STACK FOR EACH ‘FOR’ LOOP 
D3DD 9F0F             (     ROMbasic.ASM):00804                   STX  TEMPTR         SAVE POINTER 
D3DF A684             (     ROMbasic.ASM):00805                   LDA  ,X             GET 1ST BYTE 
D3E1 8080             (     ROMbasic.ASM):00806                   SUBA #$80           * CHECK FOR TYPE OF STACK JUMP FOUND 
D3E3 2615             (     ROMbasic.ASM):00807                   BNE  LAC1A          * BRANCH IF NOT ‘FOR/NEXT’ 
D3E5 AE01             (     ROMbasic.ASM):00808                   LDX  1,X            = GET INDEX VARIABLE DESCRIPTOR 
D3E7 9F11             (     ROMbasic.ASM):00809                   STX  TMPTR1         = POINTER AND SAVE IT IN TMPTR1 
D3E9 9E3B             (     ROMbasic.ASM):00810                   LDX  VARDES         GET INDEX VARIABLE BEING SEARCHED FOR 
D3EB 2709             (     ROMbasic.ASM):00811                   BEQ  LAC16          BRANCH IF DEFAULT INDEX VARIABLE - USE THE 
                      (     ROMbasic.ASM):00812         ;                             FIRST ‘FOR/NEXT’ DATA FOUND ON STACK 
                      (     ROMbasic.ASM):00813         ;                             IF NO INDEX VARIABLE AFTER ‘NEXT’ 
D3ED 9C11             (     ROMbasic.ASM):00814                   CMPX TMPTR1         DOES THE STACK INDEX MATCH THE ONE 
                      (     ROMbasic.ASM):00815         ;                             BEING SEARCHED FOR? 
D3EF 2709             (     ROMbasic.ASM):00816                   BEQ  LAC1A          YES 
D3F1 9E0F             (     ROMbasic.ASM):00817                   LDX  TEMPTR         * RESTORE INITIAL POINTER, ADD 
D3F3 3A               (     ROMbasic.ASM):00818                   ABX                 * 18 TO IT AND LOOK FOR 
D3F4 20E5             (     ROMbasic.ASM):00819                   BRA  LABFB          * NEXT BLOCK OF DATA 
D3F6 9E11             (     ROMbasic.ASM):00820         LAC16     LDX  TMPTR1         = GET 1ST INDEX VARIABLE FOUND AND 
D3F8 9F3B             (     ROMbasic.ASM):00821                   STX  VARDES         = SAVE AS ‘NEXT’ INDEX 
D3FA 9E0F             (     ROMbasic.ASM):00822         LAC1A     LDX  TEMPTR         POINT X TO START OF ‘FOR/NEXT’ DATA 
D3FC 4D               (     ROMbasic.ASM):00823                   TSTA                SET ZERO FLAG IF ‘FOR/NEXT’ DATA 
D3FD 39               (     ROMbasic.ASM):00824                   RTS                  
                      (     ROMbasic.ASM):00825         ; CHECK FOR MEMORY SPACE FOR NEW TOP OF                      
                      (     ROMbasic.ASM):00826         ; ARRAYS AND MOVE ARRAYS TO NEW LOCATION                      
D3FE 8D17             (     ROMbasic.ASM):00827         LAC1E     BSR  LAC37          ACCD = NEW BOTTOM OF FREE RAM - IS THERE 
                      (     ROMbasic.ASM):00828         ;                             ROOM FOR THE STACK? 
                      (     ROMbasic.ASM):00829         ; MOVE BYTES FROM V43(X) TO V41(U) UNTIL (X) = V47 AND                      
                      (     ROMbasic.ASM):00830         ; SAVE FINAL VALUE OF U IN V45                      
D400 DE41             (     ROMbasic.ASM):00831         LAC20     LDU  V41            POINT U TO DESTINATION ADDRESS (V41) 
D402 3341             (     ROMbasic.ASM):00832                   LEAU 1,U            ADD ONE TO U - COMPENSATE FOR FIRST PSHU 
D404 9E43             (     ROMbasic.ASM):00833                   LDX  V43            POINT X TO SOURCE ADDRESS (V43) 
D406 3001             (     ROMbasic.ASM):00834                   LEAX 1,X            ADD ONE - COMPENSATE FOR FIRST LDA ,X 
D408 A682             (     ROMbasic.ASM):00835         LAC28     LDA  ,-X            GRAB A BYTE FROM SOURCE 
D40A 3602             (     ROMbasic.ASM):00836                   PSHU A              MOVE IT TO DESTINATION 
D40C 9C47             (     ROMbasic.ASM):00837                   CMPX V47            DONE? 
D40E 26F8             (     ROMbasic.ASM):00838                   BNE  LAC28          NO - KEEP MOVING BYTES 
D410 DF45             (     ROMbasic.ASM):00839                   STU  V45            SAVE FINAL DESTINATION ADDRESS 
D412 39               (     ROMbasic.ASM):00840         LAC32     RTS                  
                      (     ROMbasic.ASM):00841         ; CHECK TO SEE IF THERE IS ROOM TO STORE 2*ACCB                      
                      (     ROMbasic.ASM):00842         ; BYTES IN FREE RAM - OM ERROR IF NOT                      
D413 4F               (     ROMbasic.ASM):00843         LAC33     CLRA                * ACCD CONTAINS NUMBER OF EXTRA 
D414 58               (     ROMbasic.ASM):00844                   ASLB                * BYTES TO PUT ON STACK 
D415 D31F             (     ROMbasic.ASM):00845                   ADDD ARYEND         END OF PROGRAM AND VARIABLES 
D417 C3003A           (     ROMbasic.ASM):00846         LAC37     ADDD #STKBUF        ADD STACK BUFFER - ROOM FOR STACK? 
D41A 2508             (     ROMbasic.ASM):00847                   BCS  LAC44          BRANCH IF GREATER THAN $FFFF 
D41C 10DF17           (     ROMbasic.ASM):00848                   STS  BOTSTK         CURRENT NEW BOTTOM OF STACK STACK POINTER 
D41F 109317           (     ROMbasic.ASM):00849                   CMPD BOTSTK         ARE WE GOING TO BE BELOW STACK? 
D422 25EE             (     ROMbasic.ASM):00850                   BCS  LAC32          YES - NO ERROR 
D424 C60C             (     ROMbasic.ASM):00851         LAC44     LDB  #6*2           OUT OF MEMORY ERROR 
                      (     ROMbasic.ASM):00852                                        
                      (     ROMbasic.ASM):00853         ; ERROR SERVICING ROUTINE                      
D426 BDD4F7           (     ROMbasic.ASM):00854         LAC46     JSR  LAD33          RESET STACK, STRING STACK, CONTINUE POINTER 
D429 BDE3C7           (     ROMbasic.ASM):00855                   JSR  LB95C          SEND A CR TO SCREEN 
D42C BDE416           (     ROMbasic.ASM):00856                   JSR  LB9AF          SEND A ‘?‘ TO SCREEN 
D42F 8ED38B           (     ROMbasic.ASM):00857                   LDX  #LABAF         POINT TO ERROR TABLE 
D432 3A               (     ROMbasic.ASM):00858         LAC60     ABX                 ADD MESSAGE NUMBER OFFSET 
D433 8D31             (     ROMbasic.ASM):00859                   BSR  LACA0          * GET TWO CHARACTERS FROM X AND 
D435 8D2F             (     ROMbasic.ASM):00860                   BSR  LACA0          * SEND TO CONSOLE OUT (SCREEN) 
D437 8ED3C0           (     ROMbasic.ASM):00861                   LDX  #LABE1-1       POINT TO "ERROR" MESSAGE 
D43A BDE403           (     ROMbasic.ASM):00862         LAC68     JSR  LB99C          PRINT MESSAGE POINTED TO BY X 
D43D 9668             (     ROMbasic.ASM):00863                   LDA  CURLIN         GET CURRENT LINE NUMBER (CURL IN) 
D43F 4C               (     ROMbasic.ASM):00864                   INCA                TEST FOR DIRECT MODE 
D440 2703             (     ROMbasic.ASM):00865                   BEQ  LAC73          BRANCH IF DIRECT MODE 
D442 BDE82C           (     ROMbasic.ASM):00866                   JSR  LBDC5          PRINT ‘IN ****‘ 
                      (     ROMbasic.ASM):00867                                        
                      (     ROMbasic.ASM):00868         ; THIS IS THE MAIN LOOP OF BASIC WHEN IN DIRECT MODE                      
D445 BDE3C7           (     ROMbasic.ASM):00869         LAC73     JSR  LB95C          MOVE CURSOR TO START OF LINE 
D448 8ED3CD           (     ROMbasic.ASM):00870                   LDX  #LABED         POINT X TO ‘OK’, CR MESSAGE 
D44B BDE403           (     ROMbasic.ASM):00871                   JSR  LB99C          PRINT ‘OK’, CR 
D44E BDD161           (     ROMbasic.ASM):00872         LAC7C     JSR  LA390          GO GET AN INPUT LINE 
D451 CEFFFF           (     ROMbasic.ASM):00873                   LDU  #$FFFF         THE LINE NUMBER FOR DIRECT MODE IS $FFFF 
D454 DF68             (     ROMbasic.ASM):00874                   STU  CURLIN         SAVE IT IN CURLIN 
D456 25F6             (     ROMbasic.ASM):00875                   BCS  LAC7C          BRANCH IF LINE INPUT TERMINATED BY BREAK 
D458 9F83             (     ROMbasic.ASM):00876                   STX  CHARAD         SAVE (X) AS CURRENT INPUT POINTER - THIS WILL 
                      (     ROMbasic.ASM):00877         ;                             ENABLE THE ‘LIVE KEYBOARD’ (DIRECT) MODE. THE  
                      (     ROMbasic.ASM):00878         ;                             LINE JUST ENTERED WILL BE INTERPRETED  
D45A 9D7C             (     ROMbasic.ASM):00879                   JSR  GETNCH         GET NEXT CHARACTER FROM BASIC 
D45C 27F0             (     ROMbasic.ASM):00880                   BEQ  LAC7C          NO LINE INPUT - GET ANOTHER LINE 
D45E 250B             (     ROMbasic.ASM):00881                   BCS  LACA5          BRANCH IF NUMER1C - THERE WAS A LINE NUMBER BEFORE 
                      (     ROMbasic.ASM):00882         ;                             THE  STATEMENT ENTERED, SO THIS STATEMENT  
                      (     ROMbasic.ASM):00883         ;                             WILL BE MERGED INTO THE BASIC PROGRAM  
D460 BDE2B5           (     ROMbasic.ASM):00884                   JSR  LB821          GO CRUNCH LINE 
D463 7ED594           (     ROMbasic.ASM):00885                   JMP  LADC0          GO EXECUTE THE STATEMENT (LIVE KEYBOARD) 
                      (     ROMbasic.ASM):00886         ;                              
D466 A680             (     ROMbasic.ASM):00887         LACA0     LDA  ,X+            GET A CHARACTER 
D468 7EE418           (     ROMbasic.ASM):00888                   JMP  LB9B1          SEND TO CONSOLE OUT 
                      (     ROMbasic.ASM):00889                         
                      (     ROMbasic.ASM):00890         ; TAKE A LINE FROM THE LINE INPUT BUFFER                      
                      (     ROMbasic.ASM):00891         ; AND INSERT IT INTO THE BASIC PROGRAM                      
D46B BDD737           (     ROMbasic.ASM):00892         LACA5     JSR  LAF67          CONVERT LINE NUMBER TO BINARY 
D46E 9E2B             (     ROMbasic.ASM):00893         LACA8     LDX  BINVAL         GET CONVERTED LINE NUMBER 
D470 9FF1             (     ROMbasic.ASM):00894                   STX  LINHDR         STORE IT IN LINE INPUT HEADER 
D472 BDE2B5           (     ROMbasic.ASM):00895                   JSR  LB821          GO CRUNCH THE LINE 
D475 D703             (     ROMbasic.ASM):00896                   STB  TMPLOC         SAVE LINE LENGTH 
D477 8D4C             (     ROMbasic.ASM):00897                   BSR  LAD01          FIND OUT WHERE TO INSERT LINE 
D479 2512             (     ROMbasic.ASM):00898                   BCS  LACC8          BRANCH IF LINE NUMBER DOES NOT ALREADY EXIST 
D47B DC47             (     ROMbasic.ASM):00899                   LDD  V47            GET ABSOLUTE ADDRESS OF LINE NUMBER 
D47D A384             (     ROMbasic.ASM):00900                   SUBD ,X             SUBTRACT ADDRESS OF NEXT LINE NUMBER 
D47F D31B             (     ROMbasic.ASM):00901                   ADDD VARTAB         * ADD TO CURRENT END OF PROGRAM - THIS WILL REMOVE 
D481 DD1B             (     ROMbasic.ASM):00902                   STD  VARTAB         * THE LENGTH OF THIS LINE NUMBER FROM THE PROGRAM 
D483 EE84             (     ROMbasic.ASM):00903                   LDU  ,X             POINT U TO ADDRESS OF NEXT LINE NUMBER 
                      (     ROMbasic.ASM):00904         ; DELETE OLD LINE FROM BASIC PROGRAM                      
D485 3702             (     ROMbasic.ASM):00905         LACC0     PULU A              GET A BYTE FROM WHAT’S LEFT OF PROGRAM 
D487 A780             (     ROMbasic.ASM):00906                   STA  ,X+            MOVE IT DOWN 
D489 9C1B             (     ROMbasic.ASM):00907                   CMPX VARTAB         COMPARE TO END OF BASIC PROGRAM 
D48B 26F8             (     ROMbasic.ASM):00908                   BNE  LACC0          BRANCH IF NOT AT END 
D48D 96F3             (     ROMbasic.ASM):00909         LACC8     LDA  LINBUF         * CHECK TO SEE IF THERE IS A LINE IN 
D48F 271C             (     ROMbasic.ASM):00910                   BEQ  LACE9          * THE BUFFER AND BRANCH IF NONE 
D491 DC1B             (     ROMbasic.ASM):00911                   LDD  VARTAB         = SAVE CURRENT END OF 
D493 DD43             (     ROMbasic.ASM):00912                   STD  V43            = PROGRAM IN V43 
D495 DB03             (     ROMbasic.ASM):00913                   ADDB TMPLOC         * ADD LENGTH OF CRUNCHED LINE, 
D497 8900             (     ROMbasic.ASM):00914                   ADCA #0             * PROPOGATE CARRY AND SAVE NEW END 
D499 DD41             (     ROMbasic.ASM):00915                   STD  V41            * OF PROGRAM IN V41 
D49B BDD3FE           (     ROMbasic.ASM):00916                   JSR  LAC1E          = MAKE SURE THERE’S ENOUGH RAM FOR THIS 
                      (     ROMbasic.ASM):00917         ;                             = LINE & MAKE A HOLE IN BASIC FOR NEW LINE  
D49E CE00EF           (     ROMbasic.ASM):00918                   LDU  #LINHDR-2      POINT U TO LINE TO BE INSERTED 
D4A1 3702             (     ROMbasic.ASM):00919         LACDD     PULU A              GET A BYTE FROM NEW LINE 
D4A3 A780             (     ROMbasic.ASM):00920                   STA  ,X+            INSERT IT IN PROGRAM 
D4A5 9C45             (     ROMbasic.ASM):00921                   CMPX V45            * COMPARE TO ADDRESS OF END OF INSERTED 
D4A7 26F8             (     ROMbasic.ASM):00922                   BNE  LACDD          * LINE AND BRANCH IF NOT DONE 
D4A9 9E41             (     ROMbasic.ASM):00923                   LDX  V41            = GET AND SAVE 
D4AB 9F1B             (     ROMbasic.ASM):00924                   STX  VARTAB         = END OF PROGRAM 
D4AD 8D36             (     ROMbasic.ASM):00925         LACE9     BSR  LAD21          RESET INPUT POINTER, CLEAR VARIABLES, INITIALIZE 
D4AF 8D02             (     ROMbasic.ASM):00926                   BSR  LACEF          ADJUST START OF NEXT LINE ADDRESSES 
D4B1 209B             (     ROMbasic.ASM):00927                   BRA  LAC7C          REENTER BASIC’S INPUT LOOP 
                      (     ROMbasic.ASM):00928         ; COMPUTE THE START OF NEXT LINE ADDRESSES FOR THE BASIC PROGRAM                      
D4B3 9E19             (     ROMbasic.ASM):00929         LACEF     LDX  TXTTAB         POINT X TO START OF PROGRAM 
D4B5 EC84             (     ROMbasic.ASM):00930         LACF1     LDD  ,X             GET ADDRESS OF NEXT LINE 
D4B7 2721             (     ROMbasic.ASM):00931                   BEQ  LAD16          RETURN IF END OF PROGRAM 
D4B9 3304             (     ROMbasic.ASM):00932                   LEAU 4,X            POINT U TO START OF BASIC TEXT IN LINE 
D4BB A6C0             (     ROMbasic.ASM):00933         LACF7     LDA  ,U+            * SKIP THROUGH THE LINE UNTIL A 
D4BD 26FC             (     ROMbasic.ASM):00934                   BNE  LACF7          * ZERO (END OF LINE) IS FOUND 
D4BF EF84             (     ROMbasic.ASM):00935                   STU  ,X             SAVE THE NEW START OF NEXT LINE ADDRESS 
D4C1 AE84             (     ROMbasic.ASM):00936                   LDX  ,X             POINT X TO START OF NEXT LINE 
D4C3 20F0             (     ROMbasic.ASM):00937                   BRA  LACF1          KEEP GOING 
                      (     ROMbasic.ASM):00938         ;                              
                      (     ROMbasic.ASM):00939         ; FIND A LINE NUMBER IN THE BASIC PROGRAM                      
                      (     ROMbasic.ASM):00940         ; RETURN WITH CARRY SET IF NO MATCH FOUND                      
D4C5 DC2B             (     ROMbasic.ASM):00941         LAD01     LDD  BINVAL         GET THE LINE NUMBER TO FIND 
D4C7 9E19             (     ROMbasic.ASM):00942                   LDX  TXTTAB         BEGINNING OF PROGRAM 
D4C9 EE84             (     ROMbasic.ASM):00943         LAD05     LDU  ,X             GET ADDRESS OF NEXT LINE NUMBER 
D4CB 2709             (     ROMbasic.ASM):00944                   BEQ  LAD12          BRANCH IF END OF PROG 
D4CD 10A302           (     ROMbasic.ASM):00945                   CMPD 2,X            IS IT A MATCH? 
D4D0 2306             (     ROMbasic.ASM):00946                   BLS  LAD14          CARRY SET IF LOWER; CARRY CLEAR IF MATCH 
D4D2 AE84             (     ROMbasic.ASM):00947                   LDX  ,X             X = ADDRESS OF NEXT LINE 
D4D4 20F3             (     ROMbasic.ASM):00948                   BRA  LAD05          KEEP LOOPING FOR LINE NUMBER 
D4D6 1A01             (     ROMbasic.ASM):00949         LAD12     ORCC #1             SET CARRY FLAG 
D4D8 9F47             (     ROMbasic.ASM):00950         LAD14     STX  V47            SAVE MATCH LINE NUMBER OR NUMBER OF LINE JUST AFTER 
                      (     ROMbasic.ASM):00951         ;                             WHERE IT SHOULD HAVE BEEN 
D4DA 39               (     ROMbasic.ASM):00952         LAD16     RTS                  
                      (     ROMbasic.ASM):00953                                        
                      (     ROMbasic.ASM):00954         ; NEW                          
D4DB 26FB             (     ROMbasic.ASM):00955         NEW       BNE  LAD14          BRANCH IF ARGUMENT GIVEN 
D4DD 9E19             (     ROMbasic.ASM):00956         LAD19     LDX  TXTTAB         GET START OF BASIC 
D4DF 6F80             (     ROMbasic.ASM):00957                   CLR  ,X+            * PUT 2 ZERO BYTES THERE - ERASE 
D4E1 6F80             (     ROMbasic.ASM):00958                   CLR  ,X+            * THE BASIC PROGRAM 
D4E3 9F1B             (     ROMbasic.ASM):00959                   STX  VARTAB         AND THE NEXT ADDRESS IS NOW THE END OF PROGRAM 
D4E5 9E19             (     ROMbasic.ASM):00960         LAD21     LDX  TXTTAB         GET START OF BASIC 
D4E7 BDD68B           (     ROMbasic.ASM):00961                   JSR  LAEBB          PUT INPUT POINTER ONE BEFORE START OF BASIC 
                      (     ROMbasic.ASM):00962         ; ERASE ALL VARIABLES                      
D4EA 9E27             (     ROMbasic.ASM):00963         LAD26     LDX  MEMSIZ         * RESET START OF STRING VARIABLES 
D4EC 9F23             (     ROMbasic.ASM):00964                   STX  STRTAB         * TO TOP OF STRING SPACE 
D4EE BDD5BF           (     ROMbasic.ASM):00965                   JSR  RESTOR         RESET ‘DATA’ POINTER TO START OF BASIC 
D4F1 9E1B             (     ROMbasic.ASM):00966                   LDX  VARTAB         * GET START OF VARIABLES AND USE IT 
D4F3 9F1D             (     ROMbasic.ASM):00967                   STX  ARYTAB         * TO RESET START OF ARRAYS 
D4F5 9F1F             (     ROMbasic.ASM):00968                   STX  ARYEND         RESET END OF ARRAYS 
D4F7 8E00C9           (     ROMbasic.ASM):00969         LAD33     LDX  #STRSTK        * RESET STRING STACK POINTER TO 
D4FA 9F0B             (     ROMbasic.ASM):00970                   STX  TEMPPT         * BOTTOM OF STRING STACK 
D4FC AEE4             (     ROMbasic.ASM):00971                   LDX  ,S             GET RETURN ADDRESS OFF STACK 
D4FE 10DE21           (     ROMbasic.ASM):00972                   LDS  FRETOP         RESTORE STACK POINTER 
D501 6FE2             (     ROMbasic.ASM):00973                   CLR  ,-S            PUT A ZERO BYTE ON STACK - TO CLEAR ANY RETURN OF 
                      (     ROMbasic.ASM):00974         ;                             FOR/NEXT DATA FROM THE STACK 
D503 0F2D             (     ROMbasic.ASM):00975                   CLR  OLDPTR         RESET ‘CONT’ ADDRESS SO YOU 
D505 0F2E             (     ROMbasic.ASM):00976                   CLR  OLDPTR+1       ‘CAN’T CONTINUE’ 
D507 0F08             (     ROMbasic.ASM):00977                   CLR  ARYDIS         CLEAR THE ARRAY DISABLE FLAG 
D509 6E84             (     ROMbasic.ASM):00978                   JMP  ,X             RETURN TO CALLING ROUTINE - THIS IS NECESSARY 
                      (     ROMbasic.ASM):00979         ;                             SINCE THE STACK WAS RESET 
                      (     ROMbasic.ASM):00980         ;                              
                      (     ROMbasic.ASM):00981         ; FOR                          
                      (     ROMbasic.ASM):00982         ;                              
                      (     ROMbasic.ASM):00983         ; THE FOR COMMAND WILL STORE 18 BYTES ON THE STACK FOR                      
                      (     ROMbasic.ASM):00984         ; EACH FOR-NEXT LOOP WHICH IS BEING PROCESSED. THESE                      
                      (     ROMbasic.ASM):00985         ; BYTES ARE DEFINED AS FOLLOWS: 0- $80 (FOR FLAG);                      
                      (     ROMbasic.ASM):00986         ;         1,2=INDEX VARIABLE DESCRIPTOR POINTER; 3-7=FP VALUE OF STEP;  
                      (     ROMbasic.ASM):00987         ;         8=STEP DIRECTION: $FF IF NEGATIVE; 0 IF ZERO; 1 IF POSITIVE;  
                      (     ROMbasic.ASM):00988         ; 9-13=FP VALUE OF ‘TO’ PARAMETER;                      
                      (     ROMbasic.ASM):00989         ; 14,15=CURRENT LINE NUMBER; 16,17=RAM ADDRESS OF THE END                      
                      (     ROMbasic.ASM):00990         ;         OF   THE LINE CONTAINING THE ‘FOR’ STATEMENT  
D50B 8680             (     ROMbasic.ASM):00991         FOR       LDA  #$80           * SAVE THE DISABLE ARRAY FLAG IN VO8 
D50D 9708             (     ROMbasic.ASM):00992                   STA  ARYDIS         * DO NOT ALLOW THE INDEX VARIABLE TO BE AN ARRAY 
D50F BDD759           (     ROMbasic.ASM):00993                   JSR  LET            SET INDEX VARIABLE TO INITIAL VALUE 
D512 BDD3D9           (     ROMbasic.ASM):00994                   JSR  LABF9          SEARCH THE STACK FOR ‘FOR/NEXT’ DATA 
D515 3262             (     ROMbasic.ASM):00995                   LEAS 2,S            PURGE RETURN ADDRESS OFF OF THE STACK 
D517 2604             (     ROMbasic.ASM):00996                   BNE  LAD59          BRANCH IF INDEX VARIABLE NOT ALREADY BEING USED 
D519 9E0F             (     ROMbasic.ASM):00997                   LDX  TEMPTR         GET (ADDRESS + 18) OF MATCHED ‘FOR/NEXT’ DATA 
D51B 3285             (     ROMbasic.ASM):00998                   LEAS B,X            MOVE THE STACK POINTER TO THE BEGINNING OF THE 
                      (     ROMbasic.ASM):00999         ; MATCHED ‘FOR/NEXT’ DATA SO THE NEW DATA WILL                      
                      (     ROMbasic.ASM):01000         ; OVERLAY THE OLD DATA. THIS WILL ALSO DESTROY                      
                      (     ROMbasic.ASM):01001         ; ALL OF THE ‘RETURN’ AND ‘FOR/NEXT’ DATA BELOW                      
                      (     ROMbasic.ASM):01002         ; THIS POINT ON THE STACK                      
D51D C609             (     ROMbasic.ASM):01003         LAD59     LDB  #$09           * CHECK FOR ROOM FOR 18 BYTES 
D51F BDD413           (     ROMbasic.ASM):01004                   JSR  LAC33          * IN FREE RAM 
D522 BDD6B8           (     ROMbasic.ASM):01005                   JSR  LAEE8          GET ADDR OF END OF SUBLINE IN X 
D525 DC68             (     ROMbasic.ASM):01006                   LDD  CURLIN         GET CURRENT LINE NUMBER 
D527 3416             (     ROMbasic.ASM):01007                   PSHS X,B,A          SAVE LINE ADDR AND LINE NUMBER ON STACK 
D529 C6A0             (     ROMbasic.ASM):01008                   LDB  #TOK_TO        TOKEN FOR ‘TO’ 
D52B BDDA1B           (     ROMbasic.ASM):01009                   JSR  LB26F          SYNTAX CHECK FOR ‘TO’ 
D52E BDD8EF           (     ROMbasic.ASM):01010                   JSR  LB143          ‘TM’ ERROR IF INDEX VARIABLE SET TO STRING 
D531 BDD8ED           (     ROMbasic.ASM):01011                   JSR  LB141          EVALUATE EXPRESSION 
                      (     ROMbasic.ASM):01012         ;                              
D534 D654             (     ROMbasic.ASM):01013                   LDB  FP0SGN         GET FPA0 MANTISSA SIGN 
D536 CA7F             (     ROMbasic.ASM):01014                   ORB  #$7F           FORM A MASK TO SAVE DATA BITS OF HIGH ORDER MANTISSA 
D538 D450             (     ROMbasic.ASM):01015                   ANDB FPA0           PUT THE MANTISSA SIGN IN BIT 7 OF HIGH ORDER MANTISSA 
D53A D750             (     ROMbasic.ASM):01016                   STB  FPA0           SAVE THE PACKED HIGH ORDER MANTISSA 
D53C 108ED543         (     ROMbasic.ASM):01017                   LDY  #LAD7F         LOAD FOLLOWING ADDRESS INTO Y AS A RETURN 
D540 7ED996           (     ROMbasic.ASM):01018                   JMP  LB1EA          ADDRESS - PUSH FPA0 ONTO THE STACK 
D543 8EE52C           (     ROMbasic.ASM):01019         LAD7F     LDX  #LBAC5         POINT X TO FLOATING POINT NUMBER 1.0 (DEFAULT STEP VALUE) 
D546 BDE67B           (     ROMbasic.ASM):01020                   JSR  LBC14          MOVE (X) TO FPA0 
D549 9D82             (     ROMbasic.ASM):01021                   JSR  GETCCH         GET CURRENT INPUT CHARACTER 
D54B 81A4             (     ROMbasic.ASM):01022                   CMPA #TOK_STEP      STEP TOKEN 
D54D 2605             (     ROMbasic.ASM):01023                   BNE  LAD90          BRANCH IF NO ‘STEP’ VALUE 
D54F 9D7C             (     ROMbasic.ASM):01024                   JSR  GETNCH         GET A CHARACTER FROM BASIC 
D551 BDD8ED           (     ROMbasic.ASM):01025                   JSR  LB141          EVALUATE NUMERIC EXPRESSION 
D554 BDE6D4           (     ROMbasic.ASM):01026         LAD90     JSR  LBC6D          CHECK STATUS OF FPA0 
D557 BDD992           (     ROMbasic.ASM):01027                   JSR  LB1E6          SAVE STATUS AND FPA0 ON THE STACK 
D55A DC3B             (     ROMbasic.ASM):01028                   LDD  VARDES         * GET DESCRIPTOR POINTER FOR THE ‘STEP’ 
D55C 3406             (     ROMbasic.ASM):01029                   PSHS B,A            * VARIABLE AND SAVE IT ON THE STACK 
D55E 8680             (     ROMbasic.ASM):01030                   LDA  #$80           = GET THE ‘FOR’ FLAG AND 
D560 3402             (     ROMbasic.ASM):01031                   PSHS A              = SAVE IT ON THE STACK 
                      (     ROMbasic.ASM):01032         ;                              
                      (     ROMbasic.ASM):01033         ; MAIN COMMAND INTERPRETATION LOOP                      
D562 1CAF             (     ROMbasic.ASM):01034         LAD9E     ANDCC #$AF          ENABLE IRQ,FIRQ 
D564 8D60             (     ROMbasic.ASM):01035                   BSR  LADEB          CHECK FOR KEYBOARD BREAK 
D566 9E83             (     ROMbasic.ASM):01036                   LDX  CHARAD         GET BASIC’S INPUT POINTER 
D568 9F2F             (     ROMbasic.ASM):01037                   STX  TINPTR         SAVE IT 
D56A A680             (     ROMbasic.ASM):01038                   LDA  ,X+            GET CURRENT INPUT CHAR & MOVE POINTER 
D56C 2707             (     ROMbasic.ASM):01039                   BEQ  LADB4          BRANCH IF END OF LINE 
D56E 813A             (     ROMbasic.ASM):01040                   CMPA #':            CHECK FOR LINE SEPARATOR 
D570 2722             (     ROMbasic.ASM):01041                   BEQ  LADC0          BRANCH IF COLON 
D572 7EDA23           (     ROMbasic.ASM):01042         LADB1     JMP  LB277          ‘SYNTAX ERROR’-IF NOT LINE SEPARATOR 
D575 A681             (     ROMbasic.ASM):01043         LADB4     LDA  ,X++           GET MS BYTE OF ADDRESS OF NEXT BASIC LINE 
D577 9700             (     ROMbasic.ASM):01044                   STA  ENDFLG         SAVE IN STOP/END FLAG - CAUSE A STOP IF 
                      (     ROMbasic.ASM):01045         ;                             NEXT LINE ADDRESS IS < $8000; CAUSE 
                      (     ROMbasic.ASM):01046         ;                             AN END IF ADDRESS > $8000 
D579 2772             (     ROMbasic.ASM):01047                   BEQ  LAE15          BRANCH TO ‘STOP’ - END OF PROGRAM 
D57B EC80             (     ROMbasic.ASM):01048                   LDD  ,X+            GET CURRENT LINE NUMBER 
D57D DD68             (     ROMbasic.ASM):01049                   STD  CURLIN         SAVE IN CURLIN 
D57F 9F83             (     ROMbasic.ASM):01050                   STX  CHARAD         SAVE ADDRESS OF FIRST BYTE OF LINE 
                      (     ROMbasic.ASM):01051         ; EXTENDED BASIC TRACE                      
D581 968C             (     ROMbasic.ASM):01052                   LDA  TRCFLG         TEST THE TRACE FLAG 
D583 270F             (     ROMbasic.ASM):01053                   BEQ  LADC0          BRANCH IF TRACE OFF 
D585 865B             (     ROMbasic.ASM):01054                   LDA  #$5B           <LEFT HAND MARKER FOR TRON LINE NUMBER 
D587 BDD017           (     ROMbasic.ASM):01055                   JSR  PUTCHR         OUTPUT A CHARACTER 
D58A 9668             (     ROMbasic.ASM):01056                   LDA  CURLIN         GET MS BYTE OF LINE NUMBER 
D58C BDE833           (     ROMbasic.ASM):01057                   JSR  LBDCC          CONVERT ACCD TO DECIMAL AND PRINT ON SCREEN 
D58F 865D             (     ROMbasic.ASM):01058                   LDA  #$5D           > RIGHT HAND MARKER FOR TRON LINE NUMBER 
D591 BDD017           (     ROMbasic.ASM):01059                   JSR  PUTCHR         OUTPUT A CHARACTER 
                      (     ROMbasic.ASM):01060         ; END OF EXTENDED BASIC TRACE                      
D594 9D7C             (     ROMbasic.ASM):01061         LADC0     JSR  GETNCH         GET A CHARACTER FROM BASIC 
D596 8D02             (     ROMbasic.ASM):01062                   BSR  LADC6          GO PROCESS COMMAND 
D598 20C8             (     ROMbasic.ASM):01063                   BRA  LAD9E          GO BACK TO MAIN LOOP 
D59A 2729             (     ROMbasic.ASM):01064         LADC6     BEQ  LADEA          RETURN IF END OF LINE (RTS - was BEQ LAE40) 
D59C 4D               (     ROMbasic.ASM):01065                   TSTA                CHECK FOR TOKEN - BIT 7 SET (NEGATIVE) 
D59D 102A01B8         (     ROMbasic.ASM):01066                   LBPL LET            BRANCH IF NOT A TOKEN - GO DO A ‘LET’ WHICH 
                      (     ROMbasic.ASM):01067         ;                             IS THE ‘DEFAULT’ TOKEN FOR MICROSOFT BASIC 
D5A1 81FF             (     ROMbasic.ASM):01068                   CMPA #$FF           SECONDARY TOKEN 
D5A3 270F             (     ROMbasic.ASM):01069                   BEQ  SECTOK          
D5A5 819E             (     ROMbasic.ASM):01070                   CMPA #TOK_HIGH_EXEC SKIPF TOKEN - HIGHEST EXECUTABLE COMMAND IN BASIC 
D5A7 22C9             (     ROMbasic.ASM):01071                   BHI  LADB1          ‘SYNTAX ERROR’ IF NON-EXECUTABLE TOKEN 
D5A9 BED113           (     ROMbasic.ASM):01072                   LDX  COMVEC+3       GET ADDRESS OF BASIC’S COMMAND TABLE 
D5AC 48               (     ROMbasic.ASM):01073         LADD4     ASLA                X2 (2 BYTE/JUMP ADDRESS) & DISCARD BIT 7 
D5AD 1F89             (     ROMbasic.ASM):01074                   TFR  A,B            SAVE COMMAND OFFSET IN ACCB 
D5AF 3A               (     ROMbasic.ASM):01075                   ABX                 NON X POINTS TO COMMAND JUMP ADDR 
D5B0 9D7C             (     ROMbasic.ASM):01076                   JSR  GETNCH         GET AN INPUT CHAR 
                      (     ROMbasic.ASM):01077         ;                              
                      (     ROMbasic.ASM):01078         ; HERE IS WHERE WE BRANCH TO DO A ‘COMMAND’                      
D5B2 6E94             (     ROMbasic.ASM):01079                   JMP  [,X]           GO DO A COMMAND 
D5B4                  (     ROMbasic.ASM):01080         SECTOK                         
                      (     ROMbasic.ASM):01081         ; THE ONLY SECONDARY TOKEN THAT CAN ALSO BE AN EXECUTABLE IS                      
                      (     ROMbasic.ASM):01082         ; THE MID$ REPLACEMENT STATEMENT. SO SPECIAL-CASE CHECK DONE HERE                      
D5B4 9D7C             (     ROMbasic.ASM):01083                   JSR  GETNCH         GET AN INPUT CHAR 
D5B6 8197             (     ROMbasic.ASM):01084                   CMPA #TOK_MID       TOKEN FOR "MID$" 
D5B8 102717EB         (     ROMbasic.ASM):01085                   LBEQ L86D6          PROCESS MID$ REPLACEMENT 
D5BC 7EDA23           (     ROMbasic.ASM):01086                   JMP  LB277          SYNTAX ERROR 
                      (     ROMbasic.ASM):01087                                        
                      (     ROMbasic.ASM):01088         ;                              
                      (     ROMbasic.ASM):01089         ; RESTORE                      
D5BF 9E19             (     ROMbasic.ASM):01090         RESTOR    LDX  TXTTAB         BEGINNING OF PROGRAM ADDRESS 
D5C1 301F             (     ROMbasic.ASM):01091                   LEAX -1,X           MOVE TO ONE BYTE BEFORE PROGRAM 
D5C3 9F33             (     ROMbasic.ASM):01092         LADE8     STX  DATPTR         SAVE NEW DATA POINTER 
D5C5 39               (     ROMbasic.ASM):01093         LADEA     RTS                  
                      (     ROMbasic.ASM):01094         ;                              
                      (     ROMbasic.ASM):01095         ; BREAK CHECK                      
D5C6 BDD005           (     ROMbasic.ASM):01096         LADEB     JSR  KEYIN          GET A KEYSTROKE ENTRY 
D5C9 270A             (     ROMbasic.ASM):01097                   BEQ  LADFA          RETURN IF NO INPUT 
D5CB 8103             (     ROMbasic.ASM):01098         LADF0     CMPA #3             CONTROL C? (BREAK) 
D5CD 2712             (     ROMbasic.ASM):01099                   BEQ  STOP           YES 
D5CF 8113             (     ROMbasic.ASM):01100                   CMPA #$13           CONTROL S? (PAUSE) 
D5D1 2703             (     ROMbasic.ASM):01101                   BEQ  LADFB          YES 
D5D3 9773             (     ROMbasic.ASM):01102                   STA  IKEYIM         SAVE KEYSTROKE IN INKEY IMAGE 
D5D5 39               (     ROMbasic.ASM):01103         LADFA     RTS                  
D5D6 BDD005           (     ROMbasic.ASM):01104         LADFB     JSR  KEYIN          GET A KEY 
D5D9 27FB             (     ROMbasic.ASM):01105                   BEQ  LADFB          BRANCH IF NO KEY DOWN 
D5DB 20EE             (     ROMbasic.ASM):01106                   BRA  LADF0          CONTINUE - DO A BREAK CHECK 
                      (     ROMbasic.ASM):01107         ;                              
                      (     ROMbasic.ASM):01108         ; END                          
D5DD 9D82             (     ROMbasic.ASM):01109         END       JSR  GETCCH         GET CURRENT INPUT CHAR 
D5DF 2002             (     ROMbasic.ASM):01110                   BRA  LAE0B           
                      (     ROMbasic.ASM):01111         ;                              
                      (     ROMbasic.ASM):01112         ; STOP                         
D5E1 1A01             (     ROMbasic.ASM):01113         STOP      ORCC #$01           SET CARRY FLAG 
D5E3 2631             (     ROMbasic.ASM):01114         LAE0B     BNE  LAE40          BRANCH IF ARGUMENT EXISTS 
D5E5 9E83             (     ROMbasic.ASM):01115                   LDX  CHARAD         * SAVE CURRENT POSITION OF 
D5E7 9F2F             (     ROMbasic.ASM):01116                   STX  TINPTR         * BASIC’S INPUT POINTER 
D5E9 0600             (     ROMbasic.ASM):01117         LAE11     ROR  ENDFLG         ROTATE CARRY INTO BIT 7 OF STOP/END FLAG 
D5EB 3262             (     ROMbasic.ASM):01118                   LEAS 2,S            PURGE RETURN ADDRESS OFF STACK 
D5ED 9E68             (     ROMbasic.ASM):01119         LAE15     LDX  CURLIN         GET CURRENT LINE NUMBER 
D5EF 8CFFFF           (     ROMbasic.ASM):01120                   CMPX #$FFFF         DIRECT MODE? 
D5F2 2706             (     ROMbasic.ASM):01121                   BEQ  LAE22          YES 
D5F4 9F29             (     ROMbasic.ASM):01122                   STX  OLDTXT         SAVE CURRENT LINE NUMBER 
D5F6 9E2F             (     ROMbasic.ASM):01123                   LDX  TINPTR         * GET AND SAVE CURRENT POSITION 
D5F8 9F2D             (     ROMbasic.ASM):01124                   STX  OLDPTR         * OF BASIC’S INPUT POINTER 
D5FA                  (     ROMbasic.ASM):01125         LAE22                          
D5FA 8ED3D1           (     ROMbasic.ASM):01126                   LDX  #LABF2-1       POINT TO CR, ‘BREAK’ MESSAGE 
D5FD 0D00             (     ROMbasic.ASM):01127                   TST  ENDFLG         CHECK STOP/END FLAG 
D5FF 102AFE42         (     ROMbasic.ASM):01128                   LBPL LAC73          BRANCH TO MAIN LOOP OF BASIC IF END 
D603 7ED43A           (     ROMbasic.ASM):01129                   JMP  LAC68          PRINT ‘BREAK AT ####’ AND GO TO 
                      (     ROMbasic.ASM):01130         ;                             BASIC’S MAIN LOOP IF ‘STOP’ 
                      (     ROMbasic.ASM):01131                                        
                      (     ROMbasic.ASM):01132         ; CONT                         
D606 260E             (     ROMbasic.ASM):01133         CONT      BNE  LAE40          RETURN IF ARGUMENT GIVEN 
D608 C620             (     ROMbasic.ASM):01134                   LDB  #2*16          ‘CAN’T CONTINUE’ ERROR 
D60A 9E2D             (     ROMbasic.ASM):01135                   LDX  OLDPTR         GET CONTINUE ADDRESS (INPUT POINTER) 
D60C 1027FE16         (     ROMbasic.ASM):01136                   LBEQ LAC46          ‘CN’ ERROR IF CONTINUE ADDRESS = 0 
D610 9F83             (     ROMbasic.ASM):01137                   STX  CHARAD         RESET BASIC’S INPUT POINTER 
D612 9E29             (     ROMbasic.ASM):01138                   LDX  OLDTXT         GET LINE NUMBER 
D614 9F68             (     ROMbasic.ASM):01139                   STX  CURLIN         RESET CURRENT LINE NUMBER 
D616 39               (     ROMbasic.ASM):01140         LAE40     RTS                  
                      (     ROMbasic.ASM):01141         ;                              
                      (     ROMbasic.ASM):01142         ; CLEAR                        
D617 272C             (     ROMbasic.ASM):01143         CLEAR     BEQ  LAE6F          BRANCH IF NO ARGUMENT 
D619 BDDB8D           (     ROMbasic.ASM):01144                   JSR  LB3E6          EVALUATE ARGUMENT 
D61C 3406             (     ROMbasic.ASM):01145                   PSHS B,A            SAVE AMOUNT OF STRING SPACE ON STACK 
D61E 9E27             (     ROMbasic.ASM):01146                   LDX  MEMSIZ         GET CURRENT TOP OF CLEARED SPACE 
D620 9D82             (     ROMbasic.ASM):01147                   JSR  GETCCH         GET CURRENT INPUT CHARACTER 
D622 270C             (     ROMbasic.ASM):01148                   BEQ  LAE5A          BRANCH IF NO NEW TOP OF CLEARED SPACE 
D624 BDDA19           (     ROMbasic.ASM):01149                   JSR  LB26D          SYNTAX CHECK FOR COMMA 
D627 BDDEE4           (     ROMbasic.ASM):01150                   JSR  LB73D          EVALUATE EXPRESSlON; RETURN VALUE IN X 
D62A 301F             (     ROMbasic.ASM):01151                   LEAX -1,X           X = TOP OF CLEARED SPACE 
D62C 9C71             (     ROMbasic.ASM):01152                   CMPX TOPRAM         COMPARE TO TOP OF RAM 
D62E 2218             (     ROMbasic.ASM):01153                   BHI  LAE72          ‘OM’ ERROR IF > TOP OF RAM 
D630 1F10             (     ROMbasic.ASM):01154         LAE5A     TFR  X,D            ACCD = TOP OF CLEARED SPACE 
D632 A3E1             (     ROMbasic.ASM):01155                   SUBD ,S++           SUBTRACT OUT AMOUNT OF CLEARED SPACE 
D634 2512             (     ROMbasic.ASM):01156                   BCS  LAE72          ‘OM’ ERROR IF FREE MEM < 0 
D636 1F03             (     ROMbasic.ASM):01157                   TFR  D,U            U = BOTTOM OF CLEARED SPACE 
D638 83003A           (     ROMbasic.ASM):01158                   SUBD #STKBUF        SUBTRACT OUT STACK BUFFER 
D63B 250B             (     ROMbasic.ASM):01159                   BCS  LAE72          ‘OM’ ERROR IF FREE MEM < 0 
D63D 931B             (     ROMbasic.ASM):01160                   SUBD VARTAB         SUBTRACT OUT START OF VARIABLES 
D63F 2507             (     ROMbasic.ASM):01161                   BCS  LAE72          ‘OM’ ERROR IF FREE MEM < 0 
D641 DF21             (     ROMbasic.ASM):01162                   STU  FRETOP         SAVE NEW BOTTOM OF CLEARED SPACE 
D643 9F27             (     ROMbasic.ASM):01163                   STX  MEMSIZ         SAVE NEW TOP OF CLEARED SPACE 
D645 7ED4EA           (     ROMbasic.ASM):01164         LAE6F     JMP  LAD26          ERASE ALL VARIABLES, INITIALIZE POINTERS, ETC 
D648 7ED424           (     ROMbasic.ASM):01165         LAE72     JMP  LAC44          ‘OM’ ERROR 
                      (     ROMbasic.ASM):01166         ;                              
                      (     ROMbasic.ASM):01167         ; RUN                          
D64B 9D82             (     ROMbasic.ASM):01168         RUN       JSR  GETCCH         * GET CURRENT INPUT CHARACTER 
D64D 1027FE94         (     ROMbasic.ASM):01169                   LBEQ LAD21          * IF NO LINE NUMBER 
D651 BDD4EA           (     ROMbasic.ASM):01170                   JSR  LAD26          ERASE ALL VARIABLES 
D654 2019             (     ROMbasic.ASM):01171                   BRA  LAE9F          ‘GOTO’ THE RUN ADDRESS 
                      (     ROMbasic.ASM):01172         ;                              
                      (     ROMbasic.ASM):01173         ; GO                           
D656 1F89             (     ROMbasic.ASM):01174         GO        TFR  A,B            SAVE INPUT CHARACTER IN ACCB 
D658 9D7C             (     ROMbasic.ASM):01175         LAE88     JSR  GETNCH         GET A CHARACTER FROM BASIC 
D65A C1A0             (     ROMbasic.ASM):01176                   CMPB #TOK_TO        ‘TO’ TOKEN 
D65C 2716             (     ROMbasic.ASM):01177                   BEQ  LAEA4          BRANCH IF GOTO 
D65E C1A1             (     ROMbasic.ASM):01178                   CMPB #TOK_SUB       ‘SUB’ TOKEN 
D660 2645             (     ROMbasic.ASM):01179                   BNE  LAED7          ‘SYNTAX ERROR’ IF NEITHER 
D662 C603             (     ROMbasic.ASM):01180                   LDB  #3             =ROOM FOR 6 
D664 BDD413           (     ROMbasic.ASM):01181                   JSR  LAC33          =BYTES ON STACK? 
D667 DE83             (     ROMbasic.ASM):01182                   LDU  CHARAD         * SAVE CURRENT BASIC INPUT POINTER, LINE 
D669 9E68             (     ROMbasic.ASM):01183                   LDX  CURLIN         * NUMBER AND SUB TOKEN ON STACK 
D66B 86A1             (     ROMbasic.ASM):01184                   LDA  #TOK_SUB       * 
D66D 3452             (     ROMbasic.ASM):01185                   PSHS U,X,A          * 
D66F 8D03             (     ROMbasic.ASM):01186         LAE9F     BSR  LAEA4          GO DO A ‘GOTO’ 
D671 7ED562           (     ROMbasic.ASM):01187                   JMP  LAD9E          JUMP BACK TO BASIC’S MAIN LOOP 
                      (     ROMbasic.ASM):01188         ; GOTO                         
D674 9D82             (     ROMbasic.ASM):01189         LAEA4     JSR  GETCCH         GET CURRENT INPUT CHAR 
D676 BDD737           (     ROMbasic.ASM):01190                   JSR  LAF67          GET LINE NUMBER TO BINARY IN BINVAL 
D679 8D40             (     ROMbasic.ASM):01191                   BSR  LAEEB          ADVANCE BASIC’S POINTER TO END OF LINE 
D67B 3001             (     ROMbasic.ASM):01192                   LEAX $01,X          POINT TO START OF NEXT LINE 
D67D DC2B             (     ROMbasic.ASM):01193                   LDD  BINVAL         GET THE LINE NUMBER TO RUN 
D67F 109368           (     ROMbasic.ASM):01194                   CMPD CURLIN         COMPARE TO CURRENT LINE NUMBER 
D682 2202             (     ROMbasic.ASM):01195                   BHI  LAEB6          IF REO’D LINE NUMBER IS > CURRENT LINE NUMBER, 
                      (     ROMbasic.ASM):01196         ;              DON’T START LOOKING FROM  
                      (     ROMbasic.ASM):01197         ;              START OF PROGRAM  
D684 9E19             (     ROMbasic.ASM):01198                   LDX  TXTTAB         BEGINNING OF PROGRAM 
D686 BDD4C9           (     ROMbasic.ASM):01199         LAEB6     JSR  LAD05          GO FIND A LINE NUMBER 
D689 2517             (     ROMbasic.ASM):01200                   BCS  LAED2          ‘UNDEFINED LINE NUMBER’ 
D68B 301F             (     ROMbasic.ASM):01201         LAEBB     LEAX -1,X           MOVE BACK TO JUST BEFORE START OF LINE 
D68D 9F83             (     ROMbasic.ASM):01202                   STX  CHARAD         RESET BASIC’S INPUT POINTER 
D68F 39               (     ROMbasic.ASM):01203         LAEBF     RTS                  
                      (     ROMbasic.ASM):01204         ;                              
                      (     ROMbasic.ASM):01205         ; RETURN                       
D690 26FD             (     ROMbasic.ASM):01206         RETURN    BNE  LAEBF          EXIT ROUTINE IF ARGUMENT GIVEN 
D692 86FF             (     ROMbasic.ASM):01207                   LDA  #$FF           * PUT AN ILLEGAL VARIABLE NAME IN FIRST BYTE OF 
D694 973B             (     ROMbasic.ASM):01208                   STA  VARDES         * VARDES WHICH WILL CAUSE ‘FOR/NEXT’ DATA ON THE 
                      (     ROMbasic.ASM):01209         ;              STACK TO BE IGNORED  
D696 BDD3D9           (     ROMbasic.ASM):01210                   JSR  LABF9          CHECK FOR RETURN DATA ON THE STACK 
D699 1F14             (     ROMbasic.ASM):01211                   TFR  X,S            RESET STACK POINTER - PURGE TWO RETURN ADDRESSES 
                      (     ROMbasic.ASM):01212         ;              FROM THE STACK  
D69B 8121             (     ROMbasic.ASM):01213                   CMPA #TOK_SUB-$80   SUB TOKEN - $80 
D69D 270B             (     ROMbasic.ASM):01214                   BEQ  LAEDA          BRANCH IF ‘RETURN’ FROM SUBROUTINE 
D69F C604             (     ROMbasic.ASM):01215                   LDB  #2*2           ERROR #2 ‘RETURN WITHOUT GOSUB’ 
D6A1 8C               (     ROMbasic.ASM):01216                   FCB  SKP2           SKIP TWO BYTES 
D6A2 C60E             (     ROMbasic.ASM):01217         LAED2     LDB  #7*2           ERROR #7 ‘UNDEFINED LINE NUMBER’ 
D6A4 7ED426           (     ROMbasic.ASM):01218                   JMP  LAC46          JUMP TO ERROR HANDLER 
D6A7 7EDA23           (     ROMbasic.ASM):01219         LAED7     JMP  LB277          ‘SYNTAX ERROR’ 
D6AA 3552             (     ROMbasic.ASM):01220         LAEDA     PULS A,X,U          * RESTORE VALUES OF CURRENT LINE NUMBER AND 
D6AC 9F68             (     ROMbasic.ASM):01221                   STX  CURLIN         * BASIC’S INPUT POINTER FOR THIS SUBROUTINE 
D6AE DF83             (     ROMbasic.ASM):01222                   STU  CHARAD         * AND LOAD ACCA WITH SUB TOKEN ($A6) 
                      (     ROMbasic.ASM):01223         ;                              
                      (     ROMbasic.ASM):01224         ; DATA                         
D6B0 8D06             (     ROMbasic.ASM):01225         DATA      BSR  LAEE8          MOVE INPUT POINTER TO END OF SUBLINE OR LINE 
D6B2 8C               (     ROMbasic.ASM):01226                   FCB  SKP2           SKIP 2 BYTES 
                      (     ROMbasic.ASM):01227                                        
                      (     ROMbasic.ASM):01228         ; REM, ELSE                      
D6B3                  (     ROMbasic.ASM):01229         ELSE                           
D6B3 8D06             (     ROMbasic.ASM):01230         REM       BSR  LAEEB          MOVE INPUT POINTER TO END OF LINE 
D6B5 9F83             (     ROMbasic.ASM):01231                   STX  CHARAD         RESET BASIC’S INPUT POINTER 
D6B7 39               (     ROMbasic.ASM):01232         LAEE7     RTS                  
                      (     ROMbasic.ASM):01233         ; ADVANCE INPUT POINTER TO END OF SUBLINE OR LINE                      
D6B8 C63A             (     ROMbasic.ASM):01234         LAEE8     LDB  #':            COLON = SUBLINE TERMINATOR CHARACTER 
D6BA 86               (     ROMbasic.ASM):01235         LAEEA     FCB  SKP1LD         SKPILD SKIP ONE BYTE; LDA #$5F 
                      (     ROMbasic.ASM):01236         ; ADVANCE BASIC’S INPUT POINTER TO END OF                      
                      (     ROMbasic.ASM):01237         ; LINE - RETURN ADDRESS OF END OF LINE+1 IN X                      
D6BB 5F               (     ROMbasic.ASM):01238         LAEEB     CLRB                0 = LINE TERMINATOR CHARACTER 
D6BC D701             (     ROMbasic.ASM):01239                   STB  CHARAC         TEMP STORE PRIMARY TERMINATOR CHARACTER 
D6BE 5F               (     ROMbasic.ASM):01240                   CLRB                0 (END OF LINE) = ALTERNATE TERM. CHAR. 
D6BF 9E83             (     ROMbasic.ASM):01241                   LDX  CHARAD         LOAD X W/BASIC’S INPUT POINTER 
D6C1 1F98             (     ROMbasic.ASM):01242         LAEF1     TFR  B,A            * CHANGE TERMINATOR CHARACTER 
D6C3 D601             (     ROMbasic.ASM):01243                   LDB  CHARAC         * FROM ACCB TO CHARAC - SAVE OLD TERMINATOR 
                      (     ROMbasic.ASM):01244         ;         IN   CHARAC          
D6C5 9701             (     ROMbasic.ASM):01245                   STA  CHARAC         SWAP PRIMARY AND SECONDARY TERMINATORS 
D6C7 A684             (     ROMbasic.ASM):01246         LAEF7     LDA  ,X             GET NEXT INPUT CHARACTER 
D6C9 27EC             (     ROMbasic.ASM):01247                   BEQ  LAEE7          RETURN IF 0 (END OF LINE) 
D6CB 3404             (     ROMbasic.ASM):01248                   PSHS B              SAVE TERMINATOR ON STACK 
D6CD A1E0             (     ROMbasic.ASM):01249                   CMPA ,S+            COMPARE TO INPUT CHARACTER 
D6CF 27E6             (     ROMbasic.ASM):01250                   BEQ  LAEE7          RETURN IF EQUAL 
D6D1 3001             (     ROMbasic.ASM):01251                   LEAX 1,X            MOVE POINTER UP ONE 
D6D3 8122             (     ROMbasic.ASM):01252                   CMPA #'"            CHECK FOR DOUBLE QUOTES 
D6D5 27EA             (     ROMbasic.ASM):01253                   BEQ  LAEF1          BRANCH IF " - TOGGLE TERMINATOR CHARACTERS 
D6D7 4C               (     ROMbasic.ASM):01254                   INCA                * CHECK FOR $FF AND BRANCH IF 
D6D8 2602             (     ROMbasic.ASM):01255                   BNE  LAF0C          * NOT SECONDARY TOKEN 
D6DA 3001             (     ROMbasic.ASM):01256                   LEAX 1,X            MOVE INPUT POINTER 1 MORE IF SECONDARY 
D6DC 8186             (     ROMbasic.ASM):01257         LAF0C     CMPA #TOK_IF+1      TOKEN FOR IF? 
D6DE 26E7             (     ROMbasic.ASM):01258                   BNE  LAEF7          NO - GET ANOTHER INPUT CHARACTER 
D6E0 0C04             (     ROMbasic.ASM):01259                   INC  IFCTR          INCREMENT IF COUNTER - KEEP TRACK OF HOW MANY 
                      (     ROMbasic.ASM):01260         ;                             ‘IF’ STATEMENTS ARE NESTED IN ONE LINE 
D6E2 20E3             (     ROMbasic.ASM):01261                   BRA  LAEF7          GET ANOTHER INPUT CHARACTER 
                      (     ROMbasic.ASM):01262                                        
                      (     ROMbasic.ASM):01263         ; IF                           
D6E4 BDD8ED           (     ROMbasic.ASM):01264         IF        JSR  LB141          EVALUATE NUMERIC EXPRESSION 
D6E7 9D82             (     ROMbasic.ASM):01265                   JSR  GETCCH         GET CURRENT INPUT CHARACTER 
D6E9 8181             (     ROMbasic.ASM):01266                   CMPA #TOK_GO        TOKEN FOR GO 
D6EB 2705             (     ROMbasic.ASM):01267                   BEQ  LAF22          TREAT ‘GO’ THE SAME AS ‘THEN’ 
D6ED C6A2             (     ROMbasic.ASM):01268                   LDB  #TOK_THEN      TOKEN FOR THEN 
D6EF BDDA1B           (     ROMbasic.ASM):01269                   JSR  LB26F          DO A SYNTAX CHECK ON ACCB 
D6F2 964F             (     ROMbasic.ASM):01270         LAF22     LDA  FP0EXP         CHECK FOR TRUE/FALSE - FALSE IF FPA0 EXPONENT = ZERO 
D6F4 2613             (     ROMbasic.ASM):01271                   BNE  LAF39          BRANCH IF CONDITION TRUE 
D6F6 0F04             (     ROMbasic.ASM):01272                   CLR  IFCTR          CLEAR FLAG - KEEP TRACK OF WHICH NESTED ELSE STATEMENT 
                      (     ROMbasic.ASM):01273         ;                             TO SEARCH FOR IN NESTED ‘IF’ LOOPS 
D6F8 8DB6             (     ROMbasic.ASM):01274         LAF28     BSR  DATA           MOVE BASIC’S POINTER TO END OF SUBLINE 
D6FA 4D               (     ROMbasic.ASM):01275                   TSTA                * CHECK TO SEE IF END OF LINE OR SUBLINE 
D6FB 27BA             (     ROMbasic.ASM):01276                   BEQ  LAEE7          * AND RETURN IF END OF LINE 
D6FD 9D7C             (     ROMbasic.ASM):01277                   JSR  GETNCH         GET AN INPUT CHARACTER FROM BASIC 
D6FF 8184             (     ROMbasic.ASM):01278                   CMPA #TOK_ELSE      TOKEN FOR ELSE 
D701 26F5             (     ROMbasic.ASM):01279                   BNE  LAF28          IGNORE ALL DATA EXCEPT ‘ELSE’ UNTIL 
                      (     ROMbasic.ASM):01280         ;                             END OF LINE (ZERO BYTE) 
D703 0A04             (     ROMbasic.ASM):01281                   DEC  IFCTR          CHECK TO SEE IF YOU MUST SEARCH ANOTHER SUBLINE 
D705 2AF1             (     ROMbasic.ASM):01282                   BPL  LAF28          BRANCH TO SEARCH ANOTHER SUBLINE FOR ‘ELSE’ 
D707 9D7C             (     ROMbasic.ASM):01283                   JSR  GETNCH         GET AN INPUT CHARACTER FROM BASIC 
D709 9D82             (     ROMbasic.ASM):01284         LAF39     JSR  GETCCH         GET CURRENT INPUT CHARACTER 
D70B 1025FF65         (     ROMbasic.ASM):01285                   LBCS LAEA4          BRANCH TO ‘GOTO’ IF NUMERIC CHARACTER 
D70F 7ED59A           (     ROMbasic.ASM):01286                   JMP  LADC6          RETURN TO MAIN INTERPRETATION LOOP 
                      (     ROMbasic.ASM):01287                                        
                      (     ROMbasic.ASM):01288         ; ON                           
D712 BDDEB2           (     ROMbasic.ASM):01289         ON        JSR  LB70B          EVALUATE EXPRESSION 
D715 C681             (     ROMbasic.ASM):01290                   LDB  #TOK_GO        TOKEN FOR GO 
D717 BDDA1B           (     ROMbasic.ASM):01291                   JSR  LB26F          SYNTAX CHECK FOR GO 
D71A 3402             (     ROMbasic.ASM):01292                   PSHS A              SAVE NEW TOKEN (TO,SUB) 
D71C 81A1             (     ROMbasic.ASM):01293                   CMPA #TOK_SUB       TOKEN FOR SUB? 
D71E 2704             (     ROMbasic.ASM):01294                   BEQ  LAF54          YES 
D720 81A0             (     ROMbasic.ASM):01295                   CMPA #TOK_TO        TOKEN FOR TO? 
D722 2683             (     ROMbasic.ASM):01296         LAF52     BNE  LAED7          ‘SYNTAX’ ERROR IF NOT ‘SUB’ OR ‘TO’ 
D724 0A53             (     ROMbasic.ASM):01297         LAF54     DEC  FPA0+3         DECREMENT IS BYTE OF MANTISSA OF FPA0 - THIS 
                      (     ROMbasic.ASM):01298         ;                             IS THE ARGUMENT OF THE ‘ON’ STATEMENT 
D726 2605             (     ROMbasic.ASM):01299                   BNE  LAF5D          BRANCH IF NOT AT THE PROPER GOTO OR GOSUB LINE NUMBER 
D728 3504             (     ROMbasic.ASM):01300                   PULS B              GET BACK THE TOKEN FOLLOWING ‘GO’ 
D72A 7ED658           (     ROMbasic.ASM):01301                   JMP  LAE88          GO DO A ‘GOTO’ OR ‘GOSUB’ 
D72D 9D7C             (     ROMbasic.ASM):01302         LAF5D     JSR  GETNCH         GET A CHARACTER FROM BASIC 
D72F 8D06             (     ROMbasic.ASM):01303                   BSR  LAF67          CONVERT BASIC LINE NUMBER TO BINARY 
D731 812C             (     ROMbasic.ASM):01304                   CMPA #',            IS CHARACTER FOLLOWING LINE NUMBER A COMMA? 
D733 27EF             (     ROMbasic.ASM):01305                   BEQ  LAF54          YES 
D735 3584             (     ROMbasic.ASM):01306                   PULS B,PC           IF NOT, FALL THROUGH TO NEXT COMMAND 
D737 9E74             (     ROMbasic.ASM):01307         LAF67     LDX  ZERO           DEFAULT LINE NUMBER OF ZERO 
D739 9F2B             (     ROMbasic.ASM):01308                   STX  BINVAL         SAVE IT IN BINVAL 
                      (     ROMbasic.ASM):01309         ;                              
                      (     ROMbasic.ASM):01310         ; CONVERT LINE NUMBER TO BINARY - RETURN VALUE IN BINVAL                      
                      (     ROMbasic.ASM):01311         ;                              
D73B 2461             (     ROMbasic.ASM):01312         LAF6B     BCC  LAFCE          RETURN IF NOT NUMERIC CHARACTER 
D73D 8030             (     ROMbasic.ASM):01313                   SUBA #'0            MASK OFF ASCII 
D73F 9701             (     ROMbasic.ASM):01314                   STA  CHARAC         SAVE DIGIT IN VO1 
D741 DC2B             (     ROMbasic.ASM):01315                   LDD  BINVAL         GET ACCUMULATED LINE NUMBER VALUE 
D743 8118             (     ROMbasic.ASM):01316                   CMPA #24            LARGEST LINE NUMBER IS $F9FF (63999) - 
                      (     ROMbasic.ASM):01317         ;         (24*256+255)*10+9                 
D745 22DB             (     ROMbasic.ASM):01318                   BHI  LAF52          ‘SYNTAX’ ERROR IF TOO BIG 
                      (     ROMbasic.ASM):01319         ; MULT ACCD X 10                      
D747 58               (     ROMbasic.ASM):01320                   ASLB                * 
D748 49               (     ROMbasic.ASM):01321                   ROLA                * TIMES 2 
D749 58               (     ROMbasic.ASM):01322                   ASLB                = 
D74A 49               (     ROMbasic.ASM):01323                   ROLA                = TIMES 4 
D74B D32B             (     ROMbasic.ASM):01324                   ADDD BINVAL         ADD 1 = TIMES 5 
D74D 58               (     ROMbasic.ASM):01325                   ASLB                * 
D74E 49               (     ROMbasic.ASM):01326                   ROLA                * TIMES 10 
D74F DB01             (     ROMbasic.ASM):01327                   ADDB CHARAC         ADD NEXT DIGIT 
D751 8900             (     ROMbasic.ASM):01328                   ADCA #0             PROPAGATE CARRY 
D753 DD2B             (     ROMbasic.ASM):01329                   STD  BINVAL         SAVE NEW ACCUMULATED LINE NUMBER 
D755 9D7C             (     ROMbasic.ASM):01330                   JSR  GETNCH         GET NEXT CHARACTER FROM BASIC 
D757 20E2             (     ROMbasic.ASM):01331                   BRA  LAF6B          LOOP- PROCESS NEXT DIGIT 
                      (     ROMbasic.ASM):01332         ;                              
                      (     ROMbasic.ASM):01333         ; LET (EXBAS)                      
                      (     ROMbasic.ASM):01334         ; EVALUATE A NON-TOKEN EXPRESSION                      
                      (     ROMbasic.ASM):01335         ; TARGET = REPLACEMENT                      
D759 BDDAFE           (     ROMbasic.ASM):01336         LET       JSR  LB357          FIND TARGET VARIABLE DESCRIPTOR 
D75C 9F3B             (     ROMbasic.ASM):01337                   STX  VARDES         SAVE DESCRIPTOR ADDRESS OF 1ST EXPRESSION 
D75E C6AE             (     ROMbasic.ASM):01338                   LDB  #TOK_EQUALS    TOKEN FOR "=" 
D760 BDDA1B           (     ROMbasic.ASM):01339                   JSR  LB26F          DO A SYNTAX CHECK FOR ‘=‘ 
D763 9606             (     ROMbasic.ASM):01340                   LDA  VALTYP         * GET VARIABLE TYPE AND 
D765 3402             (     ROMbasic.ASM):01341                   PSHS A              * SAVE ON THE STACK 
D767 BDD902           (     ROMbasic.ASM):01342                   JSR  LB156          EVALUATE EXPRESSION 
D76A 3502             (     ROMbasic.ASM):01343                   PULS A              * REGET VARIABLE TYPE OF 1ST EXPRESSION AND 
D76C 46               (     ROMbasic.ASM):01344                   RORA                * SET CARRY IF STRING 
D76D BDD8F4           (     ROMbasic.ASM):01345                   JSR  LB148          TYPE CHECK-TM ERROR IF VARIABLE TYPES ON 
                      (     ROMbasic.ASM):01346         ;                             BOTH SIDES OF EQUALS SIGN NOT THE SAME 
D770 10270F26         (     ROMbasic.ASM):01347                   LBEQ LBC33          GO PUT FPA0 INTO VARIABLE DESCRIPTOR IF NUMERIC 
                      (     ROMbasic.ASM):01348         ; MOVE A STRING WHOSE DESCRIPTOR IS LOCATED AT                      
                      (     ROMbasic.ASM):01349         ; FPA0+2 INTO THE STRING SPACE. TRANSFER THE                      
                      (     ROMbasic.ASM):01350         ; DESCRIPTOR ADDRESS TO THE ADDRESS IN VARDES                      
                      (     ROMbasic.ASM):01351         ; DON’T MOVE THE STRING IF IT IS ALREADY IN THE                      
                      (     ROMbasic.ASM):01352         ; STRING SPACE. REMOVE DESCRIPTOR FROM STRING                      
                      (     ROMbasic.ASM):01353         ; STACK IF IT IS LAST ONE ON THE STACK                      
D774 9E52             (     ROMbasic.ASM):01354         LAFA4     LDX  FPA0+2         POINT X TO DESCRIPTOR OF REPLACEMENT STRING 
D776 DC21             (     ROMbasic.ASM):01355                   LDD  FRETOP         LOAD ACCD WITH START OF STRING SPACE 
D778 10A302           (     ROMbasic.ASM):01356                   CMPD 2,X            IS THE STRING IN STRING SPACE? 
D77B 2411             (     ROMbasic.ASM):01357                   BCC  LAFBE          BRANCH IF IT’S NOT IN THE STRING SPACE 
D77D 9C1B             (     ROMbasic.ASM):01358                   CMPX VARTAB         COMPARE DESCRIPTOR ADDRESS TO START OF VARIABLES 
D77F 250D             (     ROMbasic.ASM):01359                   BCS  LAFBE          BRANCH IF DESCRIPTOR ADDRESS NOT IN VARIABLES 
D781 E684             (     ROMbasic.ASM):01360         LAFB1     LDB  ,X             GET LENGTH OF REPLACEMENT STRING 
D783 BDDCB4           (     ROMbasic.ASM):01361                   JSR  LB50D          RESERVE ACCB BYTES OF STRING SPACE 
D786 9E4D             (     ROMbasic.ASM):01362                   LDX  V4D            GET DESCRIPTOR ADDRESS BACK 
D788 BDDDEA           (     ROMbasic.ASM):01363                   JSR  LB643          MOVE STRING INTO STRING SPACE 
D78B 8E0056           (     ROMbasic.ASM):01364                   LDX  #STRDES        POINT X TO TEMP STRING DESCRIPTOR ADDRESS 
D78E 9F4D             (     ROMbasic.ASM):01365         LAFBE     STX  V4D            SAVE STRING DESCRIPTOR ADDRESS IN V4D 
D790 BDDE1C           (     ROMbasic.ASM):01366                   JSR  LB675          REMOVE STRING DESCRIPTOR IF LAST ONE 
                      (     ROMbasic.ASM):01367         ;                             ON STRING STACK  
D793 DE4D             (     ROMbasic.ASM):01368                   LDU  V4D            POINT U TO REPLACEMENT DESCRIPTOR ADDRESS 
D795 9E3B             (     ROMbasic.ASM):01369                   LDX  VARDES         GET TARGET DESCRIPTOR ADDRESS 
D797 3726             (     ROMbasic.ASM):01370                   PULU A,B,Y          GET LENGTH AND START OF REPLACEMENT STRING 
D799 A784             (     ROMbasic.ASM):01371                   STA  ,X             * SAVE STRING LENGTH AND START IN 
D79B 10AF02           (     ROMbasic.ASM):01372                   STY  2,X            * TARGET DESCRIPTOR LOCATION 
D79E 39               (     ROMbasic.ASM):01373         LAFCE     RTS                  
                      (     ROMbasic.ASM):01374                                        
D79F 3F5245444F       (     ROMbasic.ASM):01375         LAFCF     FCC  "?REDO"        ?REDO MESSAGE 
D7A4 0D00             (     ROMbasic.ASM):01376                   FCB  CR,$00          
                      (     ROMbasic.ASM):01377                                        
D7A6                  (     ROMbasic.ASM):01378         LAFD6                          
D7A6 7ED426           (     ROMbasic.ASM):01379         LAFDC     JMP  LAC46          JMP TO ERROR HANDLER 
D7A9 9609             (     ROMbasic.ASM):01380         LAFDF     LDA  INPFLG         = GET THE INPUT FLAG AND BRANCH 
D7AB 2707             (     ROMbasic.ASM):01381                   BEQ  LAFEA          = IF ‘INPUT’ 
D7AD 9E31             (     ROMbasic.ASM):01382                   LDX  DATTXT         * GET LINE NUMBER WHERE THE ERROR OCCURRED 
D7AF 9F68             (     ROMbasic.ASM):01383                   STX  CURLIN         * AND USE IT AS THE CURRENT LINE NUMBER 
D7B1 7EDA23           (     ROMbasic.ASM):01384                   JMP  LB277          ‘SYNTAX ERROR’ 
D7B4 8ED79E           (     ROMbasic.ASM):01385         LAFEA     LDX  #LAFCF-1       * POINT X TO ‘?REDO’ AND PRINT 
D7B7 BDE403           (     ROMbasic.ASM):01386                   JSR  LB99C          * IT ON THE SCREEN 
D7BA 9E2F             (     ROMbasic.ASM):01387                   LDX  TINPTR         = GET THE SAVED ABSOLUTE ADDRESS OF 
D7BC 9F83             (     ROMbasic.ASM):01388                   STX  CHARAD         = INPUT POINTER AND RESTORE IT 
D7BE 39               (     ROMbasic.ASM):01389                   RTS                  
                      (     ROMbasic.ASM):01390         ;                              
                      (     ROMbasic.ASM):01391         ; INPUT                        
D7BF C616             (     ROMbasic.ASM):01392         INPUT     LDB  #11*2          ‘ID’ ERROR 
D7C1 9E68             (     ROMbasic.ASM):01393                   LDX  CURLIN         GET CURRENT LINE NUMBER 
D7C3 3001             (     ROMbasic.ASM):01394                   LEAX 1,X            ADD ONE 
D7C5 27DF             (     ROMbasic.ASM):01395                   BEQ  LAFDC          ‘ID’ ERROR BRANCH IF DIRECT MODE 
D7C7 8D01             (     ROMbasic.ASM):01396                   BSR  LB00F          GET SOME INPUT DATA - WAS LB002 
D7C9 39               (     ROMbasic.ASM):01397                   RTS                  
D7CA 8122             (     ROMbasic.ASM):01398         LB00F     CMPA #'"            CHECK FOR PROMPT STRING DELIMITER 
D7CC 260B             (     ROMbasic.ASM):01399                   BNE  LB01E          BRANCH IF NO PROMPT STRING 
D7CE BDD9F0           (     ROMbasic.ASM):01400                   JSR  LB244          PUT PROMPT STRING ON STRING STACK 
D7D1 C63B             (     ROMbasic.ASM):01401                   LDB  #';            * 
D7D3 BDDA1B           (     ROMbasic.ASM):01402                   JSR  LB26F          * DO A SYNTAX CHECK FOR SEMICOLON 
D7D6 BDE406           (     ROMbasic.ASM):01403                   JSR  LB99F          PRINT MESSAGE TO CONSOLE OUT 
D7D9 8E00F3           (     ROMbasic.ASM):01404         LB01E     LDX  #LINBUF        POINT TO BASIC’S LINE BUFFER 
D7DC 6F84             (     ROMbasic.ASM):01405                   CLR  ,X             CLEAR 1ST BYTE - FLAG TO INDICATE NO DATA 
                      (     ROMbasic.ASM):01406         ;              IN LINE BUFFER  
D7DE 8D06             (     ROMbasic.ASM):01407                   BSR  LB02F          INPUT A STRING TO LINE BUFFER 
D7E0 C62C             (     ROMbasic.ASM):01408                   LDB  #',            * INSERT A COMMA AT THE END 
D7E2 E784             (     ROMbasic.ASM):01409                   STB  ,X             * OF THE LINE INPUT BUFFER 
D7E4 2016             (     ROMbasic.ASM):01410                   BRA  LB049           
                      (     ROMbasic.ASM):01411         ; FILL BASIC’S LINE INPUT BUFFER CONSOLE IN                      
D7E6 BDE416           (     ROMbasic.ASM):01412         LB02F     JSR  LB9AF          SEND A "?" TO CONSOLE OUT 
D7E9 BDE413           (     ROMbasic.ASM):01413                   JSR  LB9AC          SEND A ‘SPACE’ TO CONSOLE OUT 
D7EC BDD161           (     ROMbasic.ASM):01414         LB035     JSR  LA390          GO READ IN A BASIC LINE 
D7EF 2405             (     ROMbasic.ASM):01415                   BCC  LB03F          BRANCH IF ENTER KEY ENDED ENTRY 
D7F1 3264             (     ROMbasic.ASM):01416                   LEAS 4,S            PURGE TWO RETURN ADDRESSES OFF THE STACK 
D7F3 7ED5E9           (     ROMbasic.ASM):01417                   JMP  LAE11          GO DO A ‘STOP’ IF BREAK KEY ENDED LINE ENTRY 
D7F6 C62E             (     ROMbasic.ASM):01418         LB03F     LDB  #2*23          ‘INPUT PAST END OF FILE’ ERROR 
D7F8 39               (     ROMbasic.ASM):01419                   RTS                  
                      (     ROMbasic.ASM):01420         ;                              
                      (     ROMbasic.ASM):01421         ; READ                         
D7F9 9E33             (     ROMbasic.ASM):01422         READ      LDX  DATPTR         GET ‘READ’ START ADDRESS 
D7FB 86               (     ROMbasic.ASM):01423                   FCB  SKP1LD         SKIP ONE BYTE - LDA #*$4F 
D7FC 4F               (     ROMbasic.ASM):01424         LB049     CLRA                ‘INPUT’ ENTRY POINT: INPUT FLAG = 0 
D7FD 9709             (     ROMbasic.ASM):01425                   STA  INPFLG         SET INPUT FLAG; 0 = INPUT: <> 0 = READ 
D7FF 9F35             (     ROMbasic.ASM):01426                   STX  DATTMP         SAVE ‘READ’ START ADDRESS/’INPUT’ BUFFER START 
D801 BDDAFE           (     ROMbasic.ASM):01427         LB04E     JSR  LB357          EVALUATE A VARIABLE 
D804 9F3B             (     ROMbasic.ASM):01428                   STX  VARDES         SAVE DESCRIPTOR ADDRESS 
D806 9E83             (     ROMbasic.ASM):01429                   LDX  CHARAD         * GET BASIC’S INPUT POINTER 
D808 9F2B             (     ROMbasic.ASM):01430                   STX  BINVAL         * AND SAVE IT 
D80A 9E35             (     ROMbasic.ASM):01431                   LDX  DATTMP         GET ‘READ’ ADDRESS START/’INPUT’ BUFFER POINTER 
D80C A684             (     ROMbasic.ASM):01432                   LDA  ,X             GET A CHARACTER FROM THE BASIC PROGRAM 
D80E 2609             (     ROMbasic.ASM):01433                   BNE  LB069          BRANCH IF NOT END OF LINE 
D810 9609             (     ROMbasic.ASM):01434                   LDA  INPFLG         * CHECK INPUT FLAG AND BRANCH 
D812 2651             (     ROMbasic.ASM):01435                   BNE  LB0B9          * IF LOOKING FOR DATA (READ) 
                      (     ROMbasic.ASM):01436         ; NO DATA IN ‘INPUT’ LINE BUFFER AND/OR INPUT                      
                      (     ROMbasic.ASM):01437         ; NOT COMING FROM SCREEN                      
D814 BDE416           (     ROMbasic.ASM):01438                   JSR  LB9AF          SEND A '?' TO CONSOLE OUT 
D817 8DCD             (     ROMbasic.ASM):01439                   BSR  LB02F          FILL INPUT BUFFER FROM CONSOLE IN 
D819 9F83             (     ROMbasic.ASM):01440         LB069     STX  CHARAD         RESET BASIC’S INPUT POINTER 
D81B 9D7C             (     ROMbasic.ASM):01441                   JSR  GETNCH         GET A CHARACTER FROM BASIC 
D81D D606             (     ROMbasic.ASM):01442                   LDB  VALTYP         * CHECK VARIABLE TYPE AND 
D81F 2723             (     ROMbasic.ASM):01443                   BEQ  LB098          * BRANCH IF NUMERIC 
                      (     ROMbasic.ASM):01444         ; READ/INPUT A STRING VARIABLE                      
D821 9E83             (     ROMbasic.ASM):01445                   LDX  CHARAD         LOAD X WITH CURRENT BASIC INPUT POINTER 
D823 9701             (     ROMbasic.ASM):01446                   STA  CHARAC         SAVE CURRENT INPUT CHARACTER 
D825 8122             (     ROMbasic.ASM):01447                   CMPA #'"            CHECK FOR STRING DELIMITER 
D827 270E             (     ROMbasic.ASM):01448                   BEQ  LB08B          BRANCH IF STRING DELIMITER 
D829 301F             (     ROMbasic.ASM):01449                   LEAX -1,X           BACK UP POINTER 
D82B 4F               (     ROMbasic.ASM):01450                   CLRA                * ZERO = END OF LINE CHARACTER 
D82C 9701             (     ROMbasic.ASM):01451                   STA  CHARAC         * SAVE AS TERMINATOR 
D82E BDD153           (     ROMbasic.ASM):01452                   JSR  LA35F          SET UP PRINT PARAMETERS 
D831 863A             (     ROMbasic.ASM):01453                   LDA  #':            END OF SUBLINE CHARACTER 
D833 9701             (     ROMbasic.ASM):01454                   STA  CHARAC         SAVE AS TERMINATOR I 
D835 862C             (     ROMbasic.ASM):01455                   LDA  #',            COMMA 
D837 9702             (     ROMbasic.ASM):01456         LB08B     STA  ENDCHR         SAVE AS TERMINATOR 2 
D839 BDDCC5           (     ROMbasic.ASM):01457                   JSR  LB51E          STRIP A STRING FROM THE INPUT BUFFER 
D83C BDD9F5           (     ROMbasic.ASM):01458                   JSR  LB249          MOVE INPUT POINTER TO END OF STRING 
D83F BDD774           (     ROMbasic.ASM):01459                   JSR  LAFA4          PUT A STRING INTO THE STRING SPACE IF NECESSARY 
D842 2006             (     ROMbasic.ASM):01460                   BRA  LB09E          CHECK FOR ANOTHER DATA ITEM 
                      (     ROMbasic.ASM):01461         ; SAVE A NUMERIC VALUE IN A READ OR INPUT DATA ITEM                      
D844 BDE779           (     ROMbasic.ASM):01462         LB098     JSR  LBD12          CONVERT AN ASCII STRING TO FP NUMBER 
D847 BDE69A           (     ROMbasic.ASM):01463                   JSR  LBC33          PACK FPA0 AND STORE IT IN ADDRESS IN VARDES - 
                      (     ROMbasic.ASM):01464         ;                             INPUT OR READ DATA ITEM 
D84A 9D82             (     ROMbasic.ASM):01465         LB09E     JSR  GETCCH         GET CURRENT INPUT CHARACTER 
D84C 2706             (     ROMbasic.ASM):01466                   BEQ  LB0A8          BRANCH IF END OF LINE 
D84E 812C             (     ROMbasic.ASM):01467                   CMPA #',            CHECK FOR A COMMA 
D850 1026FF52         (     ROMbasic.ASM):01468                   LBNE LAFD6          BAD FILE DATA' ERROR OR RETRY 
D854 9E83             (     ROMbasic.ASM):01469         LB0A8     LDX  CHARAD         * GET CURRENT INPUT 
D856 9F35             (     ROMbasic.ASM):01470                   STX  DATTMP         * POINTER (USED AS A DATA POINTER) AND SAVE IT 
D858 9E2B             (     ROMbasic.ASM):01471                   LDX  BINVAL         * RESET INPUT POINTER TO INPUT OR 
D85A 9F83             (     ROMbasic.ASM):01472                   STX  CHARAD         * READ STATEMENT 
D85C 9D82             (     ROMbasic.ASM):01473                   JSR  GETCCH         GET CURRENT CHARACTER FROM BASIC 
D85E 2721             (     ROMbasic.ASM):01474                   BEQ  LB0D5          BRANCH IF END OF LINE - EXIT COMMAND 
D860 BDDA19           (     ROMbasic.ASM):01475                   JSR  LB26D          SYNTAX CHECK FOR COMMA 
D863 209C             (     ROMbasic.ASM):01476                   BRA  LB04E          GET ANOTHER INPUT OR READ ITEM 
                      (     ROMbasic.ASM):01477         ; SEARCH FROM ADDRESS IN X FOR                      
                      (     ROMbasic.ASM):01478         ; 1ST OCCURENCE OF THE TOKEN FOR DATA                      
D865 9F83             (     ROMbasic.ASM):01479         LB0B9     STX  CHARAD         RESET BASIC’S INPUT POINTER 
D867 BDD6B8           (     ROMbasic.ASM):01480                   JSR  LAEE8          SEARCH FOR END OF CURRENT LINE OR SUBLINE 
D86A 3001             (     ROMbasic.ASM):01481                   LEAX 1,X            MOVE X ONE PAST END OF LINE 
D86C 4D               (     ROMbasic.ASM):01482                   TSTA                CHECK FOR END OF LINE 
D86D 260A             (     ROMbasic.ASM):01483                   BNE  LB0CD          BRANCH IF END OF SUBLINE 
D86F C606             (     ROMbasic.ASM):01484                   LDB  #2*3           ‘OUT OF DATA’ ERROR 
D871 EE81             (     ROMbasic.ASM):01485                   LDU  ,X++           GET NEXT 2 CHARACTERS 
D873 2741             (     ROMbasic.ASM):01486                   BEQ  LB10A          ‘OD’ ERROR IF END OF PROGRAM 
D875 EC81             (     ROMbasic.ASM):01487                   LDD  ,X++           GET BASIC LINE NUMBER AND 
D877 DD31             (     ROMbasic.ASM):01488                   STD  DATTXT         SAVE IT IN DATTXT 
D879 A684             (     ROMbasic.ASM):01489         LB0CD     LDA  ,X             GET AN INPUT CHARACTER 
D87B 8186             (     ROMbasic.ASM):01490                   CMPA #TOK_DATA      DATA TOKEN? 
D87D 26E6             (     ROMbasic.ASM):01491                   BNE  LB0B9          NO — KEEP LOOKING 
D87F 2098             (     ROMbasic.ASM):01492                   BRA  LB069          YES 
                      (     ROMbasic.ASM):01493         ; EXIT READ AND INPUT COMMANDS                      
D881 9E35             (     ROMbasic.ASM):01494         LB0D5     LDX  DATTMP         GET DATA POINTER 
D883 D609             (     ROMbasic.ASM):01495                   LDB  INPFLG         * CHECK INPUT FLAG 
D885 1026FD3A         (     ROMbasic.ASM):01496                   LBNE LADE8          * SAVE NEW DATA POINTER IF READ 
D889 A684             (     ROMbasic.ASM):01497                   LDA  ,X             = CHECK NEXT CHARACTER IN ‘INPUT’ BUFFER 
D88B 2706             (     ROMbasic.ASM):01498                   BEQ  LB0E7          = 
D88D 8ED893           (     ROMbasic.ASM):01499                   LDX  #LB0E8-1       POINT X TO ‘?EXTRA IGNORED’ 
D890 7EE403           (     ROMbasic.ASM):01500                   JMP  LB99C          PRINT THE MESSAGE 
D893 39               (     ROMbasic.ASM):01501         LB0E7     RTS                  
                      (     ROMbasic.ASM):01502                                        
D894 3F45585452412049 (     ROMbasic.ASM):01503         LB0E8     FCC  "?EXTRA IGNORED" ?EXTRA IGNORED MESSAGE 
     474E4F524544
                      (     ROMbasic.ASM):01504                                        
                      (     ROMbasic.ASM):01505                                        
D8A2 0D00             (     ROMbasic.ASM):01506                   FCB  CR,$00          
                      (     ROMbasic.ASM):01507                                        
                      (     ROMbasic.ASM):01508         ; NEXT                         
D8A4 2604             (     ROMbasic.ASM):01509         NEXT      BNE  LB0FE          BRANCH IF ARGUMENT GIVEN 
D8A6 9E74             (     ROMbasic.ASM):01510                   LDX  ZERO           X = 0: DEFAULT FOR NO ARGUMENT 
D8A8 2003             (     ROMbasic.ASM):01511                   BRA  LB101           
D8AA BDDAFE           (     ROMbasic.ASM):01512         LB0FE     JSR  LB357          EVALUATE AN ALPHA EXPRESSION 
D8AD 9F3B             (     ROMbasic.ASM):01513         LB101     STX  VARDES         SAVE VARIABLE DESCRIPTOR POINTER 
D8AF BDD3D9           (     ROMbasic.ASM):01514                   JSR  LABF9          GO SCAN FOR ‘FOR/NEXT’ DATA ON STACK 
D8B2 2704             (     ROMbasic.ASM):01515                   BEQ  LB10C          BRANCH IF DATA FOUND 
D8B4 C600             (     ROMbasic.ASM):01516                   LDB  #0             ‘NEXT WITHOUT FOR’ ERROR (SHOULD BE CLRB) 
D8B6 2047             (     ROMbasic.ASM):01517         LB10A     BRA  LB153          PROCESS ERROR 
D8B8 1F14             (     ROMbasic.ASM):01518         LB10C     TFR  X,S            POINT S TO START OF ‘FOR/NEXT’ DATA 
D8BA 3003             (     ROMbasic.ASM):01519                   LEAX 3,X            POINT X TO FP VALUE OF STEP 
D8BC BDE67B           (     ROMbasic.ASM):01520                   JSR  LBC14          COPY A FP NUMBER FROM (X) TO FPA0 
D8BF A668             (     ROMbasic.ASM):01521                   LDA  8,S            GET THE DIRECTION OF STEP 
D8C1 9754             (     ROMbasic.ASM):01522                   STA  FP0SGN         SAVE IT AS THE SIGN OF FPA0 
D8C3 9E3B             (     ROMbasic.ASM):01523                   LDX  VARDES         POINT (X) TO INDEX VARIABLE DESCRIPTOR 
D8C5 BDE429           (     ROMbasic.ASM):01524                   JSR  LB9C2          ADD (X) TO FPA0 (STEP TO INDEX) 
D8C8 BDE69A           (     ROMbasic.ASM):01525                   JSR  LBC33          PACK FPA0 AND STORE IT IN ADDRESS 
                      (     ROMbasic.ASM):01526         ;                             CONTAINED IN VARDES 
D8CB 3069             (     ROMbasic.ASM):01527                   LEAX 9,S            POINT (X) TO TERMINAL VALUE OF INDEX 
D8CD BDE6FD           (     ROMbasic.ASM):01528                   JSR  LBC96          COMPARE CURRENT INDEX VALUE TO TERMINAL VALUE OF INDEX 
D8D0 E068             (     ROMbasic.ASM):01529                   SUBB 8,S            ACCB = 0 IF TERMINAL VALUE=CURRENT VALUE AND STEP=0 OR IF 
                      (     ROMbasic.ASM):01530         ;                             STEP IS POSITIVE AND CURRENT VALUE>TERMINAL VALUE OR 
                      (     ROMbasic.ASM):01531         ;                             STEP IS NEGATIVE AND CURRENT VALUE<TERMINAL VALUE 
D8D2 270C             (     ROMbasic.ASM):01532                   BEQ  LB134          BRANCH IF ‘FOR/NEXT’ LOOP DONE 
D8D4 AE6E             (     ROMbasic.ASM):01533                   LDX  14,S           * GET LINE NUMBER AND 
D8D6 9F68             (     ROMbasic.ASM):01534                   STX  CURLIN         * BASIC POINTER OF 
D8D8 AEE810           (     ROMbasic.ASM):01535                   LDX  16,S           * STATEMENT FOLLOWING THE 
D8DB 9F83             (     ROMbasic.ASM):01536                   STX  CHARAD         * PROPER FOR STATEMENT 
D8DD 7ED562           (     ROMbasic.ASM):01537         LB131     JMP  LAD9E          JUMP BACK TO COMMAND INTEPR. LOOP 
D8E0 32E812           (     ROMbasic.ASM):01538         LB134     LEAS 18,S           PULL THE ‘FOR-NEXT’ DATA OFF THE STACK 
D8E3 9D82             (     ROMbasic.ASM):01539                   JSR  GETCCH         GET CURRENT INPUT CHARACTER 
D8E5 812C             (     ROMbasic.ASM):01540                   CMPA #',            CHECK FOR ANOTHER ARGUMENT 
D8E7 26F4             (     ROMbasic.ASM):01541                   BNE  LB131          RETURN IF NONE 
D8E9 9D7C             (     ROMbasic.ASM):01542                   JSR  GETNCH         GET NEXT CHARACTER FROM BASIC 
D8EB 8DBD             (     ROMbasic.ASM):01543                   BSR  LB0FE          BSR SIMULATES A CALL TO ‘NEXT’ FROM COMMAND LOOP 
                      (     ROMbasic.ASM):01544                                        
                      (     ROMbasic.ASM):01545                                        
D8ED 8D13             (     ROMbasic.ASM):01546         LB141     BSR  LB156          EVALUATE EXPRESSION AND DO A TYPE CHECK FOR NUMERIC 
D8EF 1CFE             (     ROMbasic.ASM):01547         LB143     ANDCC #$FE           CLEAR CARRY FLAG 
D8F1 7D               (     ROMbasic.ASM):01548         LB145     FCB  $7D            OP CODE OF TST $1A01 - SKIP TWO BYTES (DO 
                      (     ROMbasic.ASM):01549         ;              NOT CHANGE CARRY FLAG)  
D8F2 1A01             (     ROMbasic.ASM):01550         LB146     ORCC #1             SET CARRY 
                      (     ROMbasic.ASM):01551                                        
                      (     ROMbasic.ASM):01552         ; STRING TYPE MODE CHECK - IF ENTERED AT LB146 THEN VALTYP PLUS IS 'TM' ERROR                      
                      (     ROMbasic.ASM):01553         ; NUMERIC TYPE MODE CHECK - IF ENTERED AT LB143 THEN VALTYP MINUS IS 'TM' ERROR                      
                      (     ROMbasic.ASM):01554         ; IF ENTERED AT LB148, A TYPE CHECK IS DONE ON VALTYP                      
                      (     ROMbasic.ASM):01555         ; IF ENTERED WITH CARRY SET, THEN 'TM' ERROR IF NUMERIC                      
                      (     ROMbasic.ASM):01556         ; IF ENTERED WITH CARRY CLEAR, THEN 'TM' ERROR IF STRING.                      
D8F4 0D06             (     ROMbasic.ASM):01557         LB148     TST  VALTYP         TEST TYPE FLAG; DO NOT CHANGE CARRY 
D8F6 2503             (     ROMbasic.ASM):01558                   BCS  LB14F          BRANCH IF STRING 
D8F8 2A99             (     ROMbasic.ASM):01559                   BPL  LB0E7          RETURN ON PLUS 
D8FA 8C               (     ROMbasic.ASM):01560                   FCB  SKP2           SKIP 2 BYTES - ‘TM’ ERROR 
D8FB 2B96             (     ROMbasic.ASM):01561         LB14F     BMI  LB0E7          RETURN ON MINUS 
D8FD C618             (     ROMbasic.ASM):01562                   LDB  #12*2          ‘TYPE M1SMATCH’ ERROR 
D8FF 7ED426           (     ROMbasic.ASM):01563         LB153     JMP  LAC46          PROCESS ERROR 
                      (     ROMbasic.ASM):01564         ; EVALUATE EXPRESSION                      
D902 8D6E             (     ROMbasic.ASM):01565         LB156     BSR  LB1C6          BACK UP INPUT POINTER 
D904 4F               (     ROMbasic.ASM):01566         LB158     CLRA                END OF OPERATION PRECEDENCE FLAG 
D905 8C               (     ROMbasic.ASM):01567                   FCB  SKP2           SKIP TWO BYTES 
D906 3404             (     ROMbasic.ASM):01568         LB15A     PSHS B              SAVE FLAG (RELATIONAL OPERATOR FLAG) 
D908 3402             (     ROMbasic.ASM):01569                   PSHS A              SAVE FLAG (PRECEDENCE FLAG) 
D90A C601             (     ROMbasic.ASM):01570                   LDB  #1             * 
D90C BDD413           (     ROMbasic.ASM):01571                   JSR  LAC33          * SEE IF ROOM IN FREE RAM FOR (B) WORDS 
D90F BDD9CF           (     ROMbasic.ASM):01572                   JSR  LB223          GO EVALUATE AN EXPRESSION 
D912 0F3F             (     ROMbasic.ASM):01573                   CLR  TRELFL         RESET RELATIONAL OPERATOR FLAG 
D914 9D82             (     ROMbasic.ASM):01574         LB168     JSR  GETCCH         GET CURRENT INPUT CHARACTER 
                      (     ROMbasic.ASM):01575         ; CHECK FOR RELATIONAL OPERATORS                      
D916 80AD             (     ROMbasic.ASM):01576         LB16A     SUBA #TOK_GREATER   TOKEN FOR > 
D918 2513             (     ROMbasic.ASM):01577                   BCS  LB181          BRANCH IF LESS THAN RELATIONAL OPERATORS 
D91A 8103             (     ROMbasic.ASM):01578                   CMPA #3             * 
D91C 240F             (     ROMbasic.ASM):01579                   BCC  LB181          * BRANCH IF GREATER THAN RELATIONAL OPERATORS 
D91E 8101             (     ROMbasic.ASM):01580                   CMPA #1             SET CARRY IF ‘>‘ 
D920 49               (     ROMbasic.ASM):01581                   ROLA                CARRY TO BIT 0 
D921 983F             (     ROMbasic.ASM):01582                   EORA TRELFL         * CARRY SET IF 
D923 913F             (     ROMbasic.ASM):01583                   CMPA TRELFL         * TRELFL = ACCA 
D925 2564             (     ROMbasic.ASM):01584                   BCS  LB1DF          BRANCH IF SYNTAX ERROR : == << OR >> 
D927 973F             (     ROMbasic.ASM):01585                   STA  TRELFL         BIT 0: >, BIT 1 =, BIT 2: < 
D929 9D7C             (     ROMbasic.ASM):01586                   JSR  GETNCH         GET AN INPUT CHARACTER 
D92B 20E9             (     ROMbasic.ASM):01587                   BRA  LB16A          CHECK FOR ANOTHER RELATIONAL OPERATOR 
                      (     ROMbasic.ASM):01588         ;                              
D92D D63F             (     ROMbasic.ASM):01589         LB181     LDB  TRELFL         GET RELATIONAL OPERATOR FLAG 
D92F 2633             (     ROMbasic.ASM):01590                   BNE  LB1B8          BRANCH IF RELATIONAL COMPARISON 
D931 1024006B         (     ROMbasic.ASM):01591                   LBCC LB1F4          BRANCH IF > RELATIONAL OPERATOR 
D935 8B07             (     ROMbasic.ASM):01592                   ADDA #7             SEVEN ARITHMETIC/LOGICAL OPERATORS 
D937 2467             (     ROMbasic.ASM):01593                   BCC  LB1F4          BRANCH IF NOT ARITHMETIC/LOGICAL OPERATOR 
D939 9906             (     ROMbasic.ASM):01594                   ADCA VALTYP         ADD CARRY, NUMERIC FLAG AND MODIFIED TOKEN NUMBER 
D93B 10270477         (     ROMbasic.ASM):01595                   LBEQ LB60F          BRANCH IF VALTYP = FF, AND ACCA = ‘+‘ TOKEN - 
                      (     ROMbasic.ASM):01596         ;                             CONCATENATE TWO STRINGS 
D93F 89FF             (     ROMbasic.ASM):01597                   ADCA #-1            RESTORE ARITHMETIC/LOGICAL OPERATOR NUMBER 
D941 3402             (     ROMbasic.ASM):01598                   PSHS A              * STORE OPERATOR NUMBER ON STACK; MULTIPLY IT BY 2 
D943 48               (     ROMbasic.ASM):01599                   ASLA                * THEN ADD THE STORED STACK DATA = MULTIPLY 
D944 ABE0             (     ROMbasic.ASM):01600                   ADDA ,S+            * X 3; 3 BYTE/TABLE ENTRY 
D946 8ED22B           (     ROMbasic.ASM):01601                   LDX  #LAA51         JUMP TABLE FOR ARITHMETIC & LOGICAL OPERATORS 
D949 3086             (     ROMbasic.ASM):01602                   LEAX A,X            POINT X TO PROPER TABLE 
D94B 3502             (     ROMbasic.ASM):01603         LB19F     PULS A              GET PRECEDENCE FLAG FROM STACK 
D94D A184             (     ROMbasic.ASM):01604                   CMPA ,X             COMPARE TO CURRENT OPERATOR 
D94F 2455             (     ROMbasic.ASM):01605                   BCC  LB1FA          BRANCH IF STACK OPERATOR > CURRENT OPERATOR 
D951 8D9C             (     ROMbasic.ASM):01606                   BSR  LB143          ‘TM’ ERROR IF VARIABLE TYPE = STRING 
                      (     ROMbasic.ASM):01607                                        
                      (     ROMbasic.ASM):01608         ; OPERATION BEING PROCESSED IS OF HIGHER PRECEDENCE THAN THE PREVIOUS OPERATION.                      
D953 3402             (     ROMbasic.ASM):01609         LB1A7     PSHS A              SAVE PRECEDENCE FLAG 
D955 8D29             (     ROMbasic.ASM):01610                   BSR  LB1D4          PUSH OPERATOR ROUTINE ADDRESS AND FPA0 ONTO STACK 
D957 9E3D             (     ROMbasic.ASM):01611                   LDX  RELPTR         GET POINTER TO ARITHMETIC/LOGICAL TABLE ENTRY FOR 
                      (     ROMbasic.ASM):01612         ;                             LAST CALCULATED OPERATION 
D959 3502             (     ROMbasic.ASM):01613                   PULS A              GET PRECEDENCE FLAG OF PREVIOUS OPERATION 
D95B 261D             (     ROMbasic.ASM):01614                   BNE  LB1CE          BRANCH IF NOT END OF OPERATION 
D95D 4D               (     ROMbasic.ASM):01615                   TSTA                CHECK TYPE OF PRECEDENCE FLAG 
D95E 1027006A         (     ROMbasic.ASM):01616                   LBEQ LB220          BRANCH IF END OF EXPRESSION OR SUB-EXPRESSION 
D962 204B             (     ROMbasic.ASM):01617                   BRA  LB203          EVALUATE AN OPERATION 
                      (     ROMbasic.ASM):01618                                        
D964 0806             (     ROMbasic.ASM):01619         LB1B8     ASL  VALTYP         BIT 7 OF TYPE FLAG TO CARRY 
D966 59               (     ROMbasic.ASM):01620                   ROLB                SHIFT RELATIONAL FLAG LEFT - VALTYP TO BIT 0 
D967 8D09             (     ROMbasic.ASM):01621                   BSR  LB1C6          MOVE THE INPUT POINTER BACK ONE 
D969 8ED977           (     ROMbasic.ASM):01622                   LDX  #LB1CB         POINT X TO RELATIONAL COMPARISON JUMP TABLE 
D96C D73F             (     ROMbasic.ASM):01623                   STB  TRELFL         SAVE RELATIONAL COMPARISON DATA 
D96E 0F06             (     ROMbasic.ASM):01624                   CLR  VALTYP         SET VARIABLE TYPE TO NUMERIC 
D970 20D9             (     ROMbasic.ASM):01625                   BRA  LB19F          PERFORM OPERATION OR SAVE ON STACK 
                      (     ROMbasic.ASM):01626                                        
D972 9E83             (     ROMbasic.ASM):01627         LB1C6     LDX  CHARAD         * GET BASIC’S INPUT POINTER AND 
D974 7ED68B           (     ROMbasic.ASM):01628                   JMP  LAEBB          * MOVE IT BACK ONE 
                      (     ROMbasic.ASM):01629         ; RELATIONAL COMPARISON JUMP TABLE                      
D977 64               (     ROMbasic.ASM):01630         LB1CB     FCB  $64            RELATIONAL COMPARISON FLAG 
D978 DA9B             (     ROMbasic.ASM):01631         LB1CC     FDB  LB2F4          JUMP ADDRESS 
                      (     ROMbasic.ASM):01632                                        
D97A A184             (     ROMbasic.ASM):01633         LB1CE     CMPA ,X             COMPARE PRECEDENCE OF LAST DONE OPERATION TO 
                      (     ROMbasic.ASM):01634         ;         NEXT TO BE DONE OPERATION  
D97C 2431             (     ROMbasic.ASM):01635                   BCC  LB203          EVALUATE OPERATION IF LOWER PRECEDENCE 
D97E 20D3             (     ROMbasic.ASM):01636                   BRA  LB1A7          PUSH OPERATION DATA ON STACK IF HIGHER PRECEDENCE 
                      (     ROMbasic.ASM):01637                                        
                      (     ROMbasic.ASM):01638         ; PUSH OPERATOR EVALUATION ADDRESS AND FPA0 ONTO STACK AND EVALUATE ANOTHER EXPR                      
D980 EC01             (     ROMbasic.ASM):01639         LB1D4     LDD  1,X            GET ADDRESS OF OPERATOR ROUTINE 
D982 3406             (     ROMbasic.ASM):01640                   PSHS B,A            SAVE IT ON THE STACK 
D984 8D08             (     ROMbasic.ASM):01641                   BSR  LB1E2          PUSH FPA0 ONTO STACK 
D986 D63F             (     ROMbasic.ASM):01642                   LDB  TRELFL         GET BACK RELATIONAL OPERATOR FLAG 
D988 16FF7B           (     ROMbasic.ASM):01643                   LBRA LB15A          EVALUATE ANOTHER EXPRESSION 
D98B 7EDA23           (     ROMbasic.ASM):01644         LB1DF     JMP  LB277          ‘SYNTAX ERROR’ 
                      (     ROMbasic.ASM):01645         ; PUSH FPA0 ONTO THE STACK. ,S   = EXPONENT      
                      (     ROMbasic.ASM):01646         ; 1-2,S =HIGH ORDER MANTISSA 3-4,S = LOW ORDER MANTISSA  
                      (     ROMbasic.ASM):01647         ; 5,S = SIGN RETURN WITH PRECEDENCE CODE IN ACCA  
D98E D654             (     ROMbasic.ASM):01648         LB1E2     LDB  FP0SGN         GET SIGN OF FPA0 MANTISSA 
D990 A684             (     ROMbasic.ASM):01649                   LDA  ,X             GET PRECEDENCE CODE TO ACCA 
D992 3520             (     ROMbasic.ASM):01650         LB1E6     PULS Y              GET RETURN ADDRESS FROM STACK & PUT IT IN Y 
D994 3404             (     ROMbasic.ASM):01651                   PSHS B              SAVE ACCB ON STACK 
D996 D64F             (     ROMbasic.ASM):01652         LB1EA     LDB  FP0EXP         * PUSH FPA0 ONTO THE STACK 
D998 9E50             (     ROMbasic.ASM):01653                   LDX  FPA0           * 
D99A DE52             (     ROMbasic.ASM):01654                   LDU  FPA0+2         * 
D99C 3454             (     ROMbasic.ASM):01655                   PSHS U,X,B          * 
D99E 6EA4             (     ROMbasic.ASM):01656                   JMP  ,Y             JUMP TO ADDRESS IN Y 
                      (     ROMbasic.ASM):01657                                        
                      (     ROMbasic.ASM):01658         ; BRANCH HERE IF NON-OPERATOR CHARACTER FOUND - USUALLY ‘)‘ OR END OF LINE                      
D9A0 9E74             (     ROMbasic.ASM):01659         LB1F4     LDX  ZERO           POINT X TO DUMMY VALUE (ZERO) 
D9A2 A6E0             (     ROMbasic.ASM):01660                   LDA  ,S+            GET PRECEDENCE FLAG FROM STACK 
D9A4 2726             (     ROMbasic.ASM):01661                   BEQ  LB220          BRANCH IF END OF EXPRESSION 
D9A6 8164             (     ROMbasic.ASM):01662         LB1FA     CMPA #$64           * CHECK FOR RELATIONAL COMPARISON FLAG 
D9A8 2703             (     ROMbasic.ASM):01663                   BEQ  LB201          * AND BRANCH IF RELATIONAL COMPARISON 
D9AA BDD8EF           (     ROMbasic.ASM):01664                   JSR  LB143          ‘TM’ ERROR IF VARIABLE TYPE = STRING 
D9AD 9F3D             (     ROMbasic.ASM):01665         LB201     STX  RELPTR         SAVE POINTER TO OPERATOR ROUTINE 
D9AF 3504             (     ROMbasic.ASM):01666         LB203     PULS B              GET RELATIONAL OPERATOR FLAG FROM STACK 
D9B1 815A             (     ROMbasic.ASM):01667                   CMPA #$5A           CHECK FOR ‘NOT’ OPERATOR 
D9B3 2719             (     ROMbasic.ASM):01668                   BEQ  LB222          RETURN IF ‘NOT’ - NO RELATIONAL COMPARISON 
D9B5 817D             (     ROMbasic.ASM):01669                   CMPA #$7D           CHECK FOR NEGATION (UNARY) FLAG 
D9B7 2715             (     ROMbasic.ASM):01670                   BEQ  LB222          RETURN IF NEGATION - NO RELATIONAL COMPARISON 
                      (     ROMbasic.ASM):01671                                        
                      (     ROMbasic.ASM):01672         ; EVALUATE AN OPERATION. EIGHT BYTES WILL BE STORED ON STACK, FIRST SIX BYTES                      
                      (     ROMbasic.ASM):01673         ; ARE A TEMPORARY FLOATING POINT RESULT THEN THE ADDRESS OF ROUTINE WHICH                      
                      (     ROMbasic.ASM):01674         ; WILL EVALUATE THE OPERATION. THE RTS AT END OF ROUTINE WILL VECTOR                      
                      (     ROMbasic.ASM):01675         ; TO EVALUATING ROUTINE.                      
D9B9 54               (     ROMbasic.ASM):01676                   LSRB                = ROTATE VALTYP BIT INTO CARRY 
D9BA D70A             (     ROMbasic.ASM):01677                   STB  RELFLG         = FLAG AND SAVE NEW RELFLG 
D9BC 3552             (     ROMbasic.ASM):01678                   PULS A,X,U          * PULL A FP VALUE OFF OF THE STACK 
D9BE 975C             (     ROMbasic.ASM):01679                   STA  FP1EXP         * AND SAVE IT IN FPA1 
D9C0 9F5D             (     ROMbasic.ASM):01680                   STX  FPA1           * 
D9C2 DF5F             (     ROMbasic.ASM):01681                   STU  FPA1+2         * 
D9C4 3504             (     ROMbasic.ASM):01682                   PULS B              = GET MANTISSA SIGN AND 
D9C6 D761             (     ROMbasic.ASM):01683                   STB  FP1SGN         = SAVE IT IN FPA1 
D9C8 D854             (     ROMbasic.ASM):01684                   EORB FP0SGN         EOR IT WITH FPA1 MANTISSA SIGN 
D9CA D762             (     ROMbasic.ASM):01685                   STB  RESSGN         SAVE IT IN RESULT SIGN BYTE 
D9CC D64F             (     ROMbasic.ASM):01686         LB220     LDB  FP0EXP         GET EXPONENT OF FPA0 
D9CE 39               (     ROMbasic.ASM):01687         LB222     RTS                  
                      (     ROMbasic.ASM):01688                                        
D9CF BDEF17           (     ROMbasic.ASM):01689         LB223     JSR  XVEC15         CALL EXTENDED BASIC ADD-IN 
D9D2 0F06             (     ROMbasic.ASM):01690                   CLR  VALTYP         INITIALIZE TYPE FLAG TO NUMERIC 
D9D4 9D7C             (     ROMbasic.ASM):01691                   JSR  GETNCH         GET AN INPUT CHAR 
D9D6 2403             (     ROMbasic.ASM):01692                   BCC  LB22F          BRANCH IF NOT NUMERIC 
D9D8 7EE779           (     ROMbasic.ASM):01693         LB22C     JMP  LBD12          CONVERT ASCII STRING TO FLOATING POINT - 
                      (     ROMbasic.ASM):01694         ;         RETURN RESULT IN FPA0  
                      (     ROMbasic.ASM):01695         ; PROCESS A NON NUMERIC FIRST CHARACTER                      
D9DB BDDB49           (     ROMbasic.ASM):01696         LB22F     JSR  LB3A2          SET CARRY IF NOT ALPHA 
D9DE 2450             (     ROMbasic.ASM):01697                   BCC  LB284          BRANCH IF ALPHA CHARACTER 
D9E0 812E             (     ROMbasic.ASM):01698                   CMPA #'.            IS IT ‘.‘ (DECIMAL POINT)? 
D9E2 27F4             (     ROMbasic.ASM):01699                   BEQ  LB22C          CONVERT ASCII STRING TO FLOATING POINT 
D9E4 81A7             (     ROMbasic.ASM):01700                   CMPA #TOK_MINUS     MINUS TOKEN 
D9E6 2740             (     ROMbasic.ASM):01701                   BEQ  LB27C          YES - GO PROCESS THE MINUS OPERATOR 
D9E8 81A6             (     ROMbasic.ASM):01702                   CMPA #TOK_PLUS      PLUS TOKEN 
D9EA 27E3             (     ROMbasic.ASM):01703                   BEQ  LB223          YES - GET ANOTHER CHARACTER 
D9EC 8122             (     ROMbasic.ASM):01704                   CMPA #'"            STRING DELIMITER? 
D9EE 260A             (     ROMbasic.ASM):01705                   BNE  LB24E          NO 
D9F0 9E83             (     ROMbasic.ASM):01706         LB244     LDX  CHARAD         CURRENT BASIC POINTER TO X 
D9F2 BDDCBF           (     ROMbasic.ASM):01707                   JSR  LB518          SAVE STRING ON STRING STACK 
D9F5 9E64             (     ROMbasic.ASM):01708         LB249     LDX  COEFPT         * GET ADDRESS OF END OF STRING AND 
D9F7 9F83             (     ROMbasic.ASM):01709                   STX  CHARAD         * PUT BASIC’S INPUT POINTER THERE 
D9F9 39               (     ROMbasic.ASM):01710                   RTS                  
D9FA 81A3             (     ROMbasic.ASM):01711         LB24E     CMPA #TOK_NOT       NOT TOKEN? 
D9FC 260D             (     ROMbasic.ASM):01712                   BNE  LB25F          NO 
                      (     ROMbasic.ASM):01713         ; PROCESS THE NOT OPERATOR                      
D9FE 865A             (     ROMbasic.ASM):01714                   LDA  #$5A           ‘NOT’ PRECEDENCE FLAG 
DA00 BDD906           (     ROMbasic.ASM):01715                   JSR  LB15A          PROCESS OPERATION FOLLOWING ‘NOT’ 
DA03 BDDB94           (     ROMbasic.ASM):01716                   JSR  INTCNV         CONVERT FPA0 TO INTEGER IN ACCD 
DA06 43               (     ROMbasic.ASM):01717                   COMA                * ‘NOT’ THE INTEGER 
DA07 53               (     ROMbasic.ASM):01718                   COMB                * 
DA08 7EDC9B           (     ROMbasic.ASM):01719                   JMP  GIVABF         CONVERT ACCD TO FLOATING POINT (FPA0) 
DA0B 4C               (     ROMbasic.ASM):01720         LB25F     INCA                CHECK FOR TOKENS PRECEEDED BY $FF 
DA0C 272E             (     ROMbasic.ASM):01721                   BEQ  LB290          IT WAS PRECEEDED BY $FF 
DA0E 8D06             (     ROMbasic.ASM):01722         LB262     BSR  LB26A          SYNTAX CHECK FOR A ‘(‘ 
DA10 BDD902           (     ROMbasic.ASM):01723                   JSR  LB156          EVALUATE EXPRESSIONS WITHIN PARENTHESES AT 
                      (     ROMbasic.ASM):01724         ;         HIGHEST PRECEDENCE      
DA13 C629             (     ROMbasic.ASM):01725         LB267     LDB  #')            SYNTAX CHECK FOR ‘)‘ 
DA15 8C               (     ROMbasic.ASM):01726                   FCB  SKP2           SKIP 2 BYTES 
DA16 C628             (     ROMbasic.ASM):01727         LB26A     LDB  #'(            SYNTAX CHECK FOR ‘(‘ 
DA18 8C               (     ROMbasic.ASM):01728                   FCB  SKP2           SKIP 2 BYTES 
DA19 C62C             (     ROMbasic.ASM):01729         LB26D     LDB  #',            SYNTAX CHECK FOR COMMA 
DA1B E19F0083         (     ROMbasic.ASM):01730         LB26F     CMPB [CHARAD]       * COMPARE ACCB TO CURRENT INPUT 
DA1F 2602             (     ROMbasic.ASM):01731                   BNE  LB277          * CHARACTER - SYNTAX ERROR IF NO MATCH 
DA21 0E7C             (     ROMbasic.ASM):01732                   JMP  GETNCH         GET A CHARACTER FROM BASIC 
DA23 C602             (     ROMbasic.ASM):01733         LB277     LDB  #2*1           SYNTAX ERROR 
DA25 7ED426           (     ROMbasic.ASM):01734                   JMP  LAC46          JUMP TO ERROR HANDLER 
                      (     ROMbasic.ASM):01735                                        
                      (     ROMbasic.ASM):01736         ; PROCESS THE MINUS (UNARY) OPERATOR                      
DA28 867D             (     ROMbasic.ASM):01737         LB27C     LDA  #$7D           MINUS (UNARY) PRECEDENCE FLAG 
DA2A BDD906           (     ROMbasic.ASM):01738                   JSR  LB15A          PROCESS OPERATION FOLLOWING ‘UNARY’ NEGATION 
DA2D 7EE950           (     ROMbasic.ASM):01739                   JMP  LBEE9          CHANGE SIGN OF FPA0 MANTISSA 
                      (     ROMbasic.ASM):01740                                        
                      (     ROMbasic.ASM):01741         ; EVALUATE ALPHA EXPRESSION                      
DA30 BDDAFE           (     ROMbasic.ASM):01742         LB284     JSR  LB357          FIND THE DESCRIPTOR ADDRESS OF A VARIABLE 
DA33 9F52             (     ROMbasic.ASM):01743         LB287     STX  FPA0+2         SAVE DESCRIPTOR ADDRESS IN FPA0 
DA35 9606             (     ROMbasic.ASM):01744                   LDA  VALTYP         TEST VARIABLE TYPE 
DA37 2695             (     ROMbasic.ASM):01745                   BNE  LB222          RETURN IF STRING 
DA39 7EE67B           (     ROMbasic.ASM):01746                   JMP  LBC14          COPY A FP NUMBER FROM (X) TO FPA0 
                      (     ROMbasic.ASM):01747                                        
                      (     ROMbasic.ASM):01748         ; EVALUATING A SECONDARY TOKEN                      
DA3C 9D7C             (     ROMbasic.ASM):01749         LB290     JSR  GETNCH         GET AN INPUT CHARACTER (SECONDARY TOKEN) 
DA3E 1F89             (     ROMbasic.ASM):01750                   TFR  A,B            SAVE IT IN ACCB 
DA40 58               (     ROMbasic.ASM):01751                   ASLB                X2 & BET RID OF BIT 7 
DA41 9D7C             (     ROMbasic.ASM):01752                   JSR  GETNCH         GET ANOTHER INPUT CHARACTER 
                      (     ROMbasic.ASM):01753         ;          CMPB #NUM_SEC_FNS-1*2 29 SECONDARY FUNCTIONS - 1     * original line
DA43 C138             (     ROMbasic.ASM):01754                   CMPB #(NUM_SEC_FNS-1)*2       * 29 SECONDARY FUNCTIONS - 1  ; fix for lwtools
DA45 2303             (     ROMbasic.ASM):01755                   BLS  LB29F          BRANCH IF COLOR BASIC TOKEN 
DA47 7EDA23           (     ROMbasic.ASM):01756                   JMP  LB277          SYNTAX ERROR 
DA4A 3404             (     ROMbasic.ASM):01757         LB29F     PSHS B              SAVE TOKEN OFFSET ON STACK 
                      (     ROMbasic.ASM):01758         ;          CMPB #TOK_LEFT-$80*2 CHECK FOR TOKEN WITH AN ARGUMENT * original line  
DA4C C12A             (     ROMbasic.ASM):01759                   CMPB #(TOK_LEFT-$80)*2 CHECK FOR TOKEN WITH AN ARGUMENT ; fix for lwtools
DA4E 251E             (     ROMbasic.ASM):01760                   BCS  LB2C7          DO SECONDARIES STRING$ OR LESS 
                      (     ROMbasic.ASM):01761         ;          CMPB #TOK_INKEY-$80*2 *                               * original line
DA50 C130             (     ROMbasic.ASM):01762                   CMPB #(TOK_INKEY-$80)*2 *                                 ; fix for lwtools
DA52 241C             (     ROMbasic.ASM):01763                   BCC  LB2C9          * DO SECONDARIES $92 (INKEY$) OR > 
DA54 8DC0             (     ROMbasic.ASM):01764                   BSR  LB26A          SYNTAX CHECK FOR A ‘(‘ 
DA56 A6E4             (     ROMbasic.ASM):01765                   LDA  ,S             GET TOKEN NUMBER 
                      (     ROMbasic.ASM):01766         ; DO SECONDARIES (LEFT$, RIGHT$, MID$)                      
DA58 BDD902           (     ROMbasic.ASM):01767                   JSR  LB156          EVALUATE FIRST STRING IN ARGUMENT 
DA5B 8DBC             (     ROMbasic.ASM):01768                   BSR  LB26D          SYNTAX CHECK FOR A COMMA 
DA5D BDD8F2           (     ROMbasic.ASM):01769                   JSR  LB146          ‘TM’ ERROR IF NUMERIC VARiABLE 
DA60 3502             (     ROMbasic.ASM):01770                   PULS A              GET TOKEN OFFSET FROM STACK 
DA62 DE52             (     ROMbasic.ASM):01771                   LDU  FPA0+2         POINT U TO STRING DESCRIPTOR 
DA64 3442             (     ROMbasic.ASM):01772                   PSHS U,A            SAVE TOKEN OFFSET AND DESCRIPTOR ADDRESS 
DA66 BDDEB2           (     ROMbasic.ASM):01773                   JSR  LB70B          EVALUATE FIRST NUMERIC ARGUMENT 
DA69 3502             (     ROMbasic.ASM):01774                   PULS A              GET TOKEN OFFSET FROM STACK 
DA6B 3406             (     ROMbasic.ASM):01775                   PSHS B,A            SAVE TOKEN OFFSET AND NUMERIC ARGUMENT 
DA6D 8E               (     ROMbasic.ASM):01776                   FCB  $8E            OP CODE OF LDX# - SKlP 2 BYTES 
DA6E 8D9E             (     ROMbasic.ASM):01777         LB2C7     BSR  LB262          SYNTAX CHECK FOR A ‘(‘ 
DA70 3504             (     ROMbasic.ASM):01778         LB2C9     PULS B              GET TOKEN OFFSET 
DA72 BED118           (     ROMbasic.ASM):01779                   LDX  COMVEC+8       GET SECONDARY FUNCTION JUMP TABLE ADDRESS 
DA75 3A               (     ROMbasic.ASM):01780         LB2CE     ABX                 ADD IN COMMAND OFFSET 
                      (     ROMbasic.ASM):01781         ;                              
                      (     ROMbasic.ASM):01782         ; HERE IS WHERE WE BRANCH TO A SECONDARY FUNCTION                      
DA76 AD94             (     ROMbasic.ASM):01783                   JSR  [,X]           GO DO AN SECONDARY FUNCTION 
DA78 7ED8EF           (     ROMbasic.ASM):01784                   JMP  LB143          ‘TM’ ERROR IF VARIABLE TYPE = STRING 
                      (     ROMbasic.ASM):01785                                        
                      (     ROMbasic.ASM):01786         ; LOGICAL OPERATOR ‘OR’ JUMPS HERE                      
DA7B 86               (     ROMbasic.ASM):01787         LB2D4     FCB  SKP1LD         SKIP ONE BYTE - ‘OR’ FLAG = $4F 
                      (     ROMbasic.ASM):01788                                        
                      (     ROMbasic.ASM):01789         ; LOGICAL OPERATOR ‘AND’ JUMPS HERE                      
DA7C 4F               (     ROMbasic.ASM):01790         LB2D5     CLRA                AND FLAG = 0 
DA7D 9703             (     ROMbasic.ASM):01791                   STA  TMPLOC         AND/OR FLAG 
DA7F BDDB94           (     ROMbasic.ASM):01792                   JSR  INTCNV         CONVERT FPA0 INTO AN INTEGER IN ACCD 
DA82 DD01             (     ROMbasic.ASM):01793                   STD  CHARAC         TEMP SAVE ACCD 
DA84 BDE6B1           (     ROMbasic.ASM):01794                   JSR  LBC4A          MOVE FPA1 TO FPA0 
DA87 BDDB94           (     ROMbasic.ASM):01795                   JSR  INTCNV         CONVERT FPA0 INTO AN INTEGER IN ACCD 
DA8A 0D03             (     ROMbasic.ASM):01796                   TST  TMPLOC         CHECK AND/OR FLAG 
DA8C 2606             (     ROMbasic.ASM):01797                   BNE  LB2ED          BRANCH IF OR 
DA8E 9401             (     ROMbasic.ASM):01798                   ANDA CHARAC         * ‘AND’ ACCD WITH FPA0 INTEGER 
DA90 D402             (     ROMbasic.ASM):01799                   ANDB ENDCHR         * STORED IN ENDCHR 
DA92 2004             (     ROMbasic.ASM):01800                   BRA  LB2F1          CONVERT TO FP 
DA94 9A01             (     ROMbasic.ASM):01801         LB2ED     ORA  CHARAC         * ‘OR’ ACCD WITH FPA0 INTEGER 
DA96 DA02             (     ROMbasic.ASM):01802                   ORB  ENDCHR         * STORED IN CHARAC 
DA98 7EDC9B           (     ROMbasic.ASM):01803         LB2F1     JMP  GIVABF         CONVERT THE VALUE IN ACCD INTO A FP NUMBER 
                      (     ROMbasic.ASM):01804                                        
                      (     ROMbasic.ASM):01805         ; RELATIONAL COMPARISON PROCESS HANDLER                      
DA9B BDD8F4           (     ROMbasic.ASM):01806         LB2F4     JSR  LB148          ‘TM’ ERROR IF TYPE MISMATCH 
DA9E 2610             (     ROMbasic.ASM):01807                   BNE  LB309          BRANCH IF STRING VARIABLE 
DAA0 9661             (     ROMbasic.ASM):01808                   LDA  FP1SGN         * ‘PACK’ THE MANTISSA 
DAA2 8A7F             (     ROMbasic.ASM):01809                   ORA  #$7F           * SIGN OF FPA1 INTO 
DAA4 945D             (     ROMbasic.ASM):01810                   ANDA FPA1           * BIT 7 OF THE 
DAA6 975D             (     ROMbasic.ASM):01811                   STA  FPA1           * MANTISSA MS BYTE 
DAA8 8E005C           (     ROMbasic.ASM):01812                   LDX  #FP1EXP        POINT X TO FPA1 
DAAB BDE6FD           (     ROMbasic.ASM):01813                   JSR  LBC96          COMPARE FPA0 TO FPA1 
DAAE 2036             (     ROMbasic.ASM):01814                   BRA  LB33F          CHECK TRUTH OF RELATIONAL COMPARISON 
                      (     ROMbasic.ASM):01815                                        
                      (     ROMbasic.ASM):01816         ; RELATIONAL COMPARISON OF STRINGS                      
DAB0 0F06             (     ROMbasic.ASM):01817         LB309     CLR  VALTYP         SET VARIABLE TYPE TO NUMERIC 
DAB2 0A3F             (     ROMbasic.ASM):01818                   DEC  TRELFL         REMOVE STRING TYPE FLAG (BIT0=1 FOR STRINGS) FROM THE 
                      (     ROMbasic.ASM):01819         ;                             DESIRED RELATIONAL COMPARISON DATA 
DAB4 BDDDFE           (     ROMbasic.ASM):01820                   JSR  LB657          GET LENGTH AND ADDRESS OF STRING WHOSE 
                      (     ROMbasic.ASM):01821         ;                             DESCRIPTOR ADDRESS IS IN THE BOTTOM OF FPA0 
DAB7 D756             (     ROMbasic.ASM):01822                   STB  STRDES         * SAVE LENGTH AND ADDRESS IN TEMPORARY 
DAB9 9F58             (     ROMbasic.ASM):01823                   STX  STRDES+2       * DESCRIPTOR (STRING B) 
DABB 9E5F             (     ROMbasic.ASM):01824                   LDX  FPA1+2         = RETURN LENGTH AND ADDRESS OF STRING 
DABD BDDE00           (     ROMbasic.ASM):01825                   JSR  LB659          = WHOSE DESCRIPTOR ADDRESS IS STORED IN FPA1+2 
DAC0 9656             (     ROMbasic.ASM):01826                   LDA  STRDES         LOAD ACCA WITH LENGTH OF STRING B 
DAC2 3404             (     ROMbasic.ASM):01827                   PSHS B              SAVE LENGTH A ON STACK 
DAC4 A0E0             (     ROMbasic.ASM):01828                   SUBA ,S+            SUBTRACT LENGTH A FROM LENGTH B 
DAC6 2707             (     ROMbasic.ASM):01829                   BEQ  LB328          BRANCH IF STRINGS OF EQUAL LENGTH 
DAC8 8601             (     ROMbasic.ASM):01830                   LDA  #1             TRUE FLAG 
DACA 2403             (     ROMbasic.ASM):01831                   BCC  LB328          TRUE IF LENGTH B > LENGTH A 
DACC D656             (     ROMbasic.ASM):01832                   LDB  STRDES         LOAD ACCB WITH LENGTH B 
DACE 40               (     ROMbasic.ASM):01833                   NEGA                SET FLAG = FALSE (1FF) 
DACF 9754             (     ROMbasic.ASM):01834         LB328     STA  FP0SGN         SAVE TRUE/FALSE FLAG 
DAD1 DE58             (     ROMbasic.ASM):01835                   LDU  STRDES+2       POINT U TO START OF STRING 
DAD3 5C               (     ROMbasic.ASM):01836                   INCB                COMPENSATE FOR THE DECB BELOW 
                      (     ROMbasic.ASM):01837         ; ENTER WITH ACCB CONTAINING LENGTH OF SHORTER STRING                      
DAD4 5A               (     ROMbasic.ASM):01838         LB32D     DECB                DECREMENT SHORTER STRING LENGTH 
DAD5 2604             (     ROMbasic.ASM):01839                   BNE  LB334          BRANCH IF ALL OF STRING NOT COMPARED 
DAD7 D654             (     ROMbasic.ASM):01840                   LDB  FP0SGN         GET TRUE/FALSE FLAB 
DAD9 200B             (     ROMbasic.ASM):01841                   BRA  LB33F          CHECK TRUTH OF RELATIONAL COMPARISON 
DADB A680             (     ROMbasic.ASM):01842         LB334     LDA  ,X+            GET A BYTE FROM STRING A 
DADD A1C0             (     ROMbasic.ASM):01843                   CMPA ,U+            COMPARE TO STRING B 
DADF 27F3             (     ROMbasic.ASM):01844                   BEQ  LB32D          CHECK ANOTHER CHARACTER IF = 
DAE1 C6FF             (     ROMbasic.ASM):01845                   LDB  #$FF           FALSE FLAG IF STRING A > B 
DAE3 2401             (     ROMbasic.ASM):01846                   BCC  LB33F          BRANCH IF STRING A > STRING B 
DAE5 50               (     ROMbasic.ASM):01847                   NEGB                SET FLAG = TRUE 
                      (     ROMbasic.ASM):01848                                        
                      (     ROMbasic.ASM):01849         ; DETERMINE TRUTH OF COMPARISON - RETURN RESULT IN FPA0                      
DAE6 CB01             (     ROMbasic.ASM):01850         LB33F     ADDB #1             CONVERT $FF,0,1 TO 0,1,2 
DAE8 59               (     ROMbasic.ASM):01851                   ROLB                NOW IT’S 1,2,4 FOR > = < 
DAE9 D40A             (     ROMbasic.ASM):01852                   ANDB RELFLG         ‘AND’ THE ACTUAL COMPARISON WITH THE DESIRED - 
DAEB                  (     ROMbasic.ASM):01853         COMPARISON                      
DAEB 2702             (     ROMbasic.ASM):01854                   BEQ  LB348          BRANCH IF FALSE (NO MATCHING BITS) 
DAED C6FF             (     ROMbasic.ASM):01855                   LDB  #$FF           TRUE FLAG 
DAEF 7EE6E3           (     ROMbasic.ASM):01856         LB348     JMP  LBC7C          CONVERT ACCB INTO FP NUMBER IN FPA0 
                      (     ROMbasic.ASM):01857                                        
                      (     ROMbasic.ASM):01858         ; DIM                          
DAF2 BDDA19           (     ROMbasic.ASM):01859         LB34B     JSR  LB26D          SYNTAX CHECK FOR COMMA 
DAF5 C601             (     ROMbasic.ASM):01860         DIM       LDB  #1             DIMENSION FLAG 
DAF7 8D08             (     ROMbasic.ASM):01861                   BSR  LB35A          SAVE ARRAY SPACE FOR THIS VARIABLE 
DAF9 9D82             (     ROMbasic.ASM):01862                   JSR  GETCCH         GET CURRENT INPUT CHARACTER 
DAFB 26F5             (     ROMbasic.ASM):01863                   BNE  LB34B          KEEP DIMENSIONING IF NOT END OF LINE 
DAFD 39               (     ROMbasic.ASM):01864                   RTS                  
                      (     ROMbasic.ASM):01865         ; EVALUATE A VARIABLE - RETURN X AND                      
                      (     ROMbasic.ASM):01866         ; VARPTR POINTING TO VARIABLE DESCRIPTOR                      
                      (     ROMbasic.ASM):01867         ; EACH VARIABLE REQUIRES 7 BYTES - THE FIRST TWO                      
                      (     ROMbasic.ASM):01868         ; BYTES ARE THE VARIABLE NAME AND THE NEXT 5                      
                      (     ROMbasic.ASM):01869         ; BYTES ARE THE DESCRIPTOR. IF BIT 7 OF THE                      
                      (     ROMbasic.ASM):01870         ; FIRST BYTE OF VARlABLE NAME IS SET, THE                      
                      (     ROMbasic.ASM):01871         ; VARIABLE IS A DEF FN VARIABLE. IF BIT 7 OF                      
                      (     ROMbasic.ASM):01872         ; THE SECOND BYTE OF VARIABLE NAME IS SET, THE                      
                      (     ROMbasic.ASM):01873         ; VARIABLE IS A STRING, OTHERWISE THE VARIABLE                      
                      (     ROMbasic.ASM):01874         ; IS NUMERIC.                      
                      (     ROMbasic.ASM):01875         ; IF THE VARIABLE IS NOT FOUND, A ZERO VARIABLE IS                      
                      (     ROMbasic.ASM):01876         ; INSERTED INTO THE VARIABLE SPACE                      
DAFE 5F               (     ROMbasic.ASM):01877         LB357     CLRB                DIMENSION FLAG = 0; DO NOT SET UP AN ARRAY 
DAFF 9D82             (     ROMbasic.ASM):01878                   JSR  GETCCH         GET CURRENT INPUT CHARACTER 
DB01 D705             (     ROMbasic.ASM):01879         LB35A     STB  DIMFLG         SAVE ARRAY FLAG 
                      (     ROMbasic.ASM):01880         ; ENTRY POINT FOR DEF FN VARIABLE SEARCH                      
DB03 9737             (     ROMbasic.ASM):01881         LB35C     STA  VARNAM         SAVE INPUT CHARACTER 
DB05 9D82             (     ROMbasic.ASM):01882                   JSR  GETCCH         GET CURRENT INPUT CHARACTER 
DB07 8D40             (     ROMbasic.ASM):01883                   BSR  LB3A2          SET CARRY IF NOT ALPHA 
DB09 1025FF16         (     ROMbasic.ASM):01884                   LBCS LB277          SYNTAX ERROR IF NOT ALPHA 
DB0D 5F               (     ROMbasic.ASM):01885                   CLRB                DEFAULT 2ND VARIABLE CHARACTER TO ZERO 
DB0E D706             (     ROMbasic.ASM):01886                   STB  VALTYP         SET VARIABLE TYPE TO NUMERIC 
DB10 9D7C             (     ROMbasic.ASM):01887                   JSR  GETNCH         GET ANOTHER CHARACTER FROM BASIC 
DB12 2504             (     ROMbasic.ASM):01888                   BCS  LB371          BRANCH IF NUMERIC (2ND CHARACTER IN 
                      (     ROMbasic.ASM):01889         ;                             VARIABLE MAY BE NUMERIC) 
DB14 8D33             (     ROMbasic.ASM):01890                   BSR  LB3A2          SET CARRY IF NOT ALPHA 
DB16 250A             (     ROMbasic.ASM):01891                   BCS  LB37B          BRANCH IF NOT ALPHA 
DB18 1F89             (     ROMbasic.ASM):01892         LB371     TFR  A,B            SAVE 2ND CHARACTER IN ACCB 
                      (     ROMbasic.ASM):01893         ; READ INPUT CHARACTERS UNTIL A NON ALPHA OR                      
                      (     ROMbasic.ASM):01894         ; NON NUMERIC IS FOUND - IGNORE ALL CHARACTERS                      
                      (     ROMbasic.ASM):01895         ; IN VARIABLE NAME AFTER THE 1ST TWO                      
DB1A 9D7C             (     ROMbasic.ASM):01896         LB373     JSR  GETNCH         GET AN INPUT CHARACTER 
DB1C 25FC             (     ROMbasic.ASM):01897                   BCS  LB373          BRANCH IF NUMERIC 
DB1E 8D29             (     ROMbasic.ASM):01898                   BSR  LB3A2          SET CARRY IF NOT ALPHA 
DB20 24F8             (     ROMbasic.ASM):01899                   BCC  LB373          BRANCH IF ALPHA 
DB22 8124             (     ROMbasic.ASM):01900         LB37B     CMPA #'$            CHECK FOR A STRING VARIABLE 
DB24 2606             (     ROMbasic.ASM):01901                   BNE  LB385          BRANCH IF IT IS NOT A STRING 
DB26 0306             (     ROMbasic.ASM):01902                   COM  VALTYP         SET VARIABLE TYPE TO STRING 
DB28 CB80             (     ROMbasic.ASM):01903                   ADDB #$80           SET BIT 7 OF 2ND CHARACTER (STRING) 
DB2A 9D7C             (     ROMbasic.ASM):01904                   JSR  GETNCH         GET AN INPUT CHARACTER 
DB2C D738             (     ROMbasic.ASM):01905         LB385     STB  VARNAM+1       SAVE 2ND CHARACTER IN VARNAM+1 
DB2E 9A08             (     ROMbasic.ASM):01906                   ORA  ARYDIS         OR IN THE ARRAY DISABLE FLAG - IF = $80, 
                      (     ROMbasic.ASM):01907         ;              DON’T SEARCH FOR VARIABLES IN THE ARRAYS  
DB30 8028             (     ROMbasic.ASM):01908                   SUBA #'(            IS THIS AN ARRAY VARIABLE? 
DB32 10270075         (     ROMbasic.ASM):01909                   LBEQ LB404          BRANCH IF IT IS 
DB36 0F08             (     ROMbasic.ASM):01910                   CLR  ARYDIS         RESET THE ARRAY DISABLE FLAG 
DB38 9E1B             (     ROMbasic.ASM):01911                   LDX  VARTAB         POINT X TO THE START OF VARIABLES 
DB3A DC37             (     ROMbasic.ASM):01912                   LDD  VARNAM         GET VARIABLE IN QUESTION 
DB3C 9C1D             (     ROMbasic.ASM):01913         LB395     CMPX ARYTAB         COMPARE X TO THE END OF VARIABLES 
DB3E 2712             (     ROMbasic.ASM):01914                   BEQ  LB3AB          BRANCH IF END OF VARIABLES 
DB40 10A381           (     ROMbasic.ASM):01915                   CMPD ,X++           * COMPARE VARIABLE IN QUESTION TO CURRENT 
DB43 273E             (     ROMbasic.ASM):01916                   BEQ  LB3DC          * VARIABLE AND BRANCH IF MATCH 
DB45 3005             (     ROMbasic.ASM):01917                   LEAX 5,X            = MOVE POINTER TO NEXT VARIABLE AND 
DB47 20F3             (     ROMbasic.ASM):01918                   BRA  LB395          = KEEP LOOKING 
                      (     ROMbasic.ASM):01919                                        
                      (     ROMbasic.ASM):01920         ; SET CARRY IF NOT UPPER CASE ALPHA                      
DB49 8141             (     ROMbasic.ASM):01921         LB3A2     CMPA #'A            * CARRY SET IF < ‘A’ 
DB4B 2504             (     ROMbasic.ASM):01922                   BCS  LB3AA          * 
DB4D 805B             (     ROMbasic.ASM):01923                   SUBA #'Z+1          = 
                      (     ROMbasic.ASM):01924         ;         SUBA #-('Z+1)       = CARRY CLEAR IF <= 'Z' 
DB4F 80A5             (     ROMbasic.ASM):01925                   FCB  $80,$A5         
DB51 39               (     ROMbasic.ASM):01926         LB3AA     RTS                  
                      (     ROMbasic.ASM):01927         ; PUT A NEW VARIABLE IN TABLE OF VARIABLES                      
DB52 8E0074           (     ROMbasic.ASM):01928         LB3AB     LDX  #ZERO          POINT X TO ZERO LOCATION 
DB55 EEE4             (     ROMbasic.ASM):01929                   LDU  ,S             GET CURRENT RETURN ADDRESS 
DB57 1183DA33         (     ROMbasic.ASM):01930                   CMPU #LB287         DID WE COME FROM ‘EVALUATE ALPHA EXPR’? 
DB5B 2728             (     ROMbasic.ASM):01931                   BEQ  LB3DE          YES - RETURN A ZERO VALUE 
DB5D DC1F             (     ROMbasic.ASM):01932                   LDD  ARYEND         * GET END OF ARRAYS ADDRESS AND 
DB5F DD43             (     ROMbasic.ASM):01933                   STD  V43            * SAVE IT AT V43 
DB61 C30007           (     ROMbasic.ASM):01934                   ADDD #7             = ADD 7 TO END OF ARRAYS (EACH 
DB64 DD41             (     ROMbasic.ASM):01935                   STD  V41            = VARIABLE = 7 BYTES) AND SAVE AT V41 
DB66 9E1D             (     ROMbasic.ASM):01936                   LDX  ARYTAB         * GET END OF VARIABLES AND SAVE AT V47 
DB68 9F47             (     ROMbasic.ASM):01937                   STX  V47            * 
DB6A BDD3FE           (     ROMbasic.ASM):01938                   JSR  LAC1E          MAKE A SEVEN BYTE SLOT FOR NEW VARIABLE AT 
                      (     ROMbasic.ASM):01939         ;         TOP  OF VARIABLES    
DB6D 9E41             (     ROMbasic.ASM):01940                   LDX  V41            = GET NEW END OF ARRAYS AND SAVE IT 
DB6F 9F1F             (     ROMbasic.ASM):01941                   STX  ARYEND         = 
DB71 9E45             (     ROMbasic.ASM):01942                   LDX  V45            * GET NEW END OF VARIABLES AND SAVE IT 
DB73 9F1D             (     ROMbasic.ASM):01943                   STX  ARYTAB         * 
DB75 9E47             (     ROMbasic.ASM):01944                   LDX  V47            GET OLD END OF VARIABLES 
DB77 DC37             (     ROMbasic.ASM):01945                   LDD  VARNAM         GET NEW VARIABLE NAME 
DB79 ED81             (     ROMbasic.ASM):01946                   STD  ,X++           SAVE VARIABLE NAME 
DB7B 4F               (     ROMbasic.ASM):01947                   CLRA                * ZERO OUT THE FP VALUE OF THE NUMERIC 
DB7C 5F               (     ROMbasic.ASM):01948                   CLRB                * VARIABLE OR THE LENGTH AND ADDRESS 
DB7D ED84             (     ROMbasic.ASM):01949                   STD  ,X             * OF A STRING VARIABLE 
DB7F ED02             (     ROMbasic.ASM):01950                   STD  2,X            * 
DB81 A704             (     ROMbasic.ASM):01951                   STA  4,X            * 
DB83 9F39             (     ROMbasic.ASM):01952         LB3DC     STX  VARPTR         STORE ADDRESS OF VARIABLE VALUE 
DB85 39               (     ROMbasic.ASM):01953         LB3DE     RTS                  
                      (     ROMbasic.ASM):01954         ;                              
DB86 9080000000       (     ROMbasic.ASM):01955         LB3DF     FCB  $90,$80,$00,$00,$00 * FLOATING POINT -32768 
                      (     ROMbasic.ASM):01956         ;                             SMALLEST SIGNED TWO BYTE INTEGER 
                      (     ROMbasic.ASM):01957         ;                              
DB8B 9D7C             (     ROMbasic.ASM):01958         LB3E4     JSR  GETNCH         GET AN INPUT CHARACTER FROM BASIC 
DB8D BDD8ED           (     ROMbasic.ASM):01959         LB3E6     JSR  LB141          GO EVALUATE NUMERIC EXPRESSION 
DB90 9654             (     ROMbasic.ASM):01960         LB3E9     LDA  FP0SGN         GET FPA0 MANTISSA SIGN 
DB92 2B5D             (     ROMbasic.ASM):01961                   BMI  LB44A          ‘FC’ ERROR IF NEGATIVE NUMBER 
                      (     ROMbasic.ASM):01962                                        
                      (     ROMbasic.ASM):01963                                        
DB94 BDD8EF           (     ROMbasic.ASM):01964         INTCNV    JSR  LB143          ‘TM’ ERROR IF STRING VARIABLE 
DB97 964F             (     ROMbasic.ASM):01965                   LDA  FP0EXP         GET FPA0 EXPONENT 
DB99 8190             (     ROMbasic.ASM):01966                   CMPA #$90           * COMPARE TO 32768 - LARGEST INTEGER EXPONENT AND 
DB9B 2508             (     ROMbasic.ASM):01967                   BCS  LB3FE          * BRANCH IF FPA0 < 32768 
DB9D 8EDB86           (     ROMbasic.ASM):01968                   LDX  #LB3DF         POINT X TO FP VALUE OF -32768 
DBA0 BDE6FD           (     ROMbasic.ASM):01969                   JSR  LBC96          COMPARE -32768 TO FPA0 
DBA3 264C             (     ROMbasic.ASM):01970                   BNE  LB44A          ‘FC’ ERROR IF NOT = 
DBA5 BDE72F           (     ROMbasic.ASM):01971         LB3FE     JSR  LBCC8          CONVERT FPA0 TO A TWO BYTE INTEGER 
DBA8 DC52             (     ROMbasic.ASM):01972                   LDD  FPA0+2         GET THE INTEGER 
DBAA 39               (     ROMbasic.ASM):01973                   RTS                  
                      (     ROMbasic.ASM):01974         ; EVALUATE AN ARRAY VARIABLE                      
DBAB DC05             (     ROMbasic.ASM):01975         LB404     LDD  DIMFLG         GET ARRAY FLAG AND VARIABLE TYPE 
DBAD 3406             (     ROMbasic.ASM):01976                   PSHS B,A            SAVE THEM ON STACK 
DBAF 12               (     ROMbasic.ASM):01977                   NOP                 DEAD SPACE CAUSED BY 1.2 REVISION 
DBB0 5F               (     ROMbasic.ASM):01978                   CLRB                RESET DIMENSION COUNTER 
DBB1 9E37             (     ROMbasic.ASM):01979         LB40A     LDX  VARNAM         GET VARIABLE NAME 
DBB3 3414             (     ROMbasic.ASM):01980                   PSHS X,B            SAVE VARIABLE NAME AND DIMENSION COUNTER 
DBB5 8DD4             (     ROMbasic.ASM):01981                   BSR  LB3E4          EVALUATE EXPRESSION (DIMENSlON LENGTH) 
DBB7 3534             (     ROMbasic.ASM):01982                   PULS B,X,Y          PULL OFF VARIABLE NAME, DIMENSlON COUNTER, 
                      (     ROMbasic.ASM):01983         ;                             ARRAY FLAG 
DBB9 9F37             (     ROMbasic.ASM):01984                   STX  VARNAM         SAVE VARIABLE NAME AND VARIABLE TYPE 
DBBB DE52             (     ROMbasic.ASM):01985                   LDU  FPA0+2         GET DIMENSION LENGTH 
DBBD 3460             (     ROMbasic.ASM):01986                   PSHS U,Y            SAVE DIMENSION LENGTH, ARRAY FLAG, VARIABLE TYPE 
DBBF 5C               (     ROMbasic.ASM):01987                   INCB                INCREASE DIMENSION COUNTER 
DBC0 9D82             (     ROMbasic.ASM):01988                   JSR  GETCCH         GET CURRENT INPUT CHARACTER 
DBC2 812C             (     ROMbasic.ASM):01989                   CMPA #',            CHECK FOR ANOTHER DIMENSION 
DBC4 27EB             (     ROMbasic.ASM):01990                   BEQ  LB40A          BRANCH IF MORE 
DBC6 D703             (     ROMbasic.ASM):01991                   STB  TMPLOC         SAVE DIMENSION COUNTER 
DBC8 BDDA13           (     ROMbasic.ASM):01992                   JSR  LB267          SYNTAX CHECK FOR A ‘)‘ 
DBCB 3506             (     ROMbasic.ASM):01993                   PULS A,B            * RESTORE VARIABLE TYPE AND ARRAY 
DBCD DD05             (     ROMbasic.ASM):01994                   STD  DIMFLG         * FLAG - LEAVE DIMENSION LENGTH ON STACK 
DBCF 9E1D             (     ROMbasic.ASM):01995                   LDX  ARYTAB         GET START OF ARRAYS 
DBD1 9C1F             (     ROMbasic.ASM):01996         LB42A     CMPX ARYEND         COMPARE TO END OF ARRAYS 
DBD3 2721             (     ROMbasic.ASM):01997                   BEQ  LB44F          BRANCH IF NO MATCH FOUND 
DBD5 DC37             (     ROMbasic.ASM):01998                   LDD  VARNAM         GET VARIABLE IN QUESTION 
DBD7 10A384           (     ROMbasic.ASM):01999                   CMPD ,X             COMPARE TO CURRENT VARIABLE 
DBDA 2706             (     ROMbasic.ASM):02000                   BEQ  LB43B          BRANCH IF = 
DBDC EC02             (     ROMbasic.ASM):02001                   LDD  2,X            GET OFFSET TO NEXT ARRAY VARIABLE 
DBDE 308B             (     ROMbasic.ASM):02002                   LEAX D,X            ADD TO CURRENT POINTER 
DBE0 20EF             (     ROMbasic.ASM):02003                   BRA  LB42A          KEEP SEARCHING 
DBE2 C612             (     ROMbasic.ASM):02004         LB43B     LDB  #2*9           ‘REDIMENSIONED ARRAY’ ERROR 
DBE4 9605             (     ROMbasic.ASM):02005                   LDA  DIMFLG         * TEST ARRAY FLAG - IF <>0 YOU ARE TRYING 
DBE6 260B             (     ROMbasic.ASM):02006                   BNE  LB44C          * TO REDIMENSION AN ARRAY 
DBE8 D603             (     ROMbasic.ASM):02007                   LDB  TMPLOC         GET NUMBER OF DIMENSIONS IN ARRAY 
DBEA E104             (     ROMbasic.ASM):02008                   CMPB 4,X            COMPARE TO THIS ARRAYS DIMENSIONS 
DBEC 2759             (     ROMbasic.ASM):02009                   BEQ  LB4A0          BRANCH IF = 
DBEE C610             (     ROMbasic.ASM):02010         LB447     LDB  #8*2           ‘BAD SUBSCRIPT’ 
DBF0 8C               (     ROMbasic.ASM):02011                   FCB  SKP2           SKIP TWO BYTES 
DBF1 C608             (     ROMbasic.ASM):02012         LB44A     LDB  #4*2           ‘ILLEGAL FUNCTION CALL’ 
DBF3 7ED426           (     ROMbasic.ASM):02013         LB44C     JMP  LAC46          JUMP TO ERROR SERVICING ROUTINE 
                      (     ROMbasic.ASM):02014                                        
                      (     ROMbasic.ASM):02015         ; INSERT A NEW ARRAY INTO ARRAY VARIABLES                      
                      (     ROMbasic.ASM):02016         ; EACH SET OF ARRAY VARIABLES IS PRECEEDED BY A DE-                      
                      (     ROMbasic.ASM):02017         ; SCRIPTOR BLOCK COMPOSED OF 5+2*N BYTES WHERE N IS THE                      
                      (     ROMbasic.ASM):02018         ; NUMBER OF DIMENSIONS IN THE ARRAY. THE BLOCK IS DEFINED                      
                      (     ROMbasic.ASM):02019         ; AS FOLLOWS: BYTES 0,1:VARIABLE’S NAME; 2,3:TOTAL LENGTH                      
                      (     ROMbasic.ASM):02020         ; OF ARRAY ITEMS AND DESCRIPTOR BLOCK; 4:NUMBER OF DIMEN-                      
                      (     ROMbasic.ASM):02021         ; ISIONS; 5,6:LENGTH OF DIMENSION 1; 7,8:LENGTH OF DIMEN-                      
                      (     ROMbasic.ASM):02022         ; SION 2;… 4+N,5+N:LENGTH OF DIMENSION N.                      
                      (     ROMbasic.ASM):02023                                        
DBF6 CC0005           (     ROMbasic.ASM):02024         LB44F     LDD  #5             * 5 BYTES/ARRAY ENTRY SAVE AT COEFPT 
DBF9 DD64             (     ROMbasic.ASM):02025                   STD  COEFPT         * 
DBFB DC37             (     ROMbasic.ASM):02026                   LDD  VARNAM         = GET NAME OF ARRAY AND SAVE IN 
DBFD ED84             (     ROMbasic.ASM):02027                   STD  ,X             = FIRST 2 BYTES OF DESCRIPTOR 
DBFF D603             (     ROMbasic.ASM):02028                   LDB  TMPLOC         GET NUMBER OF DIMENSIONS AND SAVE IN 
DC01 E704             (     ROMbasic.ASM):02029                   STB  4,X            * 5TH BYTE OF DESCRIPTOR 
DC03 BDD413           (     ROMbasic.ASM):02030                   JSR  LAC33          CHECK FOR ROOM FOR DESCRIPTOR IN FREE RAM 
DC06 9F41             (     ROMbasic.ASM):02031                   STX  V41            TEMPORARILY SAVE DESCRIPTOR ADDRESS 
DC08 C60B             (     ROMbasic.ASM):02032         LB461     LDB  #11            * DEFAULT DIMENSION VALUE:X(10) 
DC0A 4F               (     ROMbasic.ASM):02033                   CLRA                * 
DC0B 0D05             (     ROMbasic.ASM):02034                   TST  DIMFLG         = CHECK ARRAY FLAG AND BRANCH IF 
DC0D 2705             (     ROMbasic.ASM):02035                   BEQ  LB46D          = NOT DIMENSIONING AN ARRAY 
DC0F 3506             (     ROMbasic.ASM):02036                   PULS A,B            GET DIMENSION LENGTH 
DC11 C30001           (     ROMbasic.ASM):02037                   ADDD #1             ADD ONE (X(0) HAS A LENGTH OF ONE) 
DC14 ED05             (     ROMbasic.ASM):02038         LB46D     STD  5,X            SAVE LENGTH OF ARRAY DIMENSION 
DC16 8D5D             (     ROMbasic.ASM):02039                   BSR  LB4CE          MULTIPLY ACCUM ARRAY SIZE NUMBER LENGTH 
                      (     ROMbasic.ASM):02040         ;                             OF NEW DIMENSION 
DC18 DD64             (     ROMbasic.ASM):02041                   STD  COEFPT         TEMP STORE NEW CURRENT ACCUMULATED ARRAY SIZE 
DC1A 3002             (     ROMbasic.ASM):02042                   LEAX 2,X            BUMP POINTER UP TWO 
DC1C 0A03             (     ROMbasic.ASM):02043                   DEC  TMPLOC         * DECREMENT DIMENSION COUNTER AND BRANCH IF 
DC1E 26E8             (     ROMbasic.ASM):02044                   BNE  LB461          * NOT DONE WITH ALL DIMENSIONS 
DC20 9F0F             (     ROMbasic.ASM):02045                   STX  TEMPTR         SAVE ADDRESS OF (END OF ARRAY DESCRIPTOR - 5) 
DC22 D30F             (     ROMbasic.ASM):02046                   ADDD TEMPTR         ADD TOTAL SIZE OF NEW ARRAY 
DC24 1025F7FC         (     ROMbasic.ASM):02047                   LBCS LAC44          ‘OM’ ERROR IF > $FFFF 
DC28 1F01             (     ROMbasic.ASM):02048                   TFR  D,X            SAVE END OF ARRAY IN X 
DC2A BDD417           (     ROMbasic.ASM):02049                   JSR  LAC37          MAKE SURE THERE IS ENOUGH FREE RAM FOR ARRAY 
DC2D 830035           (     ROMbasic.ASM):02050                   SUBD #STKBUF-5      SUBTRACT OUT THE (STACK BUFFER - 5) 
DC30 DD1F             (     ROMbasic.ASM):02051                   STD  ARYEND         SAVE NEW END OF ARRAYS 
DC32 4F               (     ROMbasic.ASM):02052                   CLRA                ZERO = TERMINATOR BYTE 
DC33 301F             (     ROMbasic.ASM):02053         LB48C     LEAX -1,X           * STORE TWO TERMINATOR BYTES AT 
DC35 A705             (     ROMbasic.ASM):02054                   STA  5,X            * THE END OF THE ARRAY DESCRIPTOR 
DC37 9C0F             (     ROMbasic.ASM):02055                   CMPX TEMPTR         * 
DC39 26F8             (     ROMbasic.ASM):02056                   BNE  LB48C          * 
DC3B 9E41             (     ROMbasic.ASM):02057                   LDX  V41            GET ADDRESS OF START OF DESCRIPTOR 
DC3D 961F             (     ROMbasic.ASM):02058                   LDA  ARYEND         GET MSB OF END OF ARRAYS; LSB ALREADY THERE 
DC3F 9341             (     ROMbasic.ASM):02059                   SUBD V41            SUBTRACT OUT ADDRESS OF START OF DESCRIPTOR 
DC41 ED02             (     ROMbasic.ASM):02060                   STD  2,X            SAVE LENGTH OF (ARRAY AND DESCRIPTOR) 
DC43 9605             (     ROMbasic.ASM):02061                   LDA  DIMFLG         * GET ARRAY FLAG AND BRANCH 
DC45 262D             (     ROMbasic.ASM):02062                   BNE  LB4CD          * BACK IF DIMENSIONING 
                      (     ROMbasic.ASM):02063         ; CALCULATE POINTER TO CORRECT ELEMENT                      
DC47 E604             (     ROMbasic.ASM):02064         LB4A0     LDB  4,X            GET THE NUMBER OF DIMENSIONS 
DC49 D703             (     ROMbasic.ASM):02065                   STB  TMPLOC         TEMPORARILY SAVE 
DC4B 4F               (     ROMbasic.ASM):02066                   CLRA                * INITIALIZE POINTER 
DC4C 5F               (     ROMbasic.ASM):02067                   CLRB                * TO ZERO 
DC4D DD64             (     ROMbasic.ASM):02068         LB4A6     STD  COEFPT         SAVE ACCUMULATED POINTER 
DC4F 3506             (     ROMbasic.ASM):02069                   PULS A,B            * PULL DIMENSION ARGUMENT OFF THE 
DC51 DD52             (     ROMbasic.ASM):02070                   STD  FPA0+2         * STACK AND SAVE IT 
DC53 10A305           (     ROMbasic.ASM):02071                   CMPD 5,X            COMPARE TO STORED ‘DIM’ ARGUMENT 
DC56 243A             (     ROMbasic.ASM):02072                   BCC  LB4EB          ‘BS’ ERROR IF > = "DIM" ARGUMENT 
DC58 DE64             (     ROMbasic.ASM):02073                   LDU  COEFPT         * GET ACCUMULATED POINTER AND 
DC5A 2704             (     ROMbasic.ASM):02074                   BEQ  LB4B9          * BRANCH IF 1ST DIMENSION 
DC5C 8D17             (     ROMbasic.ASM):02075                   BSR  LB4CE          = MULTIPLY ACCUMULATED POINTER AND DIMENSION 
DC5E D352             (     ROMbasic.ASM):02076                   ADDD FPA0+2         = LENGTH AND ADD TO CURRENT ARGUMENT 
DC60 3002             (     ROMbasic.ASM):02077         LB4B9     LEAX 2,X            MOVE POINTER TO NEXT DIMENSION 
DC62 0A03             (     ROMbasic.ASM):02078                   DEC  TMPLOC         * DECREMENT DIMENSION COUNTER AND 
DC64 26E7             (     ROMbasic.ASM):02079                   BNE  LB4A6          * BRANCH IF ANY DIMENSIONS LEFT 
                      (     ROMbasic.ASM):02080         ; MULTIPLY ACCD BY 5 - 5 BYTES/ARRAY VALUE                      
DC66 EDE3             (     ROMbasic.ASM):02081                   STD  ,--S            
DC68 58               (     ROMbasic.ASM):02082                   ASLB                 
DC69 49               (     ROMbasic.ASM):02083                   ROLA                TIMES 2 
DC6A 58               (     ROMbasic.ASM):02084                   ASLB                 
DC6B 49               (     ROMbasic.ASM):02085                   ROLA                TIMES 4 
DC6C E3E1             (     ROMbasic.ASM):02086                   ADDD ,S++           TIMES 5 
DC6E 308B             (     ROMbasic.ASM):02087                   LEAX D,X            ADD OFFSET TO START OF ARRAY 
DC70 3005             (     ROMbasic.ASM):02088                   LEAX 5,X            ADJUST POINTER FOR SIZE OF DESCRIPTOR 
DC72 9F39             (     ROMbasic.ASM):02089                   STX  VARPTR         SAVE POINTER TO ARRAY VALUE 
DC74 39               (     ROMbasic.ASM):02090         LB4CD     RTS                  
                      (     ROMbasic.ASM):02091         ; MULTIPLY 2 BYTE NUMBER IN 5,X BY THE 2 BYTE NUMBER                      
                      (     ROMbasic.ASM):02092         ; IN COEFPT. RETURN RESULT IN ACCD, BS ERROR IF > $FFFF                      
DC75 8610             (     ROMbasic.ASM):02093         LB4CE     LDA  #16            16 SHIFTS TO DO A MULTIPLY 
DC77 9745             (     ROMbasic.ASM):02094                   STA  V45            SHIFT COUNTER 
DC79 EC05             (     ROMbasic.ASM):02095                   LDD  5,X            * GET SIZE OF DIMENSION 
DC7B DD17             (     ROMbasic.ASM):02096                   STD  BOTSTK         * AND SAVE IT 
DC7D 4F               (     ROMbasic.ASM):02097                   CLRA                * ZERO 
DC7E 5F               (     ROMbasic.ASM):02098                   CLRB                * ACCD 
DC7F 58               (     ROMbasic.ASM):02099         LB4D8     ASLB                = SHIFT ACCB LEFT 
DC80 49               (     ROMbasic.ASM):02100                   ROLA                = ONE BIT 
DC81 250F             (     ROMbasic.ASM):02101                   BCS  LB4EB          BS' ERROR IF CARRY 
DC83 0865             (     ROMbasic.ASM):02102                   ASL  COEFPT+1       * SHIFT MULTIPLICAND LEFT ONE 
DC85 0964             (     ROMbasic.ASM):02103                   ROL  COEFPT         * BIT - ADD MULTIPLIER TO ACCUMULATOR 
DC87 2404             (     ROMbasic.ASM):02104                   BCC  LB4E6          * IF CARRY <> 0 
DC89 D317             (     ROMbasic.ASM):02105                   ADDD BOTSTK         ADD MULTIPLIER TO ACCD 
DC8B 2505             (     ROMbasic.ASM):02106                   BCS  LB4EB          BS' ERROR IF CARRY (>$FFFF) 
DC8D 0A45             (     ROMbasic.ASM):02107         LB4E6     DEC  V45            * DECREMENT SHIFT COUNTER 
DC8F 26EE             (     ROMbasic.ASM):02108                   BNE  LB4D8          * IF NOT DONE 
DC91 39               (     ROMbasic.ASM):02109                   RTS                  
DC92 7EDBEE           (     ROMbasic.ASM):02110         LB4EB     JMP  LB447          BS' ERROR 
                      (     ROMbasic.ASM):02111         ;                              
                      (     ROMbasic.ASM):02112         ; MEM                          
                      (     ROMbasic.ASM):02113         ; THIS IS NOT A TRUE INDICATOR OF FREE MEMORY BECAUSE                      
                      (     ROMbasic.ASM):02114         ; BASIC REQUIRES A STKBUF SIZE BUFFER FOR THE STACK                      
                      (     ROMbasic.ASM):02115         ; FOR WHICH MEM DOES NOT ALLOW.                      
                      (     ROMbasic.ASM):02116         ;                              
DC95 1F40             (     ROMbasic.ASM):02117         MEM       TFR  S,D            PUT STACK POINTER INTO ACCD 
DC97 931F             (     ROMbasic.ASM):02118                   SUBD ARYEND         SUBTRACT END OF ARRAYS 
DC99 21               (     ROMbasic.ASM):02119                   FCB  SKP1           SKIP ONE BYTE 
                      (     ROMbasic.ASM):02120         ;CONVERT THE VALUE IN ACCB INTO A FP NUMBER IN FPA0                      
DC9A 4F               (     ROMbasic.ASM):02121         LB4F3     CLRA                CLEAR MS BYTE OF ACCD 
                      (     ROMbasic.ASM):02122         ; CONVERT THE VALUE IN ACCD INTO A FLOATING POINT NUMBER IN FPA0                      
DC9B 0F06             (     ROMbasic.ASM):02123         GIVABF    CLR  VALTYP         SET VARIABLE TYPE TO NUMERIC 
DC9D DD50             (     ROMbasic.ASM):02124                   STD  FPA0           SAVE ACCD IN TOP OF FACA 
DC9F C690             (     ROMbasic.ASM):02125                   LDB  #$90           EXPONENT REQUIRED IF THE TOP TWO BYTES 
                      (     ROMbasic.ASM):02126         ;         OF   FPA0 ARE TO BE TREATED AS AN INTEGER IN FPA0  
DCA1 7EE6E9           (     ROMbasic.ASM):02127                   JMP  LBC82          CONVERT THE REST OF FPA0 TO AN INTEGER 
                      (     ROMbasic.ASM):02128                                        
                      (     ROMbasic.ASM):02129         ; STR$                         
DCA4 BDD8EF           (     ROMbasic.ASM):02130         STR       JSR  LB143          TM' ERROR IF STRING VARIABLE 
DCA7 CE01F0           (     ROMbasic.ASM):02131                   LDU  #STRBUF+2      *CONVERT FP NUMBER TO ASCII STRING IN 
DCAA BDE843           (     ROMbasic.ASM):02132                   JSR  LBDDC          *THE STRING BUFFER 
DCAD 3262             (     ROMbasic.ASM):02133                   LEAS 2,S            PURGE THE RETURN ADDRESS FROM THE STACK 
DCAF 8E01EF           (     ROMbasic.ASM):02134                   LDX  #STRBUF+1      *POINT X TO STRING BUFFER AND SAVE 
DCB2 200B             (     ROMbasic.ASM):02135                   BRA  LB518          *THE STRING IN THE STRING SPACE 
                      (     ROMbasic.ASM):02136         ; RESERVE ACCB BYTES OF STRING SPACE. RETURN START                      
                      (     ROMbasic.ASM):02137         ; ADDRESS IN (X) AND FRESPC                      
DCB4 9F4D             (     ROMbasic.ASM):02138         LB50D     STX  V4D            SAVE X IN V4D 
DCB6 8D5C             (     ROMbasic.ASM):02139         LB50F     BSR  LB56D          RESERVE ACCB BYTES IN STRING SPACE 
DCB8 9F58             (     ROMbasic.ASM):02140         LB511     STX  STRDES+2       SAVE NEW STRING ADDRESS 
DCBA D756             (     ROMbasic.ASM):02141                   STB  STRDES         SAVE LENGTH OF RESERVED BLOCK 
DCBC 39               (     ROMbasic.ASM):02142                   RTS                  
DCBD 301F             (     ROMbasic.ASM):02143         LB516     LEAX -1,X           MOVE POINTER BACK ONE 
                      (     ROMbasic.ASM):02144         ; SCAN A LINE FROM (X) UNTIL AN END OF LINE FLAG (ZERO) OR                      
                      (     ROMbasic.ASM):02145         ; EITHER OF THE TWO TERMINATORS STORED IN CHARAC OR ENDCHR IS MATCHED.                      
                      (     ROMbasic.ASM):02146         ; THE RESULTING STRING IS STORED IN THE STRING SPACE                      
                      (     ROMbasic.ASM):02147         ; ONLY IF THE START OF THE STRING IS <= STRBUF+2                      
DCBF 8622             (     ROMbasic.ASM):02148         LB518     LDA  #'"            * INITIALIZE 
DCC1 9701             (     ROMbasic.ASM):02149                   STA  CHARAC         * TERMINATORS 
DCC3 9702             (     ROMbasic.ASM):02150         LB51A     STA  ENDCHR         * TO " 
DCC5 3001             (     ROMbasic.ASM):02151         LB51E     LEAX 1,X            MOVE POINTER UP ONE 
DCC7 9F62             (     ROMbasic.ASM):02152                   STX  RESSGN         TEMPORARILY SAVE START OF STRING 
DCC9 9F58             (     ROMbasic.ASM):02153                   STX  STRDES+2       SAVE START OF STRING IN TEMP DESCRIPTOR 
DCCB C6FF             (     ROMbasic.ASM):02154                   LDB  #-1            INITIALIZE CHARACTER COUNTER TO - 1 
DCCD 5C               (     ROMbasic.ASM):02155         LB526     INCB                INCREMENT CHARACTER COUNTER 
DCCE A680             (     ROMbasic.ASM):02156                   LDA  ,X+            GET CHARACTER 
DCD0 270C             (     ROMbasic.ASM):02157                   BEQ  LB537          BRANCH IF END OF LINE 
DCD2 9101             (     ROMbasic.ASM):02158                   CMPA CHARAC         * CHECK FOR TERMINATORS 
DCD4 2704             (     ROMbasic.ASM):02159                   BEQ  LB533          * IN CHARAC AND ENDCHR 
DCD6 9102             (     ROMbasic.ASM):02160                   CMPA ENDCHR         * DON’T MOVE POINTER BACK 
DCD8 26F3             (     ROMbasic.ASM):02161                   BNE  LB526          * ONE IF TERMINATOR IS "MATCHED" 
DCDA 8122             (     ROMbasic.ASM):02162         LB533     CMPA #'"            = COMPARE CHARACTER TO STRING DELIMITER 
DCDC 2702             (     ROMbasic.ASM):02163                   BEQ  LB539          = & DON’T MOVE POINTER BACK IF SO 
DCDE 301F             (     ROMbasic.ASM):02164         LB537     LEAX -1,X           MOVE POINTER BACK ONE 
DCE0 9F64             (     ROMbasic.ASM):02165         LB539     STX  COEFPT         SAVE END OF STRING ADDRESS 
DCE2 D756             (     ROMbasic.ASM):02166                   STB  STRDES         SAVE STRING LENGTH IN TEMP DESCRIPTOR 
DCE4 DE62             (     ROMbasic.ASM):02167                   LDU  RESSGN         GET INITlAL STRING START 
DCE6 118301F0         (     ROMbasic.ASM):02168                   CMPU #STRBUF+2      COMPARE TO START OF STRING BUFFER 
DCEA 2207             (     ROMbasic.ASM):02169         LB543     BHI  LB54C          BRANCH IF > START OF STRING BUFFER 
DCEC 8DC6             (     ROMbasic.ASM):02170                   BSR  LB50D          GO RESERVE SPACE FOR THE STRING 
DCEE 9E62             (     ROMbasic.ASM):02171                   LDX  RESSGN         POINT X TO THE BEGINNING OF THE STRING 
DCF0 BDDDEC           (     ROMbasic.ASM):02172                   JSR  LB645          MOVE (B) BYTES FROM (X) TO 
                      (     ROMbasic.ASM):02173         ;                             [FRESPC] - MOVE STRING DATA 
                      (     ROMbasic.ASM):02174         ; PUT DIRECT PAGE STRING DESCRIPTOR BUFFER DATA                      
                      (     ROMbasic.ASM):02175         ; ON THE STRING STACK. SET VARIABLE TYPE TO STRING                      
DCF3 9E0B             (     ROMbasic.ASM):02176         LB54C     LDX  TEMPPT         GET NEXT AVAILABLE STRING STACK DESCRIPTOR 
DCF5 8C00F1           (     ROMbasic.ASM):02177                   CMPX #LINHDR        COMPARE TO TOP OF STRING DESCRIPTOR STACK - WAS #CFNBUF 
DCF8 2605             (     ROMbasic.ASM):02178                   BNE  LB558          FORMULA O.K. 
DCFA C61E             (     ROMbasic.ASM):02179                   LDB  #15*2          STRING FORMULA TOO COMPLEX' ERROR 
DCFC 7ED426           (     ROMbasic.ASM):02180         LB555     JMP  LAC46          JUMP TO ERROR SERVICING ROUTINE 
DCFF 9656             (     ROMbasic.ASM):02181         LB558     LDA  STRDES         * GET LENGTH OF STRING AND SAVE IT 
                      (     ROMbasic.ASM):02182         ;         STA  ,X             * IN BYTE 0 OF DESCRIPTOR 
DD01 A700             (     ROMbasic.ASM):02183                   FCB  $A7,$00         
DD03 DC58             (     ROMbasic.ASM):02184                   LDD  STRDES+2       = GET START ADDRESS OF ACTUAL STRING 
DD05 ED02             (     ROMbasic.ASM):02185                   STD  2,X            = AND SAVE IN BYTES 2,3 OF DESCRIPTOR 
DD07 86FF             (     ROMbasic.ASM):02186                   LDA  #$FF           * VARIABLE TYPE = STRING 
DD09 9706             (     ROMbasic.ASM):02187                   STA  VALTYP         * SAVE IN VARIABLE TYPE FLAG 
DD0B 9F0D             (     ROMbasic.ASM):02188                   STX  LASTPT         = SAVE START OF DESCRIPTOR 
DD0D 9F52             (     ROMbasic.ASM):02189                   STX  FPA0+2         = ADDRESS IN LASTPT AND FPA0 
DD0F 3005             (     ROMbasic.ASM):02190                   LEAX 5,X            5 BYTES/STRING DESCRIPTOR 
DD11 9F0B             (     ROMbasic.ASM):02191                   STX  TEMPPT         NEXT AVAILABLE STRING VARIABLE DESCRIPTOR 
DD13 39               (     ROMbasic.ASM):02192                   RTS                  
                      (     ROMbasic.ASM):02193         ; RESERVE ACCB BYTES IN STRING STORAGE SPACE                      
                      (     ROMbasic.ASM):02194         ; RETURN WITH THE STARTING ADDRESS OF THE                      
                      (     ROMbasic.ASM):02195         ; RESERVED STRING SPACE IN (X) AND FRESPC                      
DD14 0F07             (     ROMbasic.ASM):02196         LB56D     CLR  GARBFL         CLEAR STRING REORGANIZATION FLAG 
DD16 4F               (     ROMbasic.ASM):02197         LB56F     CLRA                * PUSH THE LENGTH OF THE 
DD17 3406             (     ROMbasic.ASM):02198                   PSHS B,A            * STRING ONTO THE STACK 
DD19 DC23             (     ROMbasic.ASM):02199                   LDD  STRTAB         GET START OF STRING VARIABLES 
DD1B A3E0             (     ROMbasic.ASM):02200                   SUBD ,S+            SUBTRACT STRING LENGTH 
DD1D 109321           (     ROMbasic.ASM):02201                   CMPD FRETOP         COMPARE TO START OF STRING STORAGE 
DD20 250A             (     ROMbasic.ASM):02202                   BCS  LB585          IF BELOW START, THEN REORGANIZE 
DD22 DD23             (     ROMbasic.ASM):02203                   STD  STRTAB         SAVE NEW START OF STRING VARIABLES 
DD24 9E23             (     ROMbasic.ASM):02204                   LDX  STRTAB         GET START OF STRING VARIABLES 
DD26 3001             (     ROMbasic.ASM):02205                   LEAX 1,X            ADD ONE 
DD28 9F25             (     ROMbasic.ASM):02206                   STX  FRESPC         SAVE START ADDRESS OF NEWLY RESERVED SPACE 
DD2A 3584             (     ROMbasic.ASM):02207                   PULS B,PC           RESTORE NUMBER OF BYTES RESERVED AND RETURN 
DD2C C61A             (     ROMbasic.ASM):02208         LB585     LDB  #2*13          OUT OF STRING SPACE' ERROR 
DD2E 0307             (     ROMbasic.ASM):02209                   COM  GARBFL         TOGGLE REORGANIZATiON FLAG 
DD30 27CA             (     ROMbasic.ASM):02210                   BEQ  LB555          ERROR IF FRESHLY REORGANIZED 
DD32 8D04             (     ROMbasic.ASM):02211                   BSR  LB591          GO REORGANIZE STRING SPACE 
DD34 3504             (     ROMbasic.ASM):02212                   PULS B              GET BACK THE NUMBER OF BYTES TO RESERVE 
DD36 20DE             (     ROMbasic.ASM):02213                   BRA  LB56F          TRY TO RESERVE ACCB BYTES AGAIN 
                      (     ROMbasic.ASM):02214         ; REORGANIZE THE STRING SPACE                      
DD38 9E27             (     ROMbasic.ASM):02215         LB591     LDX  MEMSIZ         GET THE TOP OF STRING SPACE 
DD3A 9F23             (     ROMbasic.ASM):02216         LB593     STX  STRTAB         SAVE TOP OF UNORGANIZED STRING SPACE 
DD3C 4F               (     ROMbasic.ASM):02217                   CLRA                * ZERO OUT ACCD 
DD3D 5F               (     ROMbasic.ASM):02218                   CLRB                * AND RESET VARIABLE 
DD3E DD4B             (     ROMbasic.ASM):02219                   STD  V4B            * POINTER TO 0 
DD40 9E21             (     ROMbasic.ASM):02220                   LDX  FRETOP         POINT X TO START OF STRING SPACE 
DD42 9F47             (     ROMbasic.ASM):02221                   STX  V47            SAVE POINTER IN V47 
DD44 8E00C9           (     ROMbasic.ASM):02222                   LDX  #STRSTK        POINT X TO START OF STRING DESCRIPTOR STACK 
DD47 9C0B             (     ROMbasic.ASM):02223         LB5A0     CMPX TEMPPT         COMPARE TO ADDRESS OF NEXT AVAILABLE DESCRIPTOR 
DD49 2704             (     ROMbasic.ASM):02224                   BEQ  LB5A8          BRANCH IF TOP OF STRING STACK 
DD4B 8D32             (     ROMbasic.ASM):02225                   BSR  LB5D8          CHECK FOR STRING IN UNORGANIZED STRING SPACE 
DD4D 20F8             (     ROMbasic.ASM):02226                   BRA  LB5A0          KEEP CHECKING 
DD4F 9E1B             (     ROMbasic.ASM):02227         LB5A8     LDX  VARTAB         GET THE END OF BASIC PROGRAM 
DD51 9C1D             (     ROMbasic.ASM):02228         LB5AA     CMPX ARYTAB         COMPARE TO END OF VARIABLES 
DD53 2704             (     ROMbasic.ASM):02229                   BEQ  LB5B2          BRANCH IF AT TOP OF VARIABLES 
DD55 8D22             (     ROMbasic.ASM):02230                   BSR  LB5D2          CHECK FOR STRING IN UNORGANIZED STRING SPACE 
DD57 20F8             (     ROMbasic.ASM):02231                   BRA  LB5AA          KEEP CHECKING VARIABLES 
DD59 9F41             (     ROMbasic.ASM):02232         LB5B2     STX  V41            SAVE ADDRESS OF THE END OF VARIABLES 
DD5B 9E41             (     ROMbasic.ASM):02233         LB5B4     LDX  V41            GET CURRENT ARRAY POINTER 
DD5D 9C1F             (     ROMbasic.ASM):02234         LB5B6     CMPX ARYEND         COMPARE TO THE END OF ARRAYS 
DD5F 2735             (     ROMbasic.ASM):02235                   BEQ  LB5EF          BRANCH IF AT END OF ARRAYS 
DD61 EC02             (     ROMbasic.ASM):02236                   LDD  2,X            GET LENGTH OF ARRAY AND DESCRIPTOR 
DD63 D341             (     ROMbasic.ASM):02237                   ADDD V41            * ADD TO CURRENT ARRAY POINTER 
DD65 DD41             (     ROMbasic.ASM):02238                   STD  V41            * AND SAVE IT 
DD67 A601             (     ROMbasic.ASM):02239                   LDA  1,X            GET 1ST CHARACTER OF VARIABLE NAME 
DD69 2AF0             (     ROMbasic.ASM):02240                   BPL  LB5B4          BRANCH IF NUMERIC ARRAY 
DD6B E604             (     ROMbasic.ASM):02241                   LDB  4,X            GET THE NUMBER OF DIMENSIONS IN THIS ARRAY 
DD6D 58               (     ROMbasic.ASM):02242                   ASLB                MULTIPLY BY 2 
DD6E CB05             (     ROMbasic.ASM):02243                   ADDB #5             ADD FIVE BYTES (VARIABLE NAME, ARRAY 
                      (     ROMbasic.ASM):02244         ;                             LENGTH, NUMBER DIMENSIONS) 
DD70 3A               (     ROMbasic.ASM):02245                   ABX                 X NOW POINTS TO START OF ARRAY ELEMENTS 
DD71 9C41             (     ROMbasic.ASM):02246         LB5CA     CMPX V41            AT END OF THIS ARRAY? 
DD73 27E8             (     ROMbasic.ASM):02247                   BEQ  LB5B6          YES - CHECK FOR ANOTHER 
DD75 8D08             (     ROMbasic.ASM):02248                   BSR  LB5D8          CHECK FOR STRING LOCATED IN 
                      (     ROMbasic.ASM):02249         ;                             UNORGANIZED STRING SPACE 
DD77 20F8             (     ROMbasic.ASM):02250                   BRA  LB5CA          KEEP CHECKING ELEMENTS IN THIS ARRAY 
DD79 A601             (     ROMbasic.ASM):02251         LB5D2     LDA  1,X            GET F1RST BYTE OF VARIABLE NAME 
DD7B 3002             (     ROMbasic.ASM):02252                   LEAX 2,X            MOVE POINTER TO DESCRIPTOR 
DD7D 2A14             (     ROMbasic.ASM):02253                   BPL  LB5EC          BRANCH IF VARIABLE IS NUMERIC 
                      (     ROMbasic.ASM):02254         ; SEARCH FOR STRING - ENTER WITH X POINTING TO                      
                      (     ROMbasic.ASM):02255         ; THE STRING DESCRIPTOR. IF STRING IS STORED                      
                      (     ROMbasic.ASM):02256         ; BETWEEN V47 AND STRTAB, SAVE DESCRIPTOR POINTER                      
                      (     ROMbasic.ASM):02257         ; IN V4B AND RESET V47 TO STRING ADDRESS                      
DD7F E684             (     ROMbasic.ASM):02258         LB5D8     LDB  ,X             GET THE LENGTH OF THE STRING 
DD81 2710             (     ROMbasic.ASM):02259                   BEQ  LB5EC          BRANCH IF NULL - NO STRING 
DD83 EC02             (     ROMbasic.ASM):02260                   LDD  2,X            GET STARTING ADDRESS OF THE STRING 
DD85 109323           (     ROMbasic.ASM):02261                   CMPD STRTAB         COMPARE TO THE START OF STRING VARIABLES 
DD88 2209             (     ROMbasic.ASM):02262                   BHI  LB5EC          BRANCH IF THIS STRING IS STORED IN 
                      (     ROMbasic.ASM):02263         ;              THE STRING VARIABLES  
DD8A 109347           (     ROMbasic.ASM):02264                   CMPD V47            COMPARE TO START OF STRING SPACE 
DD8D 2304             (     ROMbasic.ASM):02265                   BLS  LB5EC          BRANCH IF NOT STORED IN THE STRING SPACE 
DD8F 9F4B             (     ROMbasic.ASM):02266                   STX  V4B            SAVE VARIABLE POINTER IF STORED IN STRING SPACE 
DD91 DD47             (     ROMbasic.ASM):02267                   STD  V47            SAVE STRING STARTING ADDRESS 
DD93 3005             (     ROMbasic.ASM):02268         LB5EC     LEAX 5,X            MOVE TO NEXT VARIABLE DESCRIPTOR 
DD95 39               (     ROMbasic.ASM):02269         LB5EE     RTS                  
DD96 9E4B             (     ROMbasic.ASM):02270         LB5EF     LDX  V4B            GET ADDRESS OF THE DESCRIPTOR FOR THE 
                      (     ROMbasic.ASM):02271         ;              STRING WHICH IS STORED IN THE HIGHEST RAM ADDRESS IN  
                      (     ROMbasic.ASM):02272         ;              THE UNORGANIZED STRING SPACE  
DD98 27FB             (     ROMbasic.ASM):02273                   BEQ  LB5EE          BRANCH IF NONE FOUND AND REORGANIZATION DONE 
DD9A 4F               (     ROMbasic.ASM):02274                   CLRA                CLEAR MS BYTE OF LENGTH 
DD9B E684             (     ROMbasic.ASM):02275                   LDB  ,X             GET LENGTH OF STRING 
DD9D 5A               (     ROMbasic.ASM):02276                   DECB                SUBTRACT ONE 
DD9E D347             (     ROMbasic.ASM):02277                   ADDD V47            ADD LENGTH OF STRING TO ITS STARTING ADDRESS 
DDA0 DD43             (     ROMbasic.ASM):02278                   STD  V43            SAVE AS MOVE STARTING ADDRESS 
DDA2 9E23             (     ROMbasic.ASM):02279                   LDX  STRTAB         POINT X TO THE START OF ORGANIZED STRING VARIABLES 
DDA4 9F41             (     ROMbasic.ASM):02280                   STX  V41            SAVE AS MOVE ENDING ADDRESS 
DDA6 BDD400           (     ROMbasic.ASM):02281                   JSR  LAC20          MOVE STRING FROM CURRENT POSITION TO THE 
                      (     ROMbasic.ASM):02282         ;              TOP OF UNORGANIZED STRING SPACE  
DDA9 9E4B             (     ROMbasic.ASM):02283                   LDX  V4B            POINT X TO STRING DESCRIPTOR 
DDAB DC45             (     ROMbasic.ASM):02284                   LDD  V45            * GET NEW STARTING ADDRESS OF STRING AND 
DDAD ED02             (     ROMbasic.ASM):02285                   STD  2,X            * SAVE IT IN DESCRIPTOR 
DDAF 9E45             (     ROMbasic.ASM):02286                   LDX  V45            GET NEW TOP OF UNORGANIZED STRING SPACE 
DDB1 301F             (     ROMbasic.ASM):02287                   LEAX -1,X           MOVE POINTER BACK ONE 
DDB3 7EDD3A           (     ROMbasic.ASM):02288                   JMP  LB593          JUMP BACK AND REORGANIZE SOME MORE 
                      (     ROMbasic.ASM):02289                                        
                      (     ROMbasic.ASM):02290                                        
DDB6 DC52             (     ROMbasic.ASM):02291         LB60F     LDD  FPA0+2         * GET DESCRIPTOR ADDRESS OF STRING A 
DDB8 3406             (     ROMbasic.ASM):02292                   PSHS B,A            * AND SAVE IT ON THE STACK 
DDBA BDD9CF           (     ROMbasic.ASM):02293                   JSR  LB223          GET DESCRIPTOR ADDRESS OF STRING B 
DDBD BDD8F2           (     ROMbasic.ASM):02294                   JSR  LB146          TM' ERROR IF NUMERIC VARIABLE 
DDC0 3510             (     ROMbasic.ASM):02295                   PULS X              * POINT X TO STRING A DESCRIPTOR 
DDC2 9F62             (     ROMbasic.ASM):02296                   STX  RESSGN         * ADDRESS AND SAVE IT IN RESSGN 
DDC4 E684             (     ROMbasic.ASM):02297                   LDB  ,X             GET LENGTH OF STRING A 
DDC6 9E52             (     ROMbasic.ASM):02298                   LDX  FPA0+2         POINT X TO DESCRIPTOR OF STRING B 
DDC8 EB84             (     ROMbasic.ASM):02299                   ADDB ,X             ADD LENGTH OF STRING B TO STR1NG A 
DDCA 2405             (     ROMbasic.ASM):02300                   BCC  LB62A          BRANCH IF LENGTH < 256 
DDCC C61C             (     ROMbasic.ASM):02301                   LDB  #2*14          STRING TOO LONG' ERROR IF LENGTH > 255 
DDCE 7ED426           (     ROMbasic.ASM):02302                   JMP  LAC46          JUMP TO ERROR SERVICING ROUTINE 
DDD1 BDDCB4           (     ROMbasic.ASM):02303         LB62A     JSR  LB50D          RESERVE ROOM IN STRING SPACE FOR NEW STRING 
DDD4 9E62             (     ROMbasic.ASM):02304                   LDX  RESSGN         GET DESCRIPTOR ADDRESS OF STRING A 
DDD6 E684             (     ROMbasic.ASM):02305                   LDB  ,X             GET LENGTH OF STRING A 
DDD8 8D10             (     ROMbasic.ASM):02306                   BSR  LB643          MOVE STRING A INTO RESERVED BUFFER IN STRING SPACE 
DDDA 9E4D             (     ROMbasic.ASM):02307                   LDX  V4D            GET DESCRIPTOR ADDRESS OF STRING B 
DDDC 8D22             (     ROMbasic.ASM):02308                   BSR  LB659          GET LENGTH AND ADDRESS OF STRING B 
DDDE 8D0C             (     ROMbasic.ASM):02309                   BSR  LB645          MOVE STRING B INTO REST OF RESERVED BUFFER 
DDE0 9E62             (     ROMbasic.ASM):02310                   LDX  RESSGN         POINT X TO DESCRIPTOR OF STRING A 
DDE2 8D1C             (     ROMbasic.ASM):02311                   BSR  LB659          DELETE STRING A IF LAST STRING ON STRING STACK 
DDE4 BDDCF3           (     ROMbasic.ASM):02312                   JSR  LB54C          PUT STRING DESCRIPTOR ON THE STRING STACK 
DDE7 7ED914           (     ROMbasic.ASM):02313                   JMP  LB168          BRANCH BACK TO EXPRESSION EVALUATION 
                      (     ROMbasic.ASM):02314                                        
                      (     ROMbasic.ASM):02315         ; MOVE (B) BYTES FROM 2,X TO FRESPC                      
DDEA AE02             (     ROMbasic.ASM):02316         LB643     LDX  2,X            POINT X TO SOURCE ADDRESS 
DDEC DE25             (     ROMbasic.ASM):02317         LB645     LDU  FRESPC         POINT U TO DESTINATION ADDRESS 
DDEE 5C               (     ROMbasic.ASM):02318                   INCB                COMPENSATION FOR THE DECB BELOW 
DDEF 2004             (     ROMbasic.ASM):02319                   BRA  LB64E          GO MOVE THE BYTES 
                      (     ROMbasic.ASM):02320         ; MOVE B BYTES FROM (X) TO (U)                      
DDF1 A680             (     ROMbasic.ASM):02321         LB64A     LDA  ,X+            * GET A SOURCE BYTE AND MOVE IT 
DDF3 A7C0             (     ROMbasic.ASM):02322                   STA  ,U+            * TO THE DESTINATION 
DDF5 5A               (     ROMbasic.ASM):02323         LB64E     DECB                DECREMENT BYTE COUNTER 
DDF6 26F9             (     ROMbasic.ASM):02324                   BNE  LB64A          BRANCH IF ALL BYTES NOT MOVED 
DDF8 DF25             (     ROMbasic.ASM):02325                   STU  FRESPC         SAVE ENDING ADDRESS IN FRESPC 
DDFA 39               (     ROMbasic.ASM):02326                   RTS                  
                      (     ROMbasic.ASM):02327         ; RETURN LENGTH (ACCB) AND ADDRESS (X) OF                      
                      (     ROMbasic.ASM):02328         ; STRING WHOSE DESCRIPTOR IS IN FPA0+2                      
                      (     ROMbasic.ASM):02329         ; DELETE THE STRING IF IT IS THE LAST ONE                      
                      (     ROMbasic.ASM):02330         ; PUT ON THE STRING STACK. REMOVE STRING FROM STRING                      
                      (     ROMbasic.ASM):02331         ; SPACE IF IT IS AT THE BOTTOM OF STRING VARIABLES.                      
DDFB BDD8F2           (     ROMbasic.ASM):02332         LB654     JSR  LB146          TM' ERROR IF VARIABLE TYPE = NUMERIC 
DDFE 9E52             (     ROMbasic.ASM):02333         LB657     LDX  FPA0+2         GET ADDRESS OF SELECTED STRING DESCRIPTOR 
DE00 E684             (     ROMbasic.ASM):02334         LB659     LDB  ,X             GET LENGTH OF STRING 
DE02 8D18             (     ROMbasic.ASM):02335                   BSR  LB675          * CHECK TO SEE IF THIS STRING DESCRIPTOR WAS 
DE04 2613             (     ROMbasic.ASM):02336                   BNE  LB672          * THE LAST ONE PUT ON THE STRING STACK AND 
                      (     ROMbasic.ASM):02337         ;                             * BRANCH IF NOT 
DE06 AE07             (     ROMbasic.ASM):02338                   LDX  5+2,X          GET START ADDRESS OF STRING JUST REMOVED 
DE08 301F             (     ROMbasic.ASM):02339                   LEAX -1,X           MOVE POINTER DOWN ONE 
DE0A 9C23             (     ROMbasic.ASM):02340                   CMPX STRTAB         COMPARE TO START OF STRING VARIABLES 
DE0C 2608             (     ROMbasic.ASM):02341                   BNE  LB66F          BRANCH IF THIS STRING IS NOT AT THE BOTTOM 
                      (     ROMbasic.ASM):02342         ;                             OF STRING VARIABLES 
DE0E 3404             (     ROMbasic.ASM):02343                   PSHS B              SAVE LENGTH; ACCA WAS CLEARED 
DE10 D323             (     ROMbasic.ASM):02344                   ADDD STRTAB         * ADD THE LENGTH OF THE JUST REMOVED STRING 
DE12 DD23             (     ROMbasic.ASM):02345                   STD  STRTAB         * TO THE START OF STRING VARIABLES - THIS WILL 
                      (     ROMbasic.ASM):02346         ;                             * REMOVE THE STRING FROM THE STRING SPACE 
DE14 3504             (     ROMbasic.ASM):02347                   PULS B              RESTORE LENGTH 
DE16 3001             (     ROMbasic.ASM):02348         LB66F     LEAX 1,X            ADD ONE TO POINTER 
DE18 39               (     ROMbasic.ASM):02349                   RTS                  
DE19 AE02             (     ROMbasic.ASM):02350         LB672     LDX  2,X            *POINT X TO ADDRESS OF STRING NOT 
DE1B 39               (     ROMbasic.ASM):02351                   RTS                 *ON THE STRING STACK 
                      (     ROMbasic.ASM):02352         ; REMOVE STRING FROM STRING STACK. ENTER WITH X                      
                      (     ROMbasic.ASM):02353         ; POINTING TO A STRING DESCRIPTOR - DELETE THE                      
                      (     ROMbasic.ASM):02354         ; STRING FROM STACK IF IT IS ON TOP OF THE                      
                      (     ROMbasic.ASM):02355         ; STACK. IF THE STRING IS DELETED, SET THE ZERO FLAG                      
DE1C 9C0D             (     ROMbasic.ASM):02356         LB675     CMPX LASTPT         *COMPARE TO LAST USED DESCRIPTOR ADDRESS 
DE1E 2607             (     ROMbasic.ASM):02357                   BNE  LB680          *ON THE STRING STACK, RETURN IF DESCRIPTOR 
                      (     ROMbasic.ASM):02358         ;                             *ADDRESS NOT ON THE STRING STACK 
DE20 9F0B             (     ROMbasic.ASM):02359                   STX  TEMPPT         SAVE LAST USED DESCRIPTOR AS NEXT AVAILABLE 
DE22 301B             (     ROMbasic.ASM):02360                   LEAX -5,X           * MOVE LAST USED DESCRIPTOR BACK 5 BYTES 
DE24 9F0D             (     ROMbasic.ASM):02361                   STX  LASTPT         * AND SAVE AS THE LAST USED DESCRIPTOR ADDR 
DE26 4F               (     ROMbasic.ASM):02362                   CLRA                SET ZERO FLAG 
DE27 39               (     ROMbasic.ASM):02363         LB680     RTS                  
                      (     ROMbasic.ASM):02364                                        
                      (     ROMbasic.ASM):02365         ; LEN                          
DE28 8D03             (     ROMbasic.ASM):02366         LEN       BSR  LB686          POINT X TO PROPER STRING AND GET LENGTH 
DE2A 7EDC9A           (     ROMbasic.ASM):02367         LB683     JMP  LB4F3          CONVERT ACCB TO FP NUMBER IN FPA0 
                      (     ROMbasic.ASM):02368         ; POINT X TO STRING ADDRESS LOAD LENGTH INTO                      
                      (     ROMbasic.ASM):02369         ; ACCB. ENTER WITH THE STRING DESCRIPTOR IN                      
                      (     ROMbasic.ASM):02370         ; BOTTOM TWO BYTES OF FPA0                      
DE2D 8DCC             (     ROMbasic.ASM):02371         LB686     BSR  LB654          GET LENGTH AND ADDRESS OF STRING 
DE2F 0F06             (     ROMbasic.ASM):02372                   CLR  VALTYP         SET VARIABLE TYPE TO NUMERIC 
DE31 5D               (     ROMbasic.ASM):02373                   TSTB                SET FLAGS ACCORDING TO LENGTH 
DE32 39               (     ROMbasic.ASM):02374                   RTS                  
                      (     ROMbasic.ASM):02375                                        
                      (     ROMbasic.ASM):02376         ; CHR$                         
DE33 BDDEB5           (     ROMbasic.ASM):02377         CHR       JSR  LB70E          CONVERT FPA0 TO AN INTEGER IN ACCD 
DE36 C601             (     ROMbasic.ASM):02378         LB68F     LDB  #1             * RESERVE ONE BYTE IN 
DE38 BDDD14           (     ROMbasic.ASM):02379                   JSR  LB56D          * THE STRING SPACE 
DE3B 9653             (     ROMbasic.ASM):02380                   LDA  FPA0+3         GET ASCII STRING VALUE 
DE3D BDDCB8           (     ROMbasic.ASM):02381                   JSR  LB511          SAVE RESERVED STRING DESCRIPTOR IN TEMP DESCRIPTOR 
DE40 A784             (     ROMbasic.ASM):02382                   STA  ,X             SAVE THE STRING (IT’S ONLY ONE BYTE) 
DE42 3262             (     ROMbasic.ASM):02383         LB69B     LEAS 2,S            PURGE THE RETURN ADDRESS OFF OF THE STACK 
DE44 7EDCF3           (     ROMbasic.ASM):02384         LB69D     JMP  LB54C          PUT TEMP DESCRIPTOR DATA ONTO STRING STACK 
                      (     ROMbasic.ASM):02385                                        
                      (     ROMbasic.ASM):02386                                        
DE47 8D02             (     ROMbasic.ASM):02387         ASC       BSR  LB6A4          PUT 1ST CHARACTER OF STRING INTO ACCB 
DE49 20DF             (     ROMbasic.ASM):02388                   BRA  LB683          CONVERT ACCB INTO FP NUMBER IN FPA0 
DE4B 8DE0             (     ROMbasic.ASM):02389         LB6A4     BSR  LB686          POINT X TO STRING DESCRIPTOR 
DE4D 275E             (     ROMbasic.ASM):02390                   BEQ  LB706          FC' ERROR IF NULL STRING 
DE4F E684             (     ROMbasic.ASM):02391                   LDB  ,X             GET FIRST BYTE OF STRING 
DE51 39               (     ROMbasic.ASM):02392                   RTS                  
                      (     ROMbasic.ASM):02393                                        
                      (     ROMbasic.ASM):02394                                        
DE52 8D48             (     ROMbasic.ASM):02395         LEFT      BSR  LB6F5          GET ARGUMENTS FROM STACK 
DE54 4F               (     ROMbasic.ASM):02396         LB6AD     CLRA                CLEAR STRING POINTER OFFSET - OFFSET = 0 FOR LEFT$ 
DE55 E184             (     ROMbasic.ASM):02397         LB6AE     CMPB ,X             * COMPARE LENGTH PARAMETER TO LENGTH OF 
DE57 2303             (     ROMbasic.ASM):02398                   BLS  LB6B5          * STRING AND BRANCH IF LENGTH OF STRING 
                      (     ROMbasic.ASM):02399         ;                             >= LENGTH PARAMETER 
DE59 E684             (     ROMbasic.ASM):02400                   LDB  ,X             USE LENGTH OF STRING OTHERWISE 
DE5B 4F               (     ROMbasic.ASM):02401                   CLRA                CLEAR STRING POINTER OFFSET (0 FOR LEFT$) 
DE5C 3406             (     ROMbasic.ASM):02402         LB6B5     PSHS B,A            PUSH PARAMETERS ONTO STACK 
DE5E BDDCB6           (     ROMbasic.ASM):02403                   JSR  LB50F          RESERVE ACCB BYTES IN THE STRING SPACE 
DE61 9E4D             (     ROMbasic.ASM):02404                   LDX  V4D            POINT X TO STRING DESCRIPTOR 
DE63 8D9B             (     ROMbasic.ASM):02405                   BSR  LB659          GET ADDRESS OF OLD STRING (X=ADDRESS) 
DE65 3504             (     ROMbasic.ASM):02406                   PULS B              * PULL STRING POINTER OFFSET OFF OF THE STACK 
DE67 3A               (     ROMbasic.ASM):02407                   ABX                 * AND ADD IT TO STRING ADDRESS 
DE68 3504             (     ROMbasic.ASM):02408                   PULS B              PULL LENGTH PARAMETER OFF OF THE STACK 
DE6A BDDDEC           (     ROMbasic.ASM):02409                   JSR  LB645          MOVE ACCB BYTES FROM (X) TO [FRESPC] 
DE6D 20D5             (     ROMbasic.ASM):02410                   BRA  LB69D          PUT TEMP STRING DESCRIPTOR ONTO THE STRING STACK 
                      (     ROMbasic.ASM):02411                                        
                      (     ROMbasic.ASM):02412         ; RIGHT$                       
DE6F 8D2B             (     ROMbasic.ASM):02413         RIGHT     BSR  LB6F5          GET ARGUMENTS FROM STACK 
DE71 A084             (     ROMbasic.ASM):02414                   SUBA ,X             ACCA=LENGTH PARAMETER - LENGTH OF OLD STRING 
DE73 40               (     ROMbasic.ASM):02415                   NEGA                NOW ACCA = LENGTH OF OLD STRING 
DE74 20DF             (     ROMbasic.ASM):02416                   BRA  LB6AE          PUT NEW STRING IN THE STRING SPACE 
                      (     ROMbasic.ASM):02417                                        
                      (     ROMbasic.ASM):02418         ; MID$                         
DE76 C6FF             (     ROMbasic.ASM):02419         MID       LDB  #$FF           * GET DEFAULT VALUE OF LENGTH AND 
DE78 D753             (     ROMbasic.ASM):02420                   STB  FPA0+3         * SAVE IT IN FPA0 
DE7A 9D82             (     ROMbasic.ASM):02421                   JSR  GETCCH         GET CURRENT CHARACTER FROM BASIC 
DE7C 8129             (     ROMbasic.ASM):02422                   CMPA #')            ARGUMENT DELIMITER? 
DE7E 2705             (     ROMbasic.ASM):02423                   BEQ  LB6DE          YES - NO LENGTH PARAMETER GIVEN 
DE80 BDDA19           (     ROMbasic.ASM):02424                   JSR  LB26D          SYNTAX CHECK FOR COMMA 
DE83 8D2D             (     ROMbasic.ASM):02425                   BSR  LB70B          EVALUATE NUMERIC EXPRESSION (LENGTH) 
DE85 8D15             (     ROMbasic.ASM):02426         LB6DE     BSR  LB6F5          GET ARGUMENTS FROM STACK 
DE87 2724             (     ROMbasic.ASM):02427                   BEQ  LB706          FC' ERROR IF NULL STRING 
DE89 5F               (     ROMbasic.ASM):02428                   CLRB                CLEAR LENGTH COUNTER (DEFAULT VALUE) 
DE8A 4A               (     ROMbasic.ASM):02429                   DECA                *SUOTRACT ONE FROM POSITION PARAMETER (THESE 
DE8B A184             (     ROMbasic.ASM):02430                   CMPA ,X             *ROUTINES EXPECT 1ST POSITION TO BE ZERO, NOT ONE) 
                      (     ROMbasic.ASM):02431         ;                             *AND COMPARE IT TO LENGTH OF OLD STRING 
DE8D 24CD             (     ROMbasic.ASM):02432                   BCC  LB6B5          IF POSITION > LENGTH OF OLD STRING, THEN NEW 
                      (     ROMbasic.ASM):02433         ;                             STRING WILL BE A NULL STRING 
DE8F 1F89             (     ROMbasic.ASM):02434                   TFR  A,B            SAVE ABSOLUTE POSITION PARAMETER IN ACCB 
DE91 E084             (     ROMbasic.ASM):02435                   SUBB ,X             ACCB=POSITION-LENGTH OF OLD STRING 
DE93 50               (     ROMbasic.ASM):02436                   NEGB                NOW ACCB=LENGTH OF OLDSTRING-POSITION 
DE94 D153             (     ROMbasic.ASM):02437                   CMPB FPA0+3         *IF THE AMOUNT OF OLD STRING TO THE RIGHT OF 
DE96 23C4             (     ROMbasic.ASM):02438                   BLS  LB6B5          *POSITION IS <= THE LENGTH PARAMETER, BRANCH AND 
                      (     ROMbasic.ASM):02439         ; USE ALL OF THE STRING TO THE RIGHT OF THE POSITION                      
                      (     ROMbasic.ASM):02440         ; INSTEAD OF THE LENGTH PARAMETER                      
DE98 D653             (     ROMbasic.ASM):02441                   LDB  FPA0+3         GET LENGTH OF NEW STRING 
DE9A 20C0             (     ROMbasic.ASM):02442                   BRA  LB6B5          PUT NEW STRING IN STRING SPACE 
                      (     ROMbasic.ASM):02443         ; DO A SYNTAX CHECK FOR ")", THEN PULL THE PREVIOUSLY CALCULATED NUMERIC                      
                      (     ROMbasic.ASM):02444         ; ARGUMENT (ACCD) AND STRING ARGUMENT DESCRIPTOR ADDR OFF OF THE STACK                      
DE9C BDDA13           (     ROMbasic.ASM):02445         LB6F5     JSR  LB267          SYNTAX CHECK FOR A ")" 
DE9F EEE4             (     ROMbasic.ASM):02446                   LDU  ,S             LOAD THE RETURN ADDRESS INTO U REGISTER 
DEA1 AE65             (     ROMbasic.ASM):02447                   LDX  5,S            * GET ADDRESS OF STRING AND 
DEA3 9F4D             (     ROMbasic.ASM):02448                   STX  V4D            * SAVE IT IN V4D 
DEA5 A664             (     ROMbasic.ASM):02449                   LDA  4,S            = PUT LENGTH OF STRING IN 
DEA7 E664             (     ROMbasic.ASM):02450                   LDB  4,S            = BOTH ACCA AND ACCB 
DEA9 3267             (     ROMbasic.ASM):02451                   LEAS 7,S            REMOVE DESCRIPTOR AND RETURN ADDRESS FROM STACK 
DEAB 1F35             (     ROMbasic.ASM):02452                   TFR  U,PC           JUMP TO ADDRESS IN U REGISTER 
DEAD 7EDBF1           (     ROMbasic.ASM):02453         LB706     JMP  LB44A          ILLEGAL FUNCTION CALL' 
                      (     ROMbasic.ASM):02454         ; EVALUATE AN EXPRESSION - RETURN AN INTEGER IN                      
                      (     ROMbasic.ASM):02455         ; ACCB - 'FC' ERROR IF EXPRESSION > 255                      
DEB0 9D7C             (     ROMbasic.ASM):02456         LB709     JSR  GETNCH         GET NEXT BASIC INPUT CHARACTER 
DEB2 BDD8ED           (     ROMbasic.ASM):02457         LB70B     JSR  LB141          EVALUATE A NUMERIC EXPRESSION 
DEB5 BDDB90           (     ROMbasic.ASM):02458         LB70E     JSR  LB3E9          CONVERT FPA0 TO INTEGER IN ACCD 
DEB8 4D               (     ROMbasic.ASM):02459                   TSTA                TEST MS BYTE OF INTEGER 
DEB9 26F2             (     ROMbasic.ASM):02460                   BNE  LB706          FC' ERROR IF EXPRESSION > 255 
DEBB 0E82             (     ROMbasic.ASM):02461                   JMP  GETCCH         GET CURRENT INPUT CHARACTER FROM BASIC 
                      (     ROMbasic.ASM):02462                                        
                      (     ROMbasic.ASM):02463         ; VAL                          
DEBD BDDE2D           (     ROMbasic.ASM):02464         VAL       JSR  LB686          POINT X TO STRING ADDRESS 
DEC0 102705DC         (     ROMbasic.ASM):02465                   LBEQ LBA39          IF NULL STRING SET FPA0 
DEC4 DE83             (     ROMbasic.ASM):02466                   LDU  CHARAD         SAVE INPUT POINTER IN REGISTER U 
DEC6 9F83             (     ROMbasic.ASM):02467                   STX  CHARAD         POINT INPUT POINTER TO ADDRESS OF STRING 
DEC8 3A               (     ROMbasic.ASM):02468                   ABX  MOVE POINTER TO END OF STRING TERMINATOR  
DEC9 A684             (     ROMbasic.ASM):02469                   LDA  ,X             GET LAST BYTE OF STRING 
DECB 3452             (     ROMbasic.ASM):02470                   PSHS U,X,A          SAVE INPUT POINTER, STRING TERMINATOR 
                      (     ROMbasic.ASM):02471         ;         ADDRESS AND CHARACTER   
DECD 6F84             (     ROMbasic.ASM):02472                   CLR  ,X             CLEAR STRING TERMINATOR : FOR ASCII - FP CONVERSION 
DECF 9D82             (     ROMbasic.ASM):02473                   JSR  GETCCH         GET CURRENT CHARACTER FROM BASIC 
DED1 BDE779           (     ROMbasic.ASM):02474                   JSR  LBD12          CONVERT AN ASCII STRING TO FLOATING POINT 
DED4 3552             (     ROMbasic.ASM):02475                   PULS A,X,U          RESTORE CHARACTERS AND POINTERS 
DED6 A784             (     ROMbasic.ASM):02476                   STA  ,X             REPLACE STRING TERMINATOR 
DED8 DF83             (     ROMbasic.ASM):02477                   STU  CHARAD         RESTORE INPUT CHARACTER 
DEDA 39               (     ROMbasic.ASM):02478                   RTS                  
                      (     ROMbasic.ASM):02479                                        
DEDB 8D07             (     ROMbasic.ASM):02480         LB734     BSR  LB73D          * EVALUATE AN EXPRESSION, RETURN 
DEDD 9F2B             (     ROMbasic.ASM):02481                   STX  BINVAL         * THE VALUE IN X; STORE IT IN BINVAL 
DEDF BDDA19           (     ROMbasic.ASM):02482         LB738     JSR  LB26D          SYNTAX CHECK FOR A COMMA 
DEE2 20CE             (     ROMbasic.ASM):02483                   BRA  LB70B          EVALUATE EXPRESSION IN RANGE 0 <= X < 256 
                      (     ROMbasic.ASM):02484         ; EVALUATE EXPRESSION : RETURN INTEGER PORTION IN X - 'FC' ERROR IF                      
                      (     ROMbasic.ASM):02485                                        
DEE4 BDD8ED           (     ROMbasic.ASM):02486         LB73D     JSR  LB141          EVALUATE NUMERIC EXPRESSION 
DEE7 9654             (     ROMbasic.ASM):02487         LB740     LDA  FP0SGN         GET SIGN OF FPA0 MANTISSA 
DEE9 2BC2             (     ROMbasic.ASM):02488                   BMI  LB706          ILLEGAL FUNCTION CALL' IF NEGATIVE 
DEEB 964F             (     ROMbasic.ASM):02489                   LDA  FP0EXP         GET EXPONENT OF FPA0 
DEED 8190             (     ROMbasic.ASM):02490                   CMPA #$90           COMPARE TO LARGEST POSITIVE INTEGER 
DEEF 22BC             (     ROMbasic.ASM):02491                   BHI  LB706          ILLEGAL FUNCTION CALL' IF TOO LARGE 
DEF1 BDE72F           (     ROMbasic.ASM):02492                   JSR  LBCC8          SHIFT BINARY POINT TO EXTREME RIGHT OF FPA0 
DEF4 9E52             (     ROMbasic.ASM):02493                   LDX  FPA0+2         LOAD X WITH LOWER TWO BYTES OF FPA0 
DEF6 39               (     ROMbasic.ASM):02494                   RTS                  
                      (     ROMbasic.ASM):02495         
                      (     ROMbasic.ASM):02496                                        
                      (     ROMbasic.ASM):02497         ; PEEK                         
DEF7 8DEE             (     ROMbasic.ASM):02498         PEEK      BSR  LB740          CONVERT FPA0 TO INTEGER IN REGISTER X 
DEF9 E684             (     ROMbasic.ASM):02499                   LDB  ,X             GET THE VALUE BEING 'PEEK'ED 
DEFB 7EDC9A           (     ROMbasic.ASM):02500                   JMP  LB4F3          CONVERT ACCB INTO A FP NUMBER 
                      (     ROMbasic.ASM):02501                                        
                      (     ROMbasic.ASM):02502         ; POKE                         
DEFE 8DDB             (     ROMbasic.ASM):02503         POKE      BSR  LB734          EVALUATE 2 EXPRESSIONS 
DF00 9E2B             (     ROMbasic.ASM):02504                   LDX  BINVAL         GET THE ADDRESS TO BE 'POKE'ED 
DF02 E784             (     ROMbasic.ASM):02505                   STB  ,X             STORE THE DATA IN THAT ADDRESS 
DF04 39               (     ROMbasic.ASM):02506                   RTS                  
                      (     ROMbasic.ASM):02507         
                      (     ROMbasic.ASM):02508         ;
                      (     ROMbasic.ASM):02509         ; SBC6309 V1.4 IO page begins at $E000
                      (     ROMbasic.ASM):02510         ;
                      (     ROMbasic.ASM):02511         ; Put some text here in the ROM about the build. This
                      (     ROMbasic.ASM):02512         ; isn't reachable from the 6309 CPU, but does appear
                      (     ROMbasic.ASM):02513         ; in the ROM when burned, so can be used for ID and
                      (     ROMbasic.ASM):02514         ; version information.
                      (     ROMbasic.ASM):02515         ;
                      (     ROMbasic.ASM):02516                   ORG  $E000
                      (     ROMbasic.ASM):02517                   
E000 457874656E646564 (     ROMbasic.ASM):02518                   FCN  "Extended MS BASIC with autostart ROM"
     204D532042415349
     4320776974682061
     75746F7374617274
     20524F4D00
E025 5468697320697320 (     ROMbasic.ASM):02519                   FCN  "This is a derived work from that of G Searle."
     6120646572697665
     6420776F726B2066
     726F6D2074686174
     206F662047205365
     61726C652E00
E053 687474703A2F2F73 (     ROMbasic.ASM):02520                   FCN  "http://searle.x10host.com/6809/Simple6809.html"
     6561726C652E7831
     30686F73742E636F
     6D2F363830392F53
     696D706C65363830
     392E68746D6C00
E082 4920686176652075 (     ROMbasic.ASM):02521                   FCC  "I have used Grant's 6809 Extended BASIC with very "
     736564204772616E
     7427732036383039
     20457874656E6465
     6420424153494320
     7769746820766572
     7920
E0B4 6D696E696D616C20 (     ROMbasic.ASM):02522                   FCC  "minimal adapations to port to hd6309 CPU and the "
     616461706174696F
     6E7320746F20706F
     727420746F206864
     3633303920435055
     20616E6420746865
     20
E0E5 5342432068617264 (     ROMbasic.ASM):02523                   FCN  "SBC hardware. Requires SBC6309 CPLD V1.3 or above! "
     776172652E205265
     7175697265732053
     4243363330392043
     504C442056312E33
     206F722061626F76
     65212000
E119 7461726765742074 (     ROMbasic.ASM):02524                   FCN  "target toolchain: lwtools lwasm ver 4.10 or above"
     6F6F6C636861696E
     3A206C77746F6F6C
     73206C7761736D20
     76657220342E3130
     206F722061626F76
     6500
E14B 746F6D6369726375 (     ROMbasic.ASM):02525                   FCN  "tomcircuit@gmail.com 4/10/2020"
     697440676D61696C
     2E636F6D20342F31
     302F3230323000
                      (     ROMbasic.ASM):02526         
                      (     ROMbasic.ASM):02527         ;
                      (     ROMbasic.ASM):02528         ; skip over SBC6309 V1.3 expansion page!
                      (     ROMbasic.ASM):02529         ;
                      (     ROMbasic.ASM):02530                   ORG  $E200
                      (     ROMbasic.ASM):02531                                        
                      (     ROMbasic.ASM):02532         ; LIST                         
E200 3401             (     ROMbasic.ASM):02533         LIST      PSHS CC             SAVE ZERO FLAG ON STACK 
E202 BDD737           (     ROMbasic.ASM):02534                   JSR  LAF67          CONVERT DECIMAL LINE NUMBER TO BINARY 
E205 BDD4C5           (     ROMbasic.ASM):02535                   JSR  LAD01          * FIND RAM ADDRESS OF THAT LINE NUMBER AND 
E208 9F66             (     ROMbasic.ASM):02536                   STX  LSTTXT         * SAVE IT IN LSTTXT 
E20A 3501             (     ROMbasic.ASM):02537                   PULS CC             GET ZERO FLAG FROM STACK 
E20C 2712             (     ROMbasic.ASM):02538                   BEQ  LB784          BRANCH IF END OF LINE 
E20E 9D82             (     ROMbasic.ASM):02539                   JSR  GETCCH         GET CURRENT CHARACTER FROM BASIC 
E210 2713             (     ROMbasic.ASM):02540                   BEQ  LB789          BRANCH IF END OF LINE 
E212 81A7             (     ROMbasic.ASM):02541                   CMPA #TOK_MINUS     MINUS TOKEN (IS IT A RANGE OF LINE NUMBERS?) 
E214 2609             (     ROMbasic.ASM):02542                   BNE  LB783          NO - RETURN 
E216 9D7C             (     ROMbasic.ASM):02543                   JSR  GETNCH         GET NEXT CHARACTER FROM BASIC 
E218 2706             (     ROMbasic.ASM):02544                   BEQ  LB784          BRANCH IF END OF LINE 
E21A BDD737           (     ROMbasic.ASM):02545                   JSR  LAF67          GET ENDING LINE NUMBER 
E21D 2706             (     ROMbasic.ASM):02546                   BEQ  LB789          BRANCH IF LEGAL LINE NUMBER 
E21F 39               (     ROMbasic.ASM):02547         LB783 RTS                      
                      (     ROMbasic.ASM):02548         ; LIST THE ENTIRE PROGRAM                      
E220 CEFFFF           (     ROMbasic.ASM):02549         LB784     LDU  #$FFFF         * SET THE DEFAULT ENDING LINE NUMBER 
E223 DF2B             (     ROMbasic.ASM):02550                   STU  BINVAL         * TO $FFFF 
E225 3262             (     ROMbasic.ASM):02551         LB789     LEAS 2,S            PURGE RETURN ADDRESS FROM THE STACK 
E227 9E66             (     ROMbasic.ASM):02552                   LDX  LSTTXT         POINT X TO STARTING LINE ADDRESS 
E229 BDE3C7           (     ROMbasic.ASM):02553         LB78D     JSR  LB95C          MOVE CURSOR TO START OF A NEW LINE 
E22C BDD1BA           (     ROMbasic.ASM):02554                   JSR  LA549          CHECK FOR A BREAK OR PAUSE 
E22F EC84             (     ROMbasic.ASM):02555                   LDD  ,X             GET ADDRESS OF NEXT BASIC LINE 
E231 2603             (     ROMbasic.ASM):02556                   BNE  LB79F          BRANCH IF NOT END OF PROGRAM 
E233                  (     ROMbasic.ASM):02557         LB797                          
E233 7ED445           (     ROMbasic.ASM):02558                   JMP  LAC73          RETURN TO BASIC’S MAIN INPUT LOOP 
E236 9F66             (     ROMbasic.ASM):02559         LB79F     STX  LSTTXT         SAVE NEW STARTING LINE ADDRESS 
E238 EC02             (     ROMbasic.ASM):02560                   LDD  2,X            * GET THE LINE NUMBER OF THIS LINE AND 
E23A 10932B           (     ROMbasic.ASM):02561                   CMPD BINVAL         * COMPARE IT TO ENDING LINE NUMBER 
E23D 22F4             (     ROMbasic.ASM):02562                   BHI  LB797          EXIT IF LINE NUMBER > ENDING LINE NUMBER 
E23F BDE833           (     ROMbasic.ASM):02563                   JSR  LBDCC          PRINT THE NUMBER IN ACCD ON SCREEN IN DECIMAL 
E242 BDE413           (     ROMbasic.ASM):02564                   JSR  LB9AC          SEND A SPACE TO CONSOLE OUT 
E245 9E66             (     ROMbasic.ASM):02565                   LDX  LSTTXT         GET RAM ADDRESS OF THIS LINE 
E247 8D10             (     ROMbasic.ASM):02566                   BSR  LB7C2          UNCRUNCH A LINE 
E249 AE9F0066         (     ROMbasic.ASM):02567                   LDX  [LSTTXT]       POINT X TO START OF NEXT LINE 
E24D CE00F4           (     ROMbasic.ASM):02568                   LDU  #LINBUF+1      POINT U TO BUFFER FULL OF UNCRUNCHED LINE 
E250 A6C0             (     ROMbasic.ASM):02569         LB7B9     LDA  ,U+            GET A BYTE FROM THE BUFFER 
E252 27D5             (     ROMbasic.ASM):02570                   BEQ  LB78D          BRANCH IF END OF BUFFER 
E254 BDE418           (     ROMbasic.ASM):02571                   JSR  LB9B1          SEND CHARACTER TO CONSOLE OUT 
E257 20F7             (     ROMbasic.ASM):02572                   BRA  LB7B9          GET ANOTHER CHARACTER 
                      (     ROMbasic.ASM):02573                                        
                      (     ROMbasic.ASM):02574         ; UNCRUNCH A LINE INTO BASIC’S LINE INPUT BUFFER                      
E259 3004             (     ROMbasic.ASM):02575         LB7C2     LEAX 4,X            MOVE POINTER PAST ADDRESS OF NEXT LINE AND LINE NUMBER 
E25B 108E00F4         (     ROMbasic.ASM):02576                   LDY  #LINBUF+1      UNCRUNCH LINE INTO LINE INPUT BUFFER 
E25F A680             (     ROMbasic.ASM):02577         LB7CB     LDA  ,X+            GET A CHARACTER 
E261 2751             (     ROMbasic.ASM):02578                   BEQ  LB820          BRANCH IF END OF LINE 
E263 2B15             (     ROMbasic.ASM):02579                   BMI  LB7E6          BRANCH IF IT’S A TOKEN 
E265 813A             (     ROMbasic.ASM):02580                   CMPA #':            CHECK FOR END OF SUB LINE 
E267 260D             (     ROMbasic.ASM):02581                   BNE  LB7E2          BRNCH IF NOT END OF SUB LINE 
E269 E684             (     ROMbasic.ASM):02582                   LDB  ,X             GET CHARACTER FOLLOWING COLON 
E26B C184             (     ROMbasic.ASM):02583                   CMPB #TOK_ELSE      TOKEN FOR ELSE? 
E26D 27F0             (     ROMbasic.ASM):02584                   BEQ  LB7CB          YES - DON’T PUT IT IN BUFFER 
E26F C183             (     ROMbasic.ASM):02585                   CMPB #TOK_SNGL_Q    TOKEN FOR REMARK? 
E271 27EC             (     ROMbasic.ASM):02586                   BEQ  LB7CB          YES - DON’T PUT IT IN BUFFER 
E273 8C               (     ROMbasic.ASM):02587                   FCB  SKP2           SKIP TWO BYTES 
E274 8621             (     ROMbasic.ASM):02588         LB7E0     LDA  #'!            EXCLAMATION POINT 
E276 8D30             (     ROMbasic.ASM):02589         LB7E2     BSR  LB814          PUT CHARACTER IN BUFFER 
E278 20E5             (     ROMbasic.ASM):02590                   BRA  LB7CB          GET ANOTHER CHARACTER 
                      (     ROMbasic.ASM):02591                                        
E27A CED106           (     ROMbasic.ASM):02592         LB7E6     LDU  #COMVEC-10     FIRST DO COMMANDS 
E27D 81FF             (     ROMbasic.ASM):02593                   CMPA #$FF           CHECK FOR SECONDARY TOKEN 
E27F 2604             (     ROMbasic.ASM):02594                   BNE  LB7F1          BRANCH IF NON SECONDARY TOKEN 
E281 A680             (     ROMbasic.ASM):02595                   LDA  ,X+            GET SECONDARY TOKEN 
E283 3345             (     ROMbasic.ASM):02596                   LEAU 5,U            BUMP IT UP TO SECONDARY FUNCTIONS 
E285 847F             (     ROMbasic.ASM):02597         LB7F1     ANDA #$7F           MASK OFF BIT 7 OF TOKEN 
E287 334A             (     ROMbasic.ASM):02598         LB7F3     LEAU 10,U           MOVE TO NEXT COMMAND TABLE 
E289 6DC4             (     ROMbasic.ASM):02599                   TST  ,U             IS THIS TABLE ENABLED? 
E28B 27E7             (     ROMbasic.ASM):02600                   BEQ  LB7E0          NO - ILLEGAL TOKEN 
E28D A0C4             (     ROMbasic.ASM):02601                   SUBA ,U             SUBTRACT THE NUMBER OF TOKENS FROM THE CURRENT TOKEN NUMBER 
E28F 2AF6             (     ROMbasic.ASM):02602                   BPL  LB7F3          BRANCH IF TOKEN NOT IN THIS TABLE 
E291 ABC4             (     ROMbasic.ASM):02603                   ADDA ,U             RESTORE TOKEN NUMBER RELATIVE TO THIS TABLE 
E293 EE41             (     ROMbasic.ASM):02604                   LDU  1,U            POINT U TO COMMAND DICTIONARY TABLE 
E295 4A               (     ROMbasic.ASM):02605         LB801     DECA                DECREMENT TOKEN NUMBER 
E296 2B06             (     ROMbasic.ASM):02606                   BMI  LB80A          BRANCH IF THIS IS THE CORRECT TOKEN 
                      (     ROMbasic.ASM):02607         ; SKIP THROUGH DICTIONARY TABLE TO START OF NEXT TOKEN                      
E298 6DC0             (     ROMbasic.ASM):02608         LB804     TST  ,U+            GRAB A BYTE 
E29A 2AFC             (     ROMbasic.ASM):02609                   BPL  LB804          BRANCH IF BIT 7 NOT SET 
E29C 20F7             (     ROMbasic.ASM):02610                   BRA  LB801          GO SEE IF THIS IS THE CORRECT TOKEN 
E29E A6C4             (     ROMbasic.ASM):02611         LB80A     LDA  ,U             GET A CHARACTER FROM DICTIONARY TABLE 
E2A0 8D06             (     ROMbasic.ASM):02612                   BSR  LB814          PUT CHARACTER IN BUFFER 
E2A2 6DC0             (     ROMbasic.ASM):02613                   TST  ,U+            CHECK FOR START OF NEXT TOKEN 
E2A4 2AF8             (     ROMbasic.ASM):02614                   BPL  LB80A          BRANCH IF NOT DONE WITH THIS TOKEN 
E2A6 20B7             (     ROMbasic.ASM):02615                   BRA  LB7CB          GO GET ANOTHER CHARACTER 
E2A8 108C01ED         (     ROMbasic.ASM):02616         LB814     CMPY #LINBUF+LBUFMX TEST FOR END OF LINE INPUT BUFFER 
E2AC 2406             (     ROMbasic.ASM):02617                   BCC  LB820          BRANCH IF AT END OF BUFFER 
E2AE 847F             (     ROMbasic.ASM):02618                   ANDA #$7F           MASK OFF BIT 7 
E2B0 A7A0             (     ROMbasic.ASM):02619                   STA  ,Y+            * SAVE CHARACTER IN BUFFER AND 
E2B2 6FA4             (     ROMbasic.ASM):02620                   CLR  ,Y             * CLEAR NEXT CHARACTER SLOT IN BUFFER 
E2B4 39               (     ROMbasic.ASM):02621         LB820     RTS                  
                      (     ROMbasic.ASM):02622         ;                              
                      (     ROMbasic.ASM):02623         ; CRUNCH THE LINE THAT THE INPUT POINTER IS                      
                      (     ROMbasic.ASM):02624         ; POINTING TO INTO THE LINE INPUT BUFFER                      
                      (     ROMbasic.ASM):02625         ; RETURN LENGTH OF CRUNCHED LINE IN ACCD                      
                      (     ROMbasic.ASM):02626         ;                              
E2B5 9E83             (     ROMbasic.ASM):02627         LB821     LDX  CHARAD         GET BASIC'S INPUT POINTER ADDRESS 
E2B7 CE00F3           (     ROMbasic.ASM):02628                   LDU  #LINBUF        POINT X TO LINE INPUT BUFFER 
E2BA 0F43             (     ROMbasic.ASM):02629         LB829     CLR  V43            CLEAR ILLEGAL TOKEN FLAG 
E2BC 0F44             (     ROMbasic.ASM):02630                   CLR  V44            CLEAR DATA FLAG 
E2BE A680             (     ROMbasic.ASM):02631         LB82D     LDA  ,X+            GET INPUT CHAR 
E2C0 2721             (     ROMbasic.ASM):02632                   BEQ  LB852          BRANCH IF END OF LINE 
E2C2 0D43             (     ROMbasic.ASM):02633                   TST  V43            * CHECK ILLEGAL TOKEN FLAG & BRANCH IF NOT 
E2C4 270F             (     ROMbasic.ASM):02634                   BEQ  LB844          * PROCESSING AN ILLEGAL TOKEN 
E2C6 BDDB49           (     ROMbasic.ASM):02635                   JSR  LB3A2          SET CARRY IF NOT UPPER CASE ALPHA 
E2C9 2418             (     ROMbasic.ASM):02636                   BCC  LB852          BRANCH IF UPPER CASE ALPHA 
E2CB 8130             (     ROMbasic.ASM):02637                   CMPA #'0            * DON’T CRUNCH ASCII NUMERIC CHARACTERS 
E2CD 2504             (     ROMbasic.ASM):02638                   BLO  LB842          * BRANCH IF NOT NUMERIC 
E2CF 8139             (     ROMbasic.ASM):02639                   CMPA #'9            * 
E2D1 2310             (     ROMbasic.ASM):02640                   BLS  LB852          * BRANCH IF NUMERIC 
                      (     ROMbasic.ASM):02641         ; END UP HERE IF NOT UPPER CASE ALPHA OR NUMERIC                      
E2D3 0F43             (     ROMbasic.ASM):02642         LB842     CLR  V43            CLEAR ILLEGAL TOKEN FLAG 
E2D5 8120             (     ROMbasic.ASM):02643         LB844     CMPA #SPACE         SPACE? 
E2D7 270A             (     ROMbasic.ASM):02644                   BEQ  LB852          DO NOT REMOVE SPACES 
E2D9 9742             (     ROMbasic.ASM):02645                   STA  V42            SAVE INPUT CHARACTER AS SCAN DELIMITER 
E2DB 8122             (     ROMbasic.ASM):02646                   CMPA #'"            CHECK FOR STRING DELIMITER 
E2DD 2738             (     ROMbasic.ASM):02647                   BEQ  LB886          BRANCH IF STRING 
E2DF 0D44             (     ROMbasic.ASM):02648                   TST  V44            * CHECK DATA FLAG AND BRANCH IF CLEAR 
E2E1 2719             (     ROMbasic.ASM):02649                   BEQ  LB86B          * DO NOT CRUNCH DATA 
E2E3 A7C0             (     ROMbasic.ASM):02650         LB852     STA  ,U+            SAVE CHARACTER IN BUFFER 
E2E5 2706             (     ROMbasic.ASM):02651                   BEQ  LB85C          BRANCH IF END OF LINE 
E2E7 813A             (     ROMbasic.ASM):02652                   CMPA #':            * CHECK FOR END OF SUBLINE 
E2E9 27CF             (     ROMbasic.ASM):02653                   BEQ  LB829          * AND RESET FLAGS IF END OF SUBLINE 
E2EB 20D1             (     ROMbasic.ASM):02654         LB85A     BRA  LB82D          GO GET ANOTHER CHARACTER 
E2ED 6FC0             (     ROMbasic.ASM):02655         LB85C     CLR  ,U+            * DOUBLE ZERO AT END OF LINE 
E2EF 6FC0             (     ROMbasic.ASM):02656                   CLR  ,U+            * 
E2F1 1F30             (     ROMbasic.ASM):02657                   TFR  U,D            SAVE ADDRESS OF END OF LINE IN ACCD 
E2F3 8300F1           (     ROMbasic.ASM):02658                   SUBD #LINHDR        LENGTH OF LINE IN ACCD 
E2F6 8E00F2           (     ROMbasic.ASM):02659                   LDX  #LINBUF-1      * SET THE INPUT POINTER TO ONE BEFORE 
E2F9 9F83             (     ROMbasic.ASM):02660                   STX  CHARAD         * THE START OF THE CRUNCHED LINE 
E2FB 39               (     ROMbasic.ASM):02661                   RTS  EXIT 'CRUNCH'   
E2FC 813F             (     ROMbasic.ASM):02662         LB86B     CMPA #'?            CHECK FOR "?" - PRINT ABBREVIATION 
E2FE 2604             (     ROMbasic.ASM):02663                   BNE  LB873          BRANCH IF NOT PRINT ABBREVIATION 
E300 8687             (     ROMbasic.ASM):02664                   LDA  #TOK_PRINT     * GET THE PRINT TOKEN AND SAVE IT 
E302 20DF             (     ROMbasic.ASM):02665                   BRA  LB852          * IN BUFFER 
E304 8127             (     ROMbasic.ASM):02666         LB873     CMPA #''            APOSTROPHE IS SAME AS REM 
E306 2613             (     ROMbasic.ASM):02667                   BNE  LB88A          BRANCH IF NOT REMARK 
E308 CC3A83           (     ROMbasic.ASM):02668                   LDD  #$3A00+TOK_SNGL_Q COLON, REM TOKEN 
E30B EDC1             (     ROMbasic.ASM):02669                   STD  ,U++           SAVE IN BUFFER 
E30D 0F42             (     ROMbasic.ASM):02670         LB87C     CLR  V42            SET DELIMITER = 0 (END OF LINE) 
E30F A680             (     ROMbasic.ASM):02671         LB87E     LDA  ,X+            SCAN TILL WE MATCH [V42] 
E311 27D0             (     ROMbasic.ASM):02672                   BEQ  LB852          BRANCH IF END OF LINE 
E313 9142             (     ROMbasic.ASM):02673                   CMPA V42            DELIMITER? 
E315 27CC             (     ROMbasic.ASM):02674                   BEQ  LB852          BRANCH OUT IF SO 
E317 A7C0             (     ROMbasic.ASM):02675         LB886     STA  ,U+            DON’T CRUNCH REMARKS OR STRINGS 
E319 20F4             (     ROMbasic.ASM):02676                   BRA  LB87E          GO GET MORE STRING OR REMARK 
E31B 8130             (     ROMbasic.ASM):02677         LB88A     CMPA #'0            * LESS THAN ASCII ZERO? 
E31D 2504             (     ROMbasic.ASM):02678                   BCS  LB892          * BRANCH IF SO 
E31F 813C             (     ROMbasic.ASM):02679                   CMPA #';+1          = CHECK FOR NUMERIC VALUE, COLON OR SEMICOLON 
E321 25C0             (     ROMbasic.ASM):02680                   BCS  LB852          = AND INSERT IN BUFFER IF SO 
E323 301F             (     ROMbasic.ASM):02681         LB892     LEAX -1,X           MOVE INPUT POINTER BACK ONE 
E325 3450             (     ROMbasic.ASM):02682                   PSHS U,X            SAVE POINTERS TO INPUT STRING, OUTPUT STRING 
E327 0F41             (     ROMbasic.ASM):02683                   CLR  V41            TOKEN FLAG 0 = COMMAND, FF = SECONDARY 
E329 CED106           (     ROMbasic.ASM):02684                   LDU  #COMVEC-10     POINT U TO COMMAND INTERPRETATION 
                      (     ROMbasic.ASM):02685         ;                             TABLE FOR BASIC - 10 
E32C 0F42             (     ROMbasic.ASM):02686         LB89B     CLR  V42            INITIALIZE V42 AS TOKEN COUNTER 
E32E 334A             (     ROMbasic.ASM):02687         LB89D     LEAU 10,U           MOVE TO NEXT COMMAND INTERPRETATION TABLE 
E330 A6C4             (     ROMbasic.ASM):02688                   LDA  ,U             GET NUMBER OF COMMANDS 
E332 2731             (     ROMbasic.ASM):02689                   BEQ  LB8D4          GO DO SECONDARY FUNCTIONS IF NO COMMAND TABLE 
E334 10AE41           (     ROMbasic.ASM):02690                   LDY  1,U            POINT Y TO COMMAND DICTIONARY TABLE 
E337 AEE4             (     ROMbasic.ASM):02691         LB8A6     LDX  ,S             GET POINTER TO INPUT STRING 
E339 E6A0             (     ROMbasic.ASM):02692         LB8A8     LDB  ,Y+            GET A BYTE FROM DICTIONARY TABLE 
E33B E080             (     ROMbasic.ASM):02693                   SUBB ,X+            SUBTRACT INPUT CHARACTER 
E33D 27FA             (     ROMbasic.ASM):02694                   BEQ  LB8A8          LOOP IF SAME 
E33F C180             (     ROMbasic.ASM):02695                   CMPB #$80           LAST CHAR IN RESERVED WORD TABLE HAD 
                      (     ROMbasic.ASM):02696         ;                             BIT 7 SET, SO IF WE HAVE $80 HERE 
                      (     ROMbasic.ASM):02697         ;                             THEN IT IS A GOOD COMPARE 
E341 2638             (     ROMbasic.ASM):02698                   BNE  LB8EA          BRANCH IF NO MATCH - CHECK ANOTHER COMMAND 
E343 3262             (     ROMbasic.ASM):02699                   LEAS 2,S            DELETE OLD INPUT POINTER FROM STACK 
E345 3540             (     ROMbasic.ASM):02700                   PULS U              GET POINTER TO OUTPUT STRING 
E347 DA42             (     ROMbasic.ASM):02701                   ORB  V42            OR IN THE TABLE POSITION TO MAKE THE TOKEN 
                      (     ROMbasic.ASM):02702         ;                             - NOTE THAT B ALREADY HAD $80 IN IT - 
E349 9641             (     ROMbasic.ASM):02703                   LDA  V41            * CHECK TOKEN FLAG AND BRANCH 
E34B 2606             (     ROMbasic.ASM):02704                   BNE  LB8C2          * IF SECONDARY 
E34D C184             (     ROMbasic.ASM):02705                   CMPB #TOK_ELSE      IS IT ELSE TOKEN? 
E34F 2606             (     ROMbasic.ASM):02706                   BNE  LB8C6          NO 
E351 863A             (     ROMbasic.ASM):02707                   LDA  #':            PUT A COLON (SUBLINE) BEFORE ELSE TOKEN 
E353 EDC1             (     ROMbasic.ASM):02708         LB8C2     STD  ,U++           SECONDARY TOKENS PRECEEDED BY $FF 
E355 2094             (     ROMbasic.ASM):02709                   BRA  LB85A          GO PROCESS MORE INPUT CHARACTERS 
E357 E7C0             (     ROMbasic.ASM):02710         LB8C6     STB  ,U+            SAVE THIS TOKEN 
E359 C186             (     ROMbasic.ASM):02711                   CMPB #TOK_DATA      DATA TOKEN? 
E35B 2602             (     ROMbasic.ASM):02712                   BNE  LB8CE          NO 
E35D 0C44             (     ROMbasic.ASM):02713                   INC  V44            SET DATA FLAG 
E35F C182             (     ROMbasic.ASM):02714         LB8CE     CMPB #TOK_REM       REM TOKEN? 
E361 27AA             (     ROMbasic.ASM):02715                   BEQ  LB87C          YES 
E363 2086             (     ROMbasic.ASM):02716         LB8D2     BRA  LB85A          GO PROCESS MORE INPUT CHARACTERS 
                      (     ROMbasic.ASM):02717         ; CHECK FOR A SECONDARY TOKEN                      
E365 CED10B           (     ROMbasic.ASM):02718         LB8D4     LDU  #COMVEC-5      NOW DO SECONDARY FUNCTIONS 
E368 0341             (     ROMbasic.ASM):02719                   COM  V41            TOGGLE THE TOKEN FLAG 
E36A 26C0             (     ROMbasic.ASM):02720                   BNE  LB89B          BRANCH IF NOW CHECKING SECONDARY COMMANDS 
                      (     ROMbasic.ASM):02721                                        
                      (     ROMbasic.ASM):02722         ; THIS CODE WILL PROCESS INPUT DATA WHICH CANNOT BE CRUNCHED AND SO                      
                      (     ROMbasic.ASM):02723         ; IS ASSUMED TO BE ILLEGAL DATA OR AN ILLEGAL TOKEN                      
E36C 3550             (     ROMbasic.ASM):02724                   PULS X,U            RESTORE INPUT AND OUTPUT POINTERS 
E36E A680             (     ROMbasic.ASM):02725                   LDA  ,X+            * MOVE THE FIRST CHARACTER OF AN 
E370 A7C0             (     ROMbasic.ASM):02726                   STA  ,U+            * ILLEGAL TOKEN 
E372 BDDB49           (     ROMbasic.ASM):02727                   JSR  LB3A2          SET CARRY IF NOT ALPHA 
E375 25EC             (     ROMbasic.ASM):02728                   BCS  LB8D2          BRANCH IF NOT ALPHA 
E377 0343             (     ROMbasic.ASM):02729                   COM  V43            SET ILLEGAL TOKEN FLAG IF UPPER CASE ALPHA 
E379 20E8             (     ROMbasic.ASM):02730                   BRA  LB8D2          PROCESS MORE INPUT CHARACTERS 
E37B 0C42             (     ROMbasic.ASM):02731         LB8EA     INC  V42            INCREMENT TOKEN COUNTER 
E37D 4A               (     ROMbasic.ASM):02732                   DECA                DECR COMMAND COUNTER 
E37E 27AE             (     ROMbasic.ASM):02733                   BEQ  LB89D          GET ANOTHER COMMAND TABLE IF DONE W/THIS ONE 
E380 313F             (     ROMbasic.ASM):02734                   LEAY -1,Y           MOVE POINTER BACK ONE 
E382 E6A0             (     ROMbasic.ASM):02735         LB8F1     LDB  ,Y+            * GET TO NEXT 
E384 2AFC             (     ROMbasic.ASM):02736                   BPL  LB8F1          * RESERVED WORD 
E386 20AF             (     ROMbasic.ASM):02737                   BRA  LB8A6          GO SEE IF THIS WORD IS A MATCH 
                      (     ROMbasic.ASM):02738                                        
                      (     ROMbasic.ASM):02739         ; PRINT                        
E388 2739             (     ROMbasic.ASM):02740         PRINT     BEQ  LB958          BRANCH IF NO ARGUMENT 
E38A 8D01             (     ROMbasic.ASM):02741                   BSR  LB8FE          CHECK FOR ALL PRINT OPTIONS 
E38C 39               (     ROMbasic.ASM):02742                   RTS                  
E38D                  (     ROMbasic.ASM):02743         LB8FE                          
E38D BDF2ED           (     ROMbasic.ASM):02744         LB918     JSR  XVEC9          CALL EXTENDED BASIC ADD-IN 
E390 273E             (     ROMbasic.ASM):02745         LB91B     BEQ  LB965          RETURN IF END OF LINE 
E392 819F             (     ROMbasic.ASM):02746         LB91D     CMPA #TOK_TAB       TOKEN FOR TAB( ? 
E394 2753             (     ROMbasic.ASM):02747                   BEQ  LB97E          YES 
E396 812C             (     ROMbasic.ASM):02748                   CMPA #',            COMMA? 
E398 2737             (     ROMbasic.ASM):02749                   BEQ  LB966          YES - ADVANCE TO NEXT TAB FIELD 
E39A 813B             (     ROMbasic.ASM):02750                   CMPA #';            SEMICOLON? 
E39C 2760             (     ROMbasic.ASM):02751                   BEQ  LB997          YES - DO NOT ADVANCE CURSOR 
E39E BDD902           (     ROMbasic.ASM):02752                   JSR  LB156          EVALUATE EXPRESSION 
E3A1 9606             (     ROMbasic.ASM):02753                   LDA  VALTYP         * GET VARIABLE TYPE AND 
E3A3 3402             (     ROMbasic.ASM):02754                   PSHS A              * SAVE IT ON THE STACK 
E3A5 2606             (     ROMbasic.ASM):02755                   BNE  LB938          BRANCH IF STRING VARIABLE 
E3A7 BDE840           (     ROMbasic.ASM):02756                   JSR  LBDD9          CONVERT FP NUMBER TO AN ASCII STRING 
E3AA BDDCBD           (     ROMbasic.ASM):02757                   JSR  LB516          PARSE A STRING FROM (X-1) AND PUT 
                      (     ROMbasic.ASM):02758         ;                             DESCRIPTOR ON STRING STACK 
E3AD 8D57             (     ROMbasic.ASM):02759         LB938     BSR  LB99F          PRINT STRING POINTED TO BY X 
E3AF 3504             (     ROMbasic.ASM):02760                   PULS B              GET VARIABLE TYPE BACK 
E3B1 BDD153           (     ROMbasic.ASM):02761                   JSR  LA35F          SET UP TAB WIDTH ZONE, ETC 
E3B4 5D               (     ROMbasic.ASM):02762         LB949     TSTB                CHECK CURRENT PRINT POSITION 
E3B5 2608             (     ROMbasic.ASM):02763                   BNE  LB954          BRANCH IF NOT AT START OF LINE 
E3B7 9D82             (     ROMbasic.ASM):02764                   JSR  GETCCH         GET CURRENT INPUT CHARACTER 
E3B9 812C             (     ROMbasic.ASM):02765                   CMPA #',            COMMA? 
E3BB 2714             (     ROMbasic.ASM):02766                   BEQ  LB966          SKIP TO NEXT TAB FIELD 
E3BD 8D54             (     ROMbasic.ASM):02767                   BSR  LB9AC          SEND A SPACE TO CONSOLE OUT 
E3BF 9D82             (     ROMbasic.ASM):02768         LB954     JSR  GETCCH         GET CURRENT INPUT CHARACTER 
E3C1 26CF             (     ROMbasic.ASM):02769                   BNE  LB91D          BRANCH IF NOT END OF LINE 
E3C3 860D             (     ROMbasic.ASM):02770         LB958     LDA  #CR            * SEND A CR TO 
E3C5 2051             (     ROMbasic.ASM):02771                   BRA  LB9B1          * CONSOLE OUT 
E3C7 BDD153           (     ROMbasic.ASM):02772         LB95C     JSR  LA35F          SET UP TAB WIDTH, ZONE ETC 
E3CA 27F7             (     ROMbasic.ASM):02773                   BEQ  LB958          BRANCH IF WIDTH = ZERO 
E3CC 966C             (     ROMbasic.ASM):02774                   LDA  DEVPOS         GET PRINT POSITION 
E3CE 26F3             (     ROMbasic.ASM):02775                   BNE  LB958          BRANCH IF NOT AT START OF LINE 
E3D0 39               (     ROMbasic.ASM):02776         LB965     RTS                  
                      (     ROMbasic.ASM):02777         ; SKIP TO NEXT TAB FIELD                      
E3D1 BDD153           (     ROMbasic.ASM):02778         LB966     JSR  LA35F          SET UP TAB WIDTH, ZONE ETC 
E3D4 270A             (     ROMbasic.ASM):02779                   BEQ  LB975          BRANCH IF LINE WIDTH = 0 (CASSETTE) 
E3D6 D66C             (     ROMbasic.ASM):02780                   LDB  DEVPOS         GET CURRENT POSITION 
E3D8 D16B             (     ROMbasic.ASM):02781                   CMPB DEVLCF         COMPARE TO LAST TAB ZONE 
E3DA 2506             (     ROMbasic.ASM):02782                   BCS  LB977          BRANCH IF < LAST TAB ZONE 
E3DC 8DE5             (     ROMbasic.ASM):02783                   BSR  LB958          SEND A CARRIAGE RETURN TO CONSOLE OUT 
E3DE 201E             (     ROMbasic.ASM):02784                   BRA  LB997          GET MORE DATA 
E3E0 D66C             (     ROMbasic.ASM):02785         LB975     LDB  DEVPOS         * 
E3E2 D06A             (     ROMbasic.ASM):02786         LB977     SUBB DEVCFW         * SUBTRACT TAB FIELD WIDTH FROM CURRENT 
E3E4 24FC             (     ROMbasic.ASM):02787                   BCC  LB977          * POSITION UNTIL CARRY SET - NEGATING THE 
E3E6 50               (     ROMbasic.ASM):02788                   NEGB                * REMAINDER LEAVES THE NUMBER OF SPACES TO NEXT 
                      (     ROMbasic.ASM):02789         ;              * TAB ZONE IN ACCB  
E3E7 2010             (     ROMbasic.ASM):02790                   BRA  LB98E          GO ADVANCE TO NEXT TAB ZONE 
                      (     ROMbasic.ASM):02791                                        
                      (     ROMbasic.ASM):02792         ; PRINT TAB(                      
E3E9 BDDEB0           (     ROMbasic.ASM):02793         LB97E     JSR  LB709          EVALUATE EXPRESSION - RETURN VALUE IN B 
E3EC 8129             (     ROMbasic.ASM):02794                   CMPA #')            * 'SYNTAX' ERROR IF NOT ')' 
E3EE 1026F631         (     ROMbasic.ASM):02795                   LBNE LB277          * 
E3F2 BDD153           (     ROMbasic.ASM):02796                   JSR  LA35F          SET UP TAB WIDTH, ZONE ETC 
E3F5 D06C             (     ROMbasic.ASM):02797                   SUBB DEVPOS         GET DIFFERENCE OF PRINT POSITION & TAB POSITION 
E3F7 2305             (     ROMbasic.ASM):02798                   BLS  LB997          BRANCH IF TAB POSITION < CURRENT POSITION 
E3F9                  (     ROMbasic.ASM):02799         LB98E                          
E3F9 8D18             (     ROMbasic.ASM):02800         LB992     BSR  LB9AC          SEND A SPACE TO CONSOLE OUT 
E3FB 5A               (     ROMbasic.ASM):02801                   DECB                DECREMENT DIFFERENCE COUNT 
E3FC 26FB             (     ROMbasic.ASM):02802                   BNE  LB992          BRANCH UNTIL CURRENT POSITION = TAB POSITION 
E3FE 9D7C             (     ROMbasic.ASM):02803         LB997     JSR  GETNCH         GET NEXT CHARACTER FROM BASIC 
E400 7EE390           (     ROMbasic.ASM):02804                   JMP  LB91B          LOOK FOR MORE PRINT DATA 
                      (     ROMbasic.ASM):02805         ; COPY A STRING FROM (X) TO CONSOLE OUT                      
E403 BDDCBF           (     ROMbasic.ASM):02806         LB99C     JSR  LB518          PARSE A STRING FROM X AND PUT 
                      (     ROMbasic.ASM):02807         ;                                DESCRIPTOR ON STRING STACK  
E406 BDDDFE           (     ROMbasic.ASM):02808         LB99F     JSR  LB657          GET LENGTH OF STRING AND REMOVE 
                      (     ROMbasic.ASM):02809         ;                                DESCRIPTOR FROM STRING STACK  
E409 5C               (     ROMbasic.ASM):02810                   INCB                COMPENSATE FOR DECB BELOW 
E40A 5A               (     ROMbasic.ASM):02811         LB9A3     DECB                DECREMENT COUNTER 
E40B 27C3             (     ROMbasic.ASM):02812                   BEQ  LB965          EXIT ROUTINE 
E40D A680             (     ROMbasic.ASM):02813                   LDA  ,X+            GET A CHARACTER FROM X 
E40F 8D07             (     ROMbasic.ASM):02814                   BSR  LB9B1          SEND TO CONSOLE OUT 
E411 20F7             (     ROMbasic.ASM):02815                   BRA  LB9A3          KEEP LOOPING 
E413 8620             (     ROMbasic.ASM):02816         LB9AC     LDA  #SPACE         SPACE TO CONSOLE OUT 
E415 8C               (     ROMbasic.ASM):02817                   FCB  SKP2           SKIP NEXT TWO BYTES 
E416 863F             (     ROMbasic.ASM):02818         LB9AF     LDA  #'?            QUESTION MARK TO CONSOLE OUT 
E418 7ED017           (     ROMbasic.ASM):02819         LB9B1     JMP  PUTCHR         JUMP TO CONSOLE OUT 
                      (     ROMbasic.ASM):02820         
                      (     ROMbasic.ASM):02821                                        
                      (     ROMbasic.ASM):02822         ; FLOATING POINT MATH PACKAGE                      
                      (     ROMbasic.ASM):02823                                        
                      (     ROMbasic.ASM):02824         ; ADD .5 TO FPA0                      
E41B 8EE927           (     ROMbasic.ASM):02825         LB9B4     LDX  #LBEC0         FLOATING POINT CONSTANT (.5) 
E41E 2009             (     ROMbasic.ASM):02826                   BRA  LB9C2          ADD .5 TO FPA0 
                      (     ROMbasic.ASM):02827         ; SUBTRACT FPA0 FROM FP NUMBER POINTED                      
                      (     ROMbasic.ASM):02828         ; TO BY (X), LEAVE RESULT IN FPA0                      
E420 BDE596           (     ROMbasic.ASM):02829         LB9B9     JSR  LBB2F          COPY PACKED FP DATA FROM (X) TO FPA1 
                      (     ROMbasic.ASM):02830                                        
                      (     ROMbasic.ASM):02831         ; ARITHMETIC OPERATION (-) JUMPS HERE - SUBTRACT FPA0 FROM FPA1 (ENTER                      
                      (     ROMbasic.ASM):02832         ; WITH EXPONENT OF FPA0 IN ACCB AND EXPONENT OF FPA1 IN ACCA)                      
E423 0354             (     ROMbasic.ASM):02833         LB9BC     COM  FP0SGN         CHANGE MANTISSA SIGN OF FPA0 
E425 0362             (     ROMbasic.ASM):02834                   COM  RESSGN         REVERSE RESULT SIGN FLAG 
E427 2003             (     ROMbasic.ASM):02835                   BRA  LB9C5          GO ADD FPA1 AND FPA0 
                      (     ROMbasic.ASM):02836         ; ADD FP NUMBER POINTED TO BY                      
                      (     ROMbasic.ASM):02837         ; (X) TO FPA0 - LEAVE RESULT IN FPA0                      
E429 BDE596           (     ROMbasic.ASM):02838         LB9C2     JSR  LBB2F          UNPACK PACKED FP DATA FROM (X) TO 
                      (     ROMbasic.ASM):02839         ;         FPA1; RETURN EXPONENT OF FPA1 IN ACCA  
                      (     ROMbasic.ASM):02840                                        
                      (     ROMbasic.ASM):02841         ; ARITHMETIC OPERATION (+) JUMPS HERE - ADD FPA0 TO                      
                      (     ROMbasic.ASM):02842                                        
E42C 5D               (     ROMbasic.ASM):02843         LB9C5     TSTB                CHECK EXPONENT OF FPA0 
E42D 10270280         (     ROMbasic.ASM):02844                   LBEQ LBC4A          COPY FPA1 TO FPA0 IF FPA0 = 
E431 8E005C           (     ROMbasic.ASM):02845                   LDX  #FP1EXP        POINT X TO FPA1 
E434 1F89             (     ROMbasic.ASM):02846         LB9CD     TFR  A,B            PUT EXPONENT OF FPA1 INTO ACCB 
E436 5D               (     ROMbasic.ASM):02847                   TSTB                CHECK EXPONENT 
E437 276C             (     ROMbasic.ASM):02848                   BEQ  LBA3E          RETURN IF EXPONENT = 0 (ADDING 0 TO FPA0) 
E439 D04F             (     ROMbasic.ASM):02849                   SUBB FP0EXP         SUBTRACT EXPONENT OF FPA0 FROM EXPONENT OF FPA1 
E43B 2769             (     ROMbasic.ASM):02850                   BEQ  LBA3F          BRANCH IF EXPONENTS ARE EQUAL 
E43D 250A             (     ROMbasic.ASM):02851                   BCS  LB9E2          BRANCH IF EXPONENT FPA0 > FPA1 
E43F 974F             (     ROMbasic.ASM):02852                   STA  FP0EXP         REPLACE FPA0 EXPONENT WITH FPA1 EXPONENT 
E441 9661             (     ROMbasic.ASM):02853                   LDA  FP1SGN         * REPLACE FPA0 MANTISSA SIGN 
E443 9754             (     ROMbasic.ASM):02854                   STA  FP0SGN         * WITH FPA1 MANTISSA SIGN 
E445 8E004F           (     ROMbasic.ASM):02855                   LDX  #FP0EXP        POINT X TO FPA0 
E448 50               (     ROMbasic.ASM):02856                   NEGB                NEGATE DIFFERENCE OF EXPONENTS 
E449 C1F8             (     ROMbasic.ASM):02857         LB9E2     CMPB #-8            TEST DIFFERENCE OF EXPONENTS 
E44B 2F59             (     ROMbasic.ASM):02858                   BLE  LBA3F          BRANCH IF DIFFERENCE OF EXPONENTS <= 8 
E44D 4F               (     ROMbasic.ASM):02859                   CLRA                CLEAR OVERFLOW BYTE 
E44E 6401             (     ROMbasic.ASM):02860                   LSR  1,X            SHIFT MS BYTE OF MANTISSA; BIT 7 = 0 
E450 BDE521           (     ROMbasic.ASM):02861                   JSR  LBABA          GO SHIFT MANTISSA OF (X) TO THE RIGHT (B) TIMES 
E453 D662             (     ROMbasic.ASM):02862         LB9EC     LDB  RESSGN         GET SIGN FLAG 
E455 2A0B             (     ROMbasic.ASM):02863                   BPL  LB9FB          BRANCH IF FPA0 AND FPA1 SIGNS ARE THE SAME 
E457 6301             (     ROMbasic.ASM):02864                   COM  1,X            * COMPLEMENT MANTISSA POINTED 
E459 6302             (     ROMbasic.ASM):02865                   COM  2,X            * TO BY (X) THE 
E45B 6303             (     ROMbasic.ASM):02866                   COM  3,X            * ADCA BELOW WILL 
E45D 6304             (     ROMbasic.ASM):02867                   COM  4,X            * CONVERT THIS OPERATION 
E45F 43               (     ROMbasic.ASM):02868                   COMA                * INTO A NEG (MANTISSA) 
E460 8900             (     ROMbasic.ASM):02869                   ADCA #0             ADD ONE TO ACCA - COMA ALWAYS SETS THE CARRY FLAG 
                      (     ROMbasic.ASM):02870         ; THE PREVIOUS TWO BYTES MAY BE REPLACED BY A NEGA                      
                      (     ROMbasic.ASM):02871         ;                              
                      (     ROMbasic.ASM):02872         ; ADD MANTISSAS OF FPA0 AND FPA1, PUT RESULT IN FPA0                      
E462 9763             (     ROMbasic.ASM):02873         LB9FB     STA  FPSBYT         SAVE FPA SUB BYTE 
E464 9653             (     ROMbasic.ASM):02874                   LDA  FPA0+3         * ADD LS BYTE 
E466 9960             (     ROMbasic.ASM):02875                   ADCA FPA1+3         * OF MANTISSA 
E468 9753             (     ROMbasic.ASM):02876                   STA  FPA0+3         SAVE IN FPA0 LSB 
E46A 9652             (     ROMbasic.ASM):02877                   LDA  FPA0+2         * ADD NEXT BYTE 
E46C 995F             (     ROMbasic.ASM):02878                   ADCA FPA1+2         * OF MANTISSA 
E46E 9752             (     ROMbasic.ASM):02879                   STA  FPA0+2         SAVE IN FPA0 
E470 9651             (     ROMbasic.ASM):02880                   LDA  FPA0+1         * ADD NEXT BYTE 
E472 995E             (     ROMbasic.ASM):02881                   ADCA FPA1+1         * OF MANTISSA 
E474 9751             (     ROMbasic.ASM):02882                   STA  FPA0+1         SAVE IN FPA0 
E476 9650             (     ROMbasic.ASM):02883                   LDA  FPA0           * ADD MS BYTE 
E478 995D             (     ROMbasic.ASM):02884                   ADCA FPA1           * OF MANTISSA 
E47A 9750             (     ROMbasic.ASM):02885                   STA  FPA0           SAVE IN FPA0 
E47C 5D               (     ROMbasic.ASM):02886                   TSTB TEST SIGN FLAG  
E47D 2A44             (     ROMbasic.ASM):02887                   BPL  LBA5C          BRANCH IF FPA0 & FPA1 SIGNS WERE ALIKE 
E47F 2502             (     ROMbasic.ASM):02888         LBA18     BCS  LBA1C          BRANCH IF POSITIVE MANTISSA 
E481 8D5D             (     ROMbasic.ASM):02889                   BSR  LBA79          NEGATE FPA0 MANTISSA 
                      (     ROMbasic.ASM):02890                                        
                      (     ROMbasic.ASM):02891         ; NORMALIZE FPA0                      
E483 5F               (     ROMbasic.ASM):02892         LBA1C     CLRB                CLEAR TEMPORARY EXPONENT ACCUMULATOR 
E484 9650             (     ROMbasic.ASM):02893         LBA1D     LDA  FPA0           TEST MSB OF MANTISSA 
E486 262E             (     ROMbasic.ASM):02894                   BNE  LBA4F          BRANCH IF <> 0 
E488 9651             (     ROMbasic.ASM):02895                   LDA  FPA0+1         * IF THE MSB IS 
E48A 9750             (     ROMbasic.ASM):02896                   STA  FPA0           * 0, THEN SHIFT THE 
E48C 9652             (     ROMbasic.ASM):02897                   LDA  FPA0+2         * MANTISSA A WHOLE BYTE 
E48E 9751             (     ROMbasic.ASM):02898                   STA  FPA0+1         * AT A TIME. THIS 
E490 9653             (     ROMbasic.ASM):02899                   LDA  FPA0+3         * IS FASTER THAN ONE 
E492 9752             (     ROMbasic.ASM):02900                   STA  FPA0+2         * BIT AT A TIME 
E494 9663             (     ROMbasic.ASM):02901                   LDA  FPSBYT         * BUT USES MORE MEMORY. 
E496 9753             (     ROMbasic.ASM):02902                   STA  FPA0+3         * FPSBYT, THE CARRY IN 
E498 0F63             (     ROMbasic.ASM):02903                   CLR  FPSBYT         * BYTE, REPLACES THE MATISSA LSB. 
E49A CB08             (     ROMbasic.ASM):02904                   ADDB #8             SHIFTING ONE BYTE = 8 BIT SHIFTS; ADD 8 TO EXPONENT 
E49C C128             (     ROMbasic.ASM):02905                   CMPB #5*8           CHECK FOR 5 SHIFTS 
E49E 2DE4             (     ROMbasic.ASM):02906                   BLT  LBA1D          BRANCH IF < 5 SHIFTS, IF > 5, THEN MANTISSA = 0 
E4A0 4F               (     ROMbasic.ASM):02907         LBA39     CLRA                A ZERO EXPONENT = 0 FLOATING POINT 
E4A1 974F             (     ROMbasic.ASM):02908         LBA3A     STA  FP0EXP         ZERO OUT THE EXPONENT 
E4A3 9754             (     ROMbasic.ASM):02909                   STA  FP0SGN         ZERO OUT THE MANTISSA SIGN 
E4A5 39               (     ROMbasic.ASM):02910         LBA3E     RTS                  
E4A6 8D6D             (     ROMbasic.ASM):02911         LBA3F     BSR  LBAAE          SHIFT FPA0 MANTISSA TO RIGHT 
E4A8 5F               (     ROMbasic.ASM):02912                   CLRB                CLEAR CARRY FLAG 
E4A9 20A8             (     ROMbasic.ASM):02913                   BRA  LB9EC           
                      (     ROMbasic.ASM):02914         ; SHIFT FPA0 LEFT ONE BIT UNTIL BIT 7                      
                      (     ROMbasic.ASM):02915         ; OF MATISSA MS BYTE = 1                      
E4AB 5C               (     ROMbasic.ASM):02916         LBA44     INCB                ADD ONE TO EXPONENT ACCUMULATOR 
E4AC 0863             (     ROMbasic.ASM):02917                   ASL  FPSBYT         SHIFT SUB BYTE ONE LEFT 
E4AE 0953             (     ROMbasic.ASM):02918                   ROL  FPA0+3         SHIFT LS BYTE 
E4B0 0952             (     ROMbasic.ASM):02919                   ROL  FPA0+2         SHIFT NS BYTE 
E4B2 0951             (     ROMbasic.ASM):02920                   ROL  FPA0+1         SHIFT NS BYTE 
E4B4 0950             (     ROMbasic.ASM):02921                   ROL  FPA0           SHIFT MS BYTE 
E4B6 2AF3             (     ROMbasic.ASM):02922         LBA4F     BPL  LBA44          BRANCH IF NOT YET NORMALIZED 
E4B8 964F             (     ROMbasic.ASM):02923                   LDA  FP0EXP         GET CURRENT EXPONENT 
E4BA 3404             (     ROMbasic.ASM):02924                   PSHS B              SAVE EXPONENT MODIFIER CAUSED BY NORMALIZATION 
E4BC A0E0             (     ROMbasic.ASM):02925                   SUBA ,S+            SUBTRACT ACCUMULATED EXPONENT MODIFIER 
E4BE 974F             (     ROMbasic.ASM):02926                   STA  FP0EXP         SAVE AS NEW EXPONENT 
E4C0 23DE             (     ROMbasic.ASM):02927                   BLS  LBA39          SET FPA0 = 0 IF THE NORMALIZATION CAUSED 
                      (     ROMbasic.ASM):02928         ;         MORE OR EQUAL NUMBER OF LEFT SHIFTS THAN THE  
                      (     ROMbasic.ASM):02929         ;         SIZE OF THE EXPONENT  
E4C2 8C               (     ROMbasic.ASM):02930                   FCB  SKP2           SKIP 2 BYTES 
E4C3 2508             (     ROMbasic.ASM):02931         LBA5C     BCS  LBA66          BRANCH IF MANTISSA OVERFLOW 
E4C5 0863             (     ROMbasic.ASM):02932                   ASL  FPSBYT         SUB BYTE BIT 7 TO CARRY - USE AS ROUND-OFF 
                      (     ROMbasic.ASM):02933         ;                             FLAG (TRUNCATE THE REST OF SUB BYTE) 
E4C7 8600             (     ROMbasic.ASM):02934                   LDA  #0             CLRA, BUT DO NOT CHANGE CARRY FLAG 
E4C9 9763             (     ROMbasic.ASM):02935                   STA  FPSBYT         CLEAR THE SUB BYTE 
E4CB 200C             (     ROMbasic.ASM):02936                   BRA  LBA72          GO ROUND-OFF RESULT 
E4CD 0C4F             (     ROMbasic.ASM):02937         LBA66     INC  FP0EXP         INCREMENT EXPONENT - MULTIPLY BY 2 
E4CF 2728             (     ROMbasic.ASM):02938                   BEQ  LBA92          OVERFLOW ERROR IF CARRY PAST $FF 
E4D1 0650             (     ROMbasic.ASM):02939                   ROR  FPA0           * SHIFT MANTISSA 
E4D3 0651             (     ROMbasic.ASM):02940                   ROR  FPA0+1         * ONE TO 
E4D5 0652             (     ROMbasic.ASM):02941                   ROR  FPA0+2         * THE RIGHT - 
E4D7 0653             (     ROMbasic.ASM):02942                   ROR  FPA0+3         * DIVIDE BY TWO 
E4D9 2404             (     ROMbasic.ASM):02943         LBA72     BCC  LBA78          BRANCH IF NO ROUND-OFF NEEDED 
E4DB 8D0D             (     ROMbasic.ASM):02944                   BSR  LBA83          ADD ONE TO MANTISSA - ROUND OFF 
E4DD 27EE             (     ROMbasic.ASM):02945                   BEQ  LBA66          BRANCH iF OVERFLOW - MANTISSA = 0 
E4DF 39               (     ROMbasic.ASM):02946         LBA78     RTS                  
                      (     ROMbasic.ASM):02947         ; NEGATE FPA0 MANTISSA                      
E4E0 0354             (     ROMbasic.ASM):02948         LBA79     COM  FP0SGN         TOGGLE SIGN OF MANTISSA 
E4E2 0350             (     ROMbasic.ASM):02949         LBA7B     COM  FPA0           * COMPLEMENT ALL 4 MANTISSA BYTES 
E4E4 0351             (     ROMbasic.ASM):02950                   COM  FPA0+1         * 
E4E6 0352             (     ROMbasic.ASM):02951                   COM  FPA0+2         * 
E4E8 0353             (     ROMbasic.ASM):02952                   COM  FPA0+3         * 
                      (     ROMbasic.ASM):02953         ; ADD ONE TO FPA0 MANTISSA                      
E4EA 9E52             (     ROMbasic.ASM):02954         LBA83     LDX  FPA0+2         * GET BOTTOM 2 MANTISSA 
E4EC 3001             (     ROMbasic.ASM):02955                   LEAX 1,X            * BYTES, ADD ONE TO 
E4EE 9F52             (     ROMbasic.ASM):02956                   STX  FPA0+2         * THEM AND SAVE THEM 
E4F0 2606             (     ROMbasic.ASM):02957                   BNE  LBA91          BRANCH IF NO OVERFLOW 
E4F2 9E50             (     ROMbasic.ASM):02958                   LDX  FPA0           * IF OVERFLOW ADD ONE 
E4F4 3001             (     ROMbasic.ASM):02959                   LEAX 1,X            * TO TOP 2 MANTISSA 
E4F6 9F50             (     ROMbasic.ASM):02960                   STX  FPA0           * BYTES AND SAVE THEM 
E4F8 39               (     ROMbasic.ASM):02961         LBA91     RTS                  
E4F9 C60A             (     ROMbasic.ASM):02962         LBA92     LDB  #2*5           OV' OVERFLOW ERROR 
E4FB 7ED426           (     ROMbasic.ASM):02963                   JMP  LAC46          PROCESS AN ERROR 
E4FE 8E0012           (     ROMbasic.ASM):02964         LBA97     LDX  #FPA2-1        POINT X TO FPA2 
                      (     ROMbasic.ASM):02965         ; SHIFT FPA POINTED TO BY (X) TO                      
                      (     ROMbasic.ASM):02966         ; THE RIGHT -(B) TIMES. EXIT WITH                      
                      (     ROMbasic.ASM):02967         ; ACCA CONTAINING DATA SHIFTED OUT                      
                      (     ROMbasic.ASM):02968         ; TO THE RIGHT (SUB BYTE) AND THE DATA                      
                      (     ROMbasic.ASM):02969         ; SHIFTED IN FROM THE LEFT WILL COME FROM FPCARY                      
E501 A604             (     ROMbasic.ASM):02970         LBA9A     LDA  4,X            GET LS BYTE OF MANTISSA (X) 
E503 9763             (     ROMbasic.ASM):02971                   STA  FPSBYT         SAVE IN FPA SUB BYTE 
E505 A603             (     ROMbasic.ASM):02972                   LDA  3,X            * SHIFT THE NEXT THREE BYTES OF THE 
E507 A704             (     ROMbasic.ASM):02973                   STA  4,X            * MANTISSA RIGHT ONE COMPLETE BYTE. 
E509 A602             (     ROMbasic.ASM):02974                   LDA  2,X            * 
E50B A703             (     ROMbasic.ASM):02975                   STA  3,X            * 
E50D A601             (     ROMbasic.ASM):02976                   LDA  1,X            * 
E50F A702             (     ROMbasic.ASM):02977                   STA  2,X            * 
E511 965B             (     ROMbasic.ASM):02978                   LDA  FPCARY         GET THE CARRY IN BYTE 
E513 A701             (     ROMbasic.ASM):02979                   STA  1,X            STORE AS THE MS MANTISSA BYTE OF (X) 
E515 CB08             (     ROMbasic.ASM):02980         LBAAE     ADDB #8             ADD 8 TO DIFFERENCE OF EXPONENTS 
E517 2FE8             (     ROMbasic.ASM):02981                   BLE  LBA9A          BRANCH IF EXPONENT DIFFERENCE < -8 
E519 9663             (     ROMbasic.ASM):02982                   LDA  FPSBYT         GET FPA SUB BYTE 
E51B C008             (     ROMbasic.ASM):02983                   SUBB #8             CAST OUT THE 8 ADDED IN ABOVE 
E51D 270C             (     ROMbasic.ASM):02984                   BEQ  LBAC4          BRANCH IF EXPONENT DIFFERENCE = 0 
                      (     ROMbasic.ASM):02985                                        
                      (     ROMbasic.ASM):02986                                        
E51F 6701             (     ROMbasic.ASM):02987         LBAB8     ASR  1,X            * SHIFT MANTISSA AND SUB BYTE ONE BIT TO THE RIGHT 
E521 6602             (     ROMbasic.ASM):02988         LBABA     ROR  2,X            * 
E523 6603             (     ROMbasic.ASM):02989                   ROR  3,X            * 
E525 6604             (     ROMbasic.ASM):02990                   ROR  4,X            * 
E527 46               (     ROMbasic.ASM):02991                   RORA                * 
E528 5C               (     ROMbasic.ASM):02992                   INCB                ADD ONE TO EXPONENT DIFFERENCE 
E529 26F4             (     ROMbasic.ASM):02993                   BNE  LBAB8          BRANCH IF EXPONENTS NOT = 
E52B 39               (     ROMbasic.ASM):02994         LBAC4     RTS                  
E52C 8100000000       (     ROMbasic.ASM):02995         LBAC5     FCB  $81,$00,$00,$00,$00 FLOATING POINT CONSTANT 1.0 
                      (     ROMbasic.ASM):02996                                        
                      (     ROMbasic.ASM):02997         ; ARITHMETIC OPERATION (*) JUMPS HERE - MULTIPLY                      
                      (     ROMbasic.ASM):02998         ; FPA0 BY (X) - RETURN PRODUCT IN FPA0                      
E531 8D63             (     ROMbasic.ASM):02999         LBACA     BSR  LBB2F          MOVE PACKED FPA FROM (X) TO FPA1 
E533 2760             (     ROMbasic.ASM):03000         LBACC     BEQ  LBB2E          BRANCH IF EXPONENT OF FPA0 = 0 
E535 8D78             (     ROMbasic.ASM):03001                   BSR  LBB48          CALCULATE EXPONENT OF PRODUCT 
                      (     ROMbasic.ASM):03002         ; MULTIPLY FPA0 MANTISSA BY FPA1. NORMALIZE                      
                      (     ROMbasic.ASM):03003         ; HIGH ORDER BYTES OF PRODUCT IN FPA0. THE                      
                      (     ROMbasic.ASM):03004         ; LOW ORDER FOUR BYTES OF THE PRODUCT WILL                      
                      (     ROMbasic.ASM):03005         ; BE STORED IN VAB-VAE.                      
E537 8600             (     ROMbasic.ASM):03006         LBAD0     LDA  #0             * ZERO OUT MANTISSA OF FPA2 
E539 9713             (     ROMbasic.ASM):03007                   STA  FPA2           * 
E53B 9714             (     ROMbasic.ASM):03008                   STA  FPA2+1         * 
E53D 9715             (     ROMbasic.ASM):03009                   STA  FPA2+2         * 
E53F 9716             (     ROMbasic.ASM):03010                   STA  FPA2+3         * 
E541 D653             (     ROMbasic.ASM):03011                   LDB  FPA0+3         GET LS BYTE OF FPA0 
E543 8D22             (     ROMbasic.ASM):03012                   BSR  LBB00          MULTIPLY BY FPA1 
E545 D663             (     ROMbasic.ASM):03013                   LDB  FPSBYT         * TEMPORARILY SAVE SUB BYTE 4 
E547 D78B             (     ROMbasic.ASM):03014                   STB  VAE            * 
E549 D652             (     ROMbasic.ASM):03015                   LDB  FPA0+2         GET NUMBER 3 MANTISSA BYTE OF FPA0 
E54B 8D1A             (     ROMbasic.ASM):03016                   BSR  LBB00          MULTIPLY BY FPA1 
E54D D663             (     ROMbasic.ASM):03017                   LDB  FPSBYT         * TEMPORARILY SAVE SUB BYTE 3 
E54F D78A             (     ROMbasic.ASM):03018                   STB  VAD            * 
E551 D651             (     ROMbasic.ASM):03019                   LDB  FPA0+1         GET NUMBER 2 MANTISSA BYTE OF FPA0 
E553 8D12             (     ROMbasic.ASM):03020                   BSR  LBB00          MULTIPLY BY FPA1 
E555 D663             (     ROMbasic.ASM):03021                   LDB  FPSBYT         * TEMPORARILY SAVE SUB BYTE 2 
E557 D789             (     ROMbasic.ASM):03022                   STB  VAC            * 
E559 D650             (     ROMbasic.ASM):03023                   LDB  FPA0           GET MS BYTE OF FPA0 MANTISSA 
E55B 8D0C             (     ROMbasic.ASM):03024                   BSR  LBB02          MULTIPLY BY FPA1 
E55D D663             (     ROMbasic.ASM):03025                   LDB  FPSBYT         * TEMPORARILY SAVE SUB BYTE 1 
E55F D788             (     ROMbasic.ASM):03026                   STB  VAB            * 
E561 BDE672           (     ROMbasic.ASM):03027                   JSR  LBC0B          COPY MANTISSA FROM FPA2 TO FPA0 
E564 7EE483           (     ROMbasic.ASM):03028                   JMP  LBA1C          NORMALIZE FPA0 
E567 2795             (     ROMbasic.ASM):03029         LBB00     BEQ  LBA97          SHIFT FPA2 ONE BYTE TO RIGHT 
E569 43               (     ROMbasic.ASM):03030         LBB02     COMA                SET CARRY FLAG 
                      (     ROMbasic.ASM):03031         ; MULTIPLY FPA1 MANTISSA BY ACCB AND                      
                      (     ROMbasic.ASM):03032         ; ADD PRODUCT TO FPA2 MANTISSA                      
E56A 9613             (     ROMbasic.ASM):03033         LBB03     LDA  FPA2           GET FPA2 MS BYTE 
E56C 56               (     ROMbasic.ASM):03034                   RORB ROTATE CARRY FLAG INTO SHIFT COUNTER;  
                      (     ROMbasic.ASM):03035         ;         DATA BIT INTO CARRY  
E56D 2726             (     ROMbasic.ASM):03036                   BEQ  LBB2E          BRANCH WHEN 8 SHIFTS DONE 
E56F 2416             (     ROMbasic.ASM):03037                   BCC  LBB20          DO NOT ADD FPA1 IF DATA BIT = 0 
E571 9616             (     ROMbasic.ASM):03038                   LDA  FPA2+3         * ADD MANTISSA LS BYTE 
E573 9B60             (     ROMbasic.ASM):03039                   ADDA FPA1+3         * 
E575 9716             (     ROMbasic.ASM):03040                   STA  FPA2+3         * 
E577 9615             (     ROMbasic.ASM):03041                   LDA  FPA2+2         = ADD MANTISSA NUMBER 3 BYTE 
E579 995F             (     ROMbasic.ASM):03042                   ADCA FPA1+2         = 
E57B 9715             (     ROMbasic.ASM):03043                   STA  FPA2+2         = 
E57D 9614             (     ROMbasic.ASM):03044                   LDA  FPA2+1         * ADD MANTISSA NUMBER 2 BYTE 
E57F 995E             (     ROMbasic.ASM):03045                   ADCA FPA1+1         * 
E581 9714             (     ROMbasic.ASM):03046                   STA  FPA2+1         * 
E583 9613             (     ROMbasic.ASM):03047                   LDA  FPA2           = ADD MANTISSA MS BYTE 
E585 995D             (     ROMbasic.ASM):03048                   ADCA FPA1           = 
E587 46               (     ROMbasic.ASM):03049         LBB20     RORA * ROTATE CARRY INTO MS BYTE  
E588 9713             (     ROMbasic.ASM):03050                   STA  FPA2           * 
E58A 0614             (     ROMbasic.ASM):03051                   ROR  FPA2+1         = ROTATE FPA2 ONE BIT TO THE RIGHT 
E58C 0615             (     ROMbasic.ASM):03052                   ROR  FPA2+2         = 
E58E 0616             (     ROMbasic.ASM):03053                   ROR  FPA2+3         = 
E590 0663             (     ROMbasic.ASM):03054                   ROR  FPSBYT         = 
E592 4F               (     ROMbasic.ASM):03055                   CLRA                CLEAR CARRY FLAG 
E593 20D5             (     ROMbasic.ASM):03056                   BRA  LBB03          KEEP LOOPING 
E595 39               (     ROMbasic.ASM):03057         LBB2E     RTS                  
                      (     ROMbasic.ASM):03058         ; UNPACK A FP NUMBER FROM (X) TO FPA1                      
E596 EC01             (     ROMbasic.ASM):03059         LBB2F     LDD  1,X            GET TWO MSB BYTES OF MANTISSA FROM 
                      (     ROMbasic.ASM):03060         ;         FPA  POINTED TO BY X  
E598 9761             (     ROMbasic.ASM):03061                   STA  FP1SGN         SAVE PACKED MANTISSA SIGN BYTE 
E59A 8A80             (     ROMbasic.ASM):03062                   ORA  #$80           FORCE BIT 7 OF MSB MANTISSA = 1 
E59C DD5D             (     ROMbasic.ASM):03063                   STD  FPA1           SAVE 2 MSB BYTES IN FPA1 
E59E D661             (     ROMbasic.ASM):03064                   LDB  FP1SGN         * GET PACKED MANTISSA SIGN BYTE. EOR W/FPA0 
E5A0 D854             (     ROMbasic.ASM):03065                   EORB FP0SGN         * SIGN - NEW SIGN POSITION IF BOTH OLD SIGNS ALIKE, 
E5A2 D762             (     ROMbasic.ASM):03066                   STB  RESSGN         * NEG IF BOTH OLD SIGNS DIFF. SAVE ADJUSTED 
                      (     ROMbasic.ASM):03067         ;                             * MANTISSA SIGN BYTE 
E5A4 EC03             (     ROMbasic.ASM):03068                   LDD  3,X            = GET 2 LSB BYTES OF MANTISSA 
E5A6 DD5F             (     ROMbasic.ASM):03069                   STD  FPA1+2         = AND PUT IN FPA1 
E5A8 A684             (     ROMbasic.ASM):03070                   LDA  ,X             * GET EXPONENT FROM (X) AND 
E5AA 975C             (     ROMbasic.ASM):03071                   STA  FP1EXP         * PUT IN EXPONENT OF FPA1 
E5AC D64F             (     ROMbasic.ASM):03072                   LDB  FP0EXP         GET EXPONENT OF FPA0 
E5AE 39               (     ROMbasic.ASM):03073                   RTS                  
                      (     ROMbasic.ASM):03074         ; CALCULATE EXPONENT FOR PRODUCT OF FPA0 & FPA1                      
                      (     ROMbasic.ASM):03075         ; ENTER WITH EXPONENT OF FPA1 IN ACCA                      
E5AF 4D               (     ROMbasic.ASM):03076         LBB48     TSTA                TEST EXPONENT OF FPA1 
E5B0 2716             (     ROMbasic.ASM):03077                   BEQ  LBB61          PURGE RETURN ADDRESS & SET FPA0 = 0 
E5B2 9B4F             (     ROMbasic.ASM):03078                   ADDA FP0EXP         ADD FPA1 EXPONENT TO FPA0 EXPONENT 
E5B4 46               (     ROMbasic.ASM):03079                   RORA                ROTATE CARRY INTO BIT 7; BIT 0 INTO CARRY 
E5B5 49               (     ROMbasic.ASM):03080                   ROLA                SET OVERFLOW FLAG 
E5B6 2810             (     ROMbasic.ASM):03081                   BVC  LBB61          BRANCH IF EXPONENT TOO LARGE OR SMALL 
E5B8 8B80             (     ROMbasic.ASM):03082                   ADDA #$80           ADD $80 BIAS TO EXPONENT 
E5BA 974F             (     ROMbasic.ASM):03083                   STA  FP0EXP         SAVE NEW EXPONENT 
E5BC 270C             (     ROMbasic.ASM):03084                   BEQ  LBB63          SET FPA0 
E5BE 9662             (     ROMbasic.ASM):03085                   LDA  RESSGN         GET MANTISSA SIGN 
E5C0 9754             (     ROMbasic.ASM):03086                   STA  FP0SGN         SAVE AS MANTISSA SIGN OF FPA0 
E5C2 39               (     ROMbasic.ASM):03087                   RTS                  
                      (     ROMbasic.ASM):03088         ; IF FPA0 = POSITIVE THEN 'OV' ERROR IF FPA0                      
                      (     ROMbasic.ASM):03089         ; = IS NEGATIVE THEN FPA0 = 0                      
E5C3 9654             (     ROMbasic.ASM):03090         LBB5C     LDA  FP0SGN         GET MANTISSA SIGN OF FPA0 
E5C5 43               (     ROMbasic.ASM):03091                   COMA                CHANGE SIGN OF FPA0 MANTISSA 
E5C6 2002             (     ROMbasic.ASM):03092                   BRA  LBB63           
E5C8 3262             (     ROMbasic.ASM):03093         LBB61     LEAS 2,S            PURGE RETURN ADDRESS FROM STACK 
E5CA 102AFED2         (     ROMbasic.ASM):03094         LBB63     LBPL LBA39          ZERO FPA0 MANTISSA SIGN & EXPONENT 
E5CE 7EE4F9           (     ROMbasic.ASM):03095         LBB67     JMP  LBA92          OV' OVERFLOW ERROR 
                      (     ROMbasic.ASM):03096         ; FAST MULTIPLY BY 10 AND LEAVE RESULT IN FPA0                      
E5D1 BDE6C6           (     ROMbasic.ASM):03097         LBB6A     JSR  LBC5F          TRANSFER FPA0 TO FPA1 
E5D4 270D             (     ROMbasic.ASM):03098                   BEQ  LBB7C          BRANCH IF EXPONENT = 0 
E5D6 8B02             (     ROMbasic.ASM):03099                   ADDA #2             ADD 2 TO EXPONENT (TIMES 4) 
E5D8 25F4             (     ROMbasic.ASM):03100                   BCS  LBB67          OV' ERROR IF EXPONENT > $FF 
E5DA 0F62             (     ROMbasic.ASM):03101                   CLR  RESSGN         CLEAR RESULT SIGN BYTE 
E5DC BDE434           (     ROMbasic.ASM):03102                   JSR  LB9CD          ADD FPA1 TO FPA0 (TIMES 5) 
E5DF 0C4F             (     ROMbasic.ASM):03103                   INC  FP0EXP         ADD ONE TO EXPONENT (TIMES 10) 
E5E1 27EB             (     ROMbasic.ASM):03104                   BEQ  LBB67          OV' ERROR IF EXPONENT > $FF 
E5E3 39               (     ROMbasic.ASM):03105         LBB7C     RTS                  
E5E4 8420000000       (     ROMbasic.ASM):03106         LBB7D     FCB  $84,$20,$00,$00,$00 FLOATING POINT CONSTANT 10 
                      (     ROMbasic.ASM):03107         ; DIVIDE FPA0 BY 10                      
E5E9 BDE6C6           (     ROMbasic.ASM):03108         LBB82     JSR  LBC5F          MOVE FPA0 TO FPA1 
E5EC 8EE5E4           (     ROMbasic.ASM):03109                   LDX  #LBB7D         POINT TO FLOATING POINT CONSTANT 10 
E5EF 5F               (     ROMbasic.ASM):03110                   CLRB                ZERO MANTISSA SIGN BYTE 
E5F0 D762             (     ROMbasic.ASM):03111         LBB89     STB  RESSGN         STORE THE QUOTIENT MANTISSA SIGN BYTE 
E5F2 BDE67B           (     ROMbasic.ASM):03112                   JSR  LBC14          UNPACK AN FP NUMBER FROM (X) INTO FPA0 
E5F5 8C               (     ROMbasic.ASM):03113                   FCB  SKP2           SKIP TWO BYTES 
                      (     ROMbasic.ASM):03114         ; DIVIDE (X) BY FPA0-LEAVE NORMALIZED QUOTIENT IN FPA0                      
E5F6 8D9E             (     ROMbasic.ASM):03115         LBB8F     BSR  LBB2F          GET FP NUMBER FROM (X) TO FPA1 
                      (     ROMbasic.ASM):03116                                        
                      (     ROMbasic.ASM):03117         ; ARITHMETIC OPERATION (/) JUMPS HERE. DIVIDE FPA1 BY FPA0 (ENTER WITH                      
                      (     ROMbasic.ASM):03118         ; EXPONENT OF FPA1 IN ACCA AND FLAGS SET BY TSTA)                      
                      (     ROMbasic.ASM):03119                                        
                      (     ROMbasic.ASM):03120         ; DIVIDE FPA1 BY FPA0                      
E5F8 2773             (     ROMbasic.ASM):03121         LBB91     BEQ  LBC06          /0' DIVIDE BY ZERO ERROR 
E5FA 004F             (     ROMbasic.ASM):03122                   NEG  FP0EXP         GET EXPONENT OF RECIPROCAL OF DIVISOR 
E5FC 8DB1             (     ROMbasic.ASM):03123                   BSR  LBB48          CALCULATE EXPONENT OF QUOTIENT 
E5FE 0C4F             (     ROMbasic.ASM):03124                   INC  FP0EXP         INCREMENT EXPONENT 
E600 27CC             (     ROMbasic.ASM):03125                   BEQ  LBB67          OV' OVERFLOW ERROR 
E602 8E0013           (     ROMbasic.ASM):03126                   LDX  #FPA2          POINT X TO MANTISSA OF FPA2 - HOLD 
                      (     ROMbasic.ASM):03127         ;                             TEMPORARY QUOTIENT IN FPA2 
E605 C604             (     ROMbasic.ASM):03128                   LDB  #4             5 BYTE DIVIDE 
E607 D703             (     ROMbasic.ASM):03129                   STB  TMPLOC         SAVE BYTE COUNTER 
E609 C601             (     ROMbasic.ASM):03130                   LDB  #1             SHIFT COUNTER-AND TEMPORARY QUOTIENT BYTE 
                      (     ROMbasic.ASM):03131         ; COMPARE FPA0 MANTISSA TO FPA1 MANTISSA -                      
                      (     ROMbasic.ASM):03132         ; SET CARRY FLAG IF FPA1 >= FPA0                      
E60B 9650             (     ROMbasic.ASM):03133         LBBA4     LDA  FPA0           * COMPARE THE TWO MS BYTES 
E60D 915D             (     ROMbasic.ASM):03134                   CMPA FPA1           * OF FPA0 AND FPA1 AND 
E60F 2613             (     ROMbasic.ASM):03135                   BNE  LBBBD          * BRANCH IF <> 
E611 9651             (     ROMbasic.ASM):03136                   LDA  FPA0+1         = COMPARE THE NUMBER 2 
E613 915E             (     ROMbasic.ASM):03137                   CMPA FPA1+1         = BYTES AND 
E615 260D             (     ROMbasic.ASM):03138                   BNE  LBBBD          = BRANCH IF <> 
E617 9652             (     ROMbasic.ASM):03139                   LDA  FPA0+2         * COMPARE THE NUMBER 3 
E619 915F             (     ROMbasic.ASM):03140                   CMPA FPA1+2         * BYTES AND 
E61B 2607             (     ROMbasic.ASM):03141                   BNE  LBBBD          * BRANCH IF <> 
E61D 9653             (     ROMbasic.ASM):03142                   LDA  FPA0+3         = COMPARE THE LS BYTES 
E61F 9160             (     ROMbasic.ASM):03143                   CMPA FPA1+3         = AND BRANCH 
E621 2601             (     ROMbasic.ASM):03144                   BNE  LBBBD          = IF <> 
E623 43               (     ROMbasic.ASM):03145                   COMA                SET CARRY FLAG IF FPA0 = FPA1 
E624 1FA8             (     ROMbasic.ASM):03146         LBBBD     TFR  CC,A           SAVE CARRY FLAG STATUS IN ACCA; CARRY 
                      (     ROMbasic.ASM):03147         ;         CLEAR IF FPA0 > FPA1  
E626 59               (     ROMbasic.ASM):03148                   ROLB                ROTATE CARRY INTO TEMPORARY QUOTIENT BYTE 
E627 240A             (     ROMbasic.ASM):03149                   BCC  LBBCC          CARRY WILL BE SET AFTER 8 SHIFTS 
E629 E780             (     ROMbasic.ASM):03150                   STB  ,X+            SAVE TEMPORARY QUOTIENT 
E62B 0A03             (     ROMbasic.ASM):03151                   DEC  TMPLOC         DECREMENT BYTE COUNTER 
E62D 2B34             (     ROMbasic.ASM):03152                   BMI  LBBFC          BRANCH IF DONE 
E62F 272E             (     ROMbasic.ASM):03153                   BEQ  LBBF8          BRANCH IF LAST BYTE 
E631 C601             (     ROMbasic.ASM):03154                   LDB  #1             RESET SHIFT COUNTER AND TEMPORARY QUOTIENT BYTE 
E633 1F8A             (     ROMbasic.ASM):03155         LBBCC     TFR  A,CC           RESTORE CARRY FLAG AND 
E635 250E             (     ROMbasic.ASM):03156                   BCS  LBBDE          BRANCH IF FPA0 =< FPA1 
E637 0860             (     ROMbasic.ASM):03157         LBBD0     ASL  FPA1+3         * SHIFT FPA1 MANTISSA 1 BIT TO LEFT 
E639 095F             (     ROMbasic.ASM):03158                   ROL  FPA1+2         * 
E63B 095E             (     ROMbasic.ASM):03159                   ROL  FPA1+1         * 
E63D 095D             (     ROMbasic.ASM):03160                   ROL  FPA1           * 
E63F 25E3             (     ROMbasic.ASM):03161                   BCS  LBBBD          BRANCH IF CARRY - ADD ONE TO PARTIAL QUOTIENT 
E641 2BC8             (     ROMbasic.ASM):03162                   BMI  LBBA4          IF MSB OF HIGH ORDER MANTISSA BYTE IS 
                      (     ROMbasic.ASM):03163         ;         SET, CHECK THE MAGNITUDES OF FPA0, FPA1  
E643 20DF             (     ROMbasic.ASM):03164                   BRA  LBBBD          CARRY IS CLEAR, CHECK ANOTHER BIT 
                      (     ROMbasic.ASM):03165         ; SUBTRACT FPA0 FROM FPA1 - LEAVE RESULT IN FPA1                      
E645 9660             (     ROMbasic.ASM):03166         LBBDE     LDA  FPA1+3         * SUBTRACT THE LS BYTES OF MANTISSA 
E647 9053             (     ROMbasic.ASM):03167                   SUBA FPA0+3         * 
E649 9760             (     ROMbasic.ASM):03168                   STA  FPA1+3         * 
E64B 965F             (     ROMbasic.ASM):03169                   LDA  FPA1+2         = THEN THE NEXT BYTE 
E64D 9252             (     ROMbasic.ASM):03170                   SBCA FPA0+2         = 
E64F 975F             (     ROMbasic.ASM):03171                   STA  FPA1+2         = 
E651 965E             (     ROMbasic.ASM):03172                   LDA  FPA1+1         * AND THE NEXT 
E653 9251             (     ROMbasic.ASM):03173                   SBCA FPA0+1         * 
E655 975E             (     ROMbasic.ASM):03174                   STA  FPA1+1         * 
E657 965D             (     ROMbasic.ASM):03175                   LDA  FPA1           = AND FINALLY, THE MS BYTE OF MANTISSA 
E659 9250             (     ROMbasic.ASM):03176                   SBCA FPA0           = 
E65B 975D             (     ROMbasic.ASM):03177                   STA  FPA1           = 
E65D 20D8             (     ROMbasic.ASM):03178                   BRA  LBBD0          GO SHIFT FPA1 
E65F C640             (     ROMbasic.ASM):03179         LBBF8     LDB  #$40           USE ONLY TWO BITS OF THE LAST BYTE (FIFTH) 
E661 20D0             (     ROMbasic.ASM):03180                   BRA  LBBCC          GO SHIFT THE LAST BYTE 
E663 56               (     ROMbasic.ASM):03181         LBBFC     RORB * SHIFT CARRY (ALWAYS SET HERE) INTO  
E664 56               (     ROMbasic.ASM):03182                   RORB * BIT 5 AND MOVE  
E665 56               (     ROMbasic.ASM):03183                   RORB * BITS 1,0 TO BITS 7,6  
E666 D763             (     ROMbasic.ASM):03184                   STB  FPSBYT         SAVE SUB BYTE 
E668 8D08             (     ROMbasic.ASM):03185                   BSR  LBC0B          MOVE MANTISSA OF FPA2 TO FPA0 
E66A 7EE483           (     ROMbasic.ASM):03186                   JMP  LBA1C          NORMALIZE FPA0 
E66D C614             (     ROMbasic.ASM):03187         LBC06     LDB  #2*10          /0' ERROR 
E66F 7ED426           (     ROMbasic.ASM):03188                   JMP  LAC46          PROCESS THE ERROR 
                      (     ROMbasic.ASM):03189         ; COPY MANTISSA FROM FPA2 TO FPA0                      
E672 9E13             (     ROMbasic.ASM):03190         LBC0B     LDX  FPA2           * MOVE TOP 2 BYTES 
E674 9F50             (     ROMbasic.ASM):03191                   STX  FPA0           * 
E676 9E15             (     ROMbasic.ASM):03192                   LDX  FPA2+2         = MOVE BOTTOM 2 BYTES 
E678 9F52             (     ROMbasic.ASM):03193                   STX  FPA0+2         = 
E67A 39               (     ROMbasic.ASM):03194                   RTS                  
                      (     ROMbasic.ASM):03195         ; COPY A PACKED FP NUMBER FROM (X) TO FPA0                      
E67B 3402             (     ROMbasic.ASM):03196         LBC14     PSHS A              SAVE ACCA 
E67D EC01             (     ROMbasic.ASM):03197                   LDD  1,X            GET TOP TWO MANTISSA BYTES 
E67F 9754             (     ROMbasic.ASM):03198                   STA  FP0SGN         SAVE MS BYTE OF MANTISSA AS MANTISSA SIGN 
E681 8A80             (     ROMbasic.ASM):03199                   ORA  #$80           UNPACK MS BYTE 
E683 DD50             (     ROMbasic.ASM):03200                   STD  FPA0           SAVE UNPACKED TOP 2 MANTISSA BYTES 
E685 0F63             (     ROMbasic.ASM):03201                   CLR  FPSBYT         CLEAR MANTISSA SUB BYTE 
E687 E684             (     ROMbasic.ASM):03202                   LDB  ,X             GET EXPONENT TO ACCB 
E689 AE03             (     ROMbasic.ASM):03203                   LDX  3,X            * MOVE LAST 2 
E68B 9F52             (     ROMbasic.ASM):03204                   STX  FPA0+2         * MANTISSA BYTES 
E68D D74F             (     ROMbasic.ASM):03205                   STB  FP0EXP         SAVE EXPONENT 
E68F 3582             (     ROMbasic.ASM):03206                   PULS A,PC           RESTORE ACCA AND RETURN 
                      (     ROMbasic.ASM):03207                                        
E691 8E0045           (     ROMbasic.ASM):03208         LBC2A     LDX  #V45           POINT X TO MANTISSA OF FPA4 
E694 2006             (     ROMbasic.ASM):03209                   BRA  LBC35          MOVE FPA0 TO FPA4 
E696 8E0040           (     ROMbasic.ASM):03210         LBC2F     LDX  #V40           POINT X TO MANTISSA OF FPA3 
E699 8C               (     ROMbasic.ASM):03211                   FCB  SKP2           SKIP TWO BYTES 
E69A 9E3B             (     ROMbasic.ASM):03212         LBC33     LDX  VARDES         POINT X TO VARIABLE DESCRIPTOR IN VARDES 
                      (     ROMbasic.ASM):03213         ; PACK FPA0 AND MOVE IT TO ADDRESS IN X                      
E69C 964F             (     ROMbasic.ASM):03214         LBC35     LDA  FP0EXP         * COPY EXPONENT 
E69E A784             (     ROMbasic.ASM):03215                   STA  ,X             * 
E6A0 9654             (     ROMbasic.ASM):03216                   LDA  FP0SGN         GET MANTISSA SIGN BIT 
E6A2 8A7F             (     ROMbasic.ASM):03217                   ORA  #$7F           MASK THE BOTTOM 7 BITS 
E6A4 9450             (     ROMbasic.ASM):03218                   ANDA FPA0           AND BIT 7 OF MANTISSA SIGN INTO BIT 7 OF MS BYTE 
E6A6 A701             (     ROMbasic.ASM):03219                   STA  1,X            SAVE MS BYTE 
E6A8 9651             (     ROMbasic.ASM):03220                   LDA  FPA0+1         * MOVE 2ND MANTISSA BYTE 
E6AA A702             (     ROMbasic.ASM):03221                   STA  2,X            * 
E6AC DE52             (     ROMbasic.ASM):03222                   LDU  FPA0+2         = MOVE BOTTOM 2 MANTISSA BYTES 
E6AE EF03             (     ROMbasic.ASM):03223                   STU  3,X            = 
E6B0 39               (     ROMbasic.ASM):03224                   RTS                  
                      (     ROMbasic.ASM):03225         ; MOVE FPA1 TO FPA0 RETURN W/MANTISSA SIGN IN ACCA                      
E6B1 9661             (     ROMbasic.ASM):03226         LBC4A     LDA  FP1SGN         * COPY MANTISSA SIGN FROM 
E6B3 9754             (     ROMbasic.ASM):03227         LBC4C     STA  FP0SGN         * FPA1 TO FPA0 
E6B5 9E5C             (     ROMbasic.ASM):03228                   LDX  FP1EXP         = COPY EXPONENT + MS BYTE FROM 
E6B7 9F4F             (     ROMbasic.ASM):03229                   STX  FP0EXP         = FPA1 TO FPA0 
E6B9 0F63             (     ROMbasic.ASM):03230                   CLR  FPSBYT         CLEAR MANTISSA SUB BYTE 
E6BB 965E             (     ROMbasic.ASM):03231                   LDA  FPA1+1         * COPY 2ND MANTISSA BYTE 
E6BD 9751             (     ROMbasic.ASM):03232                   STA  FPA0+1         * FROM FPA1 TO FPA0 
E6BF 9654             (     ROMbasic.ASM):03233                   LDA  FP0SGN         GET MANTISSA SIGN 
E6C1 9E5F             (     ROMbasic.ASM):03234                   LDX  FPA1+2         * COPY 3RD AND 4TH MANTISSA BYTE 
E6C3 9F52             (     ROMbasic.ASM):03235                   STX  FPA0+2         * FROM FPA1 TO FPA0 
E6C5 39               (     ROMbasic.ASM):03236                   RTS                  
                      (     ROMbasic.ASM):03237         ; TRANSFER FPA0 TO FPA1                      
E6C6 DC4F             (     ROMbasic.ASM):03238         LBC5F     LDD  FP0EXP         * TRANSFER EXPONENT & MS BYTE 
E6C8 DD5C             (     ROMbasic.ASM):03239                   STD  FP1EXP         * 
E6CA 9E51             (     ROMbasic.ASM):03240                   LDX  FPA0+1         = TRANSFER MIDDLE TWO BYTES 
E6CC 9F5E             (     ROMbasic.ASM):03241                   STX  FPA1+1         = 
E6CE 9E53             (     ROMbasic.ASM):03242                   LDX  FPA0+3         * TRANSFER BOTTOM TWO BYTES 
E6D0 9F60             (     ROMbasic.ASM):03243                   STX  FPA1+3         * 
E6D2 4D               (     ROMbasic.ASM):03244                   TSTA                SET FLAGS ACCORDING TO EXPONENT 
E6D3 39               (     ROMbasic.ASM):03245                   RTS                  
                      (     ROMbasic.ASM):03246         ; CHECK FPA0; RETURN ACCB = 0 IF FPA0 = 0,                      
                      (     ROMbasic.ASM):03247         ; ACCB = $FF IF FPA0 = NEGATIVE, ACCB = 1 IF FPA0 = POSITIVE                      
E6D4 D64F             (     ROMbasic.ASM):03248         LBC6D     LDB  FP0EXP         GET EXPONENT 
E6D6 2708             (     ROMbasic.ASM):03249                   BEQ  LBC79          BRANCH IF FPA0 = 0 
E6D8 D654             (     ROMbasic.ASM):03250         LBC71     LDB  FP0SGN         GET SIGN OF MANTISSA 
E6DA 59               (     ROMbasic.ASM):03251         LBC73     ROLB                BIT 7 TO CARRY 
E6DB C6FF             (     ROMbasic.ASM):03252                   LDB  #$FF           NEGATIVE FLAG 
E6DD 2501             (     ROMbasic.ASM):03253                   BCS  LBC79          BRANCH IF NEGATIVE MANTISSA 
E6DF 50               (     ROMbasic.ASM):03254                   NEGB                ACCB = 1 IF POSITIVE MANTISSA 
E6E0 39               (     ROMbasic.ASM):03255         LBC79     RTS                  
                      (     ROMbasic.ASM):03256                                        
                      (     ROMbasic.ASM):03257         ; SGN                          
E6E1 8DF1             (     ROMbasic.ASM):03258         SGN       BSR  LBC6D          SET ACCB ACCORDING TO SIGN OF FPA0 
                      (     ROMbasic.ASM):03259         ; CONVERT A SIGNED NUMBER IN ACCB INTO A FLOATING POINT NUMBER                      
E6E3 D750             (     ROMbasic.ASM):03260         LBC7C     STB  FPA0           SAVE ACCB IN FPA0 
E6E5 0F51             (     ROMbasic.ASM):03261                   CLR  FPA0+1         CLEAR NUMBER 2 MANTISSA BYTE OF FPA0 
E6E7 C688             (     ROMbasic.ASM):03262                   LDB  #$88           EXPONENT REQUIRED IF FPA0 IS TO BE AN INTEGER 
E6E9 9650             (     ROMbasic.ASM):03263         LBC82     LDA  FPA0           GET MS BYTE OF MANTISSA 
E6EB 8080             (     ROMbasic.ASM):03264                   SUBA #$80           SET CARRY IF POSITIVE MANTISSA 
E6ED D74F             (     ROMbasic.ASM):03265         LBC86     STB  FP0EXP         SAVE EXPONENT 
E6EF DC74             (     ROMbasic.ASM):03266                   LDD  ZERO           * ZERO OUT ACCD AND 
E6F1 DD52             (     ROMbasic.ASM):03267                   STD  FPA0+2         * BOTTOM HALF OF FPA0 
E6F3 9763             (     ROMbasic.ASM):03268                   STA  FPSBYT         CLEAR SUB BYTE 
E6F5 9754             (     ROMbasic.ASM):03269                   STA  FP0SGN         CLEAR SIGN OF FPA0 MANTISSA 
E6F7 7EE47F           (     ROMbasic.ASM):03270                   JMP  LBA18          GO NORMALIZE FPA0 
                      (     ROMbasic.ASM):03271                                        
                      (     ROMbasic.ASM):03272         ; ABS                          
E6FA 0F54             (     ROMbasic.ASM):03273         ABS       CLR  FP0SGN         FORCE MANTISSA SIGN OF FPA0 POSITIVE 
E6FC 39               (     ROMbasic.ASM):03274                   RTS                  
                      (     ROMbasic.ASM):03275         ; COMPARE A PACKED FLOATING POINT NUMBER POINTED TO                      
                      (     ROMbasic.ASM):03276         ; BY (X) TO AN UNPACKED FP NUMBER IN FPA0. RETURN                      
                      (     ROMbasic.ASM):03277         ; ZERO FLAG SET AND ACCB = 0, IF EQUAL; ACCB = 1 IF                      
                      (     ROMbasic.ASM):03278         ; FPA0 > (X); ACCB = $FF IF FPA0 < (X)                      
E6FD E684             (     ROMbasic.ASM):03279         LBC96     LDB  ,X             CHECK EXPONENT OF (X) 
E6FF 27D3             (     ROMbasic.ASM):03280                   BEQ  LBC6D          BRANCH IF FPA = 0 
E701 E601             (     ROMbasic.ASM):03281                   LDB  1,X            GET MS BYTE OF MANTISSA OF (X) 
E703 D854             (     ROMbasic.ASM):03282                   EORB FP0SGN         EOR WITH SIGN OF FPA0 
E705 2BD1             (     ROMbasic.ASM):03283                   BMI  LBC71          BRANCH IF SIGNS NOT = 
                      (     ROMbasic.ASM):03284         ; COMPARE FPA0 WITH FP NUMBER POINTED TO BY (X).                      
                      (     ROMbasic.ASM):03285         ; FPA0 IS NORMALIZED, (X) IS PACKED.                      
E707 D64F             (     ROMbasic.ASM):03286         LBCA0     LDB  FP0EXP         * GET EXPONENT OF 
E709 E184             (     ROMbasic.ASM):03287                   CMPB ,X             * FPA0, COMPARE TO EXPONENT OF 
E70B 261D             (     ROMbasic.ASM):03288                   BNE  LBCC3          * (X) AND BRANCH IF <>. 
E70D E601             (     ROMbasic.ASM):03289                   LDB  1,X            * GET MS BYTE OF (X), KEEP ONLY 
E70F CA7F             (     ROMbasic.ASM):03290                   ORB  #$7F           * THE SIGN BIT - 'AND' THE BOTTOM 7 
E711 D450             (     ROMbasic.ASM):03291                   ANDB FPA0           * BITS OF FPA0 INTO ACCB 
E713 E101             (     ROMbasic.ASM):03292                   CMPB 1,X            = COMPARE THE BOTTOM 7 BITS OF THE MANTISSA 
E715 2613             (     ROMbasic.ASM):03293                   BNE  LBCC3          = MS BYTE AND BRANCH IF <> 
E717 D651             (     ROMbasic.ASM):03294                   LDB  FPA0+1         * COMPARE 2ND BYTE 
E719 E102             (     ROMbasic.ASM):03295                   CMPB 2,X            * OF MANTISSA, 
E71B 260D             (     ROMbasic.ASM):03296                   BNE  LBCC3          * BRANCH IF <> 
E71D D652             (     ROMbasic.ASM):03297                   LDB  FPA0+2         = COMPARE 3RD BYTE 
E71F E103             (     ROMbasic.ASM):03298                   CMPB 3,X            = OF MANTISSA, 
E721 2607             (     ROMbasic.ASM):03299                   BNE  LBCC3          = BRANCH IF <> 
E723 D653             (     ROMbasic.ASM):03300                   LDB  FPA0+3         * SUBTRACT LS BYTE 
E725 E004             (     ROMbasic.ASM):03301                   SUBB 4,X            * OF (X) FROM LS BYTE OF 
E727 2601             (     ROMbasic.ASM):03302                   BNE  LBCC3          * FPA0, BRANCH IF <> 
E729 39               (     ROMbasic.ASM):03303                   RTS                 RETURN IF FP (X) = FPA0 
E72A 56               (     ROMbasic.ASM):03304         LBCC3     RORB                SHIFT CARRY TO BIT 7; CARRY SET IF FPA0 < (X) 
E72B D854             (     ROMbasic.ASM):03305                   EORB FP0SGN         TOGGLE SIZE COMPARISON BIT IF FPA0 IS NEGATIVE 
E72D 20AB             (     ROMbasic.ASM):03306                   BRA  LBC73          GO SET ACCB ACCORDING TO COMPARISON 
                      (     ROMbasic.ASM):03307         ; DE-NORMALIZE FPA0 : SHIFT THE MANTISSA UNTIL THE BINARY POINT IS TO THE RIGHT                      
                      (     ROMbasic.ASM):03308         ; OF THE LEAST SIGNIFICANT BYTE OF THE MANTISSA                      
E72F D64F             (     ROMbasic.ASM):03309         LBCC8     LDB  FP0EXP         GET EXPONENT OF FPA0 
E731 273D             (     ROMbasic.ASM):03310                   BEQ  LBD09          ZERO MANTISSA IF FPA0 = 0 
E733 C0A0             (     ROMbasic.ASM):03311                   SUBB #$A0           SUBTRACT $A0 FROM FPA0 EXPONENT T THIS WILL YIELD 
                      (     ROMbasic.ASM):03312         ;                             THE NUMBER OF SHIFTS REQUIRED TO DENORMALIZE FPA0. WHEN 
                      (     ROMbasic.ASM):03313         ;                             THE EXPONENT OF FPA0 IS = ZERO, THEN THE BINARY POINT 
                      (     ROMbasic.ASM):03314         ;                             WILL BE TO THE RIGHT OF THE MANTISSA 
E735 9654             (     ROMbasic.ASM):03315                   LDA  FP0SGN         TEST SIGN OF FPA0 MANTISSA 
E737 2A05             (     ROMbasic.ASM):03316                   BPL  LBCD7          BRANCH IF POSITIVE 
E739 035B             (     ROMbasic.ASM):03317                   COM  FPCARY         COMPLEMENT CARRY IN BYTE 
E73B BDE4E2           (     ROMbasic.ASM):03318                   JSR  LBA7B          NEGATE MANTISSA OF FPA0 
E73E 8E004F           (     ROMbasic.ASM):03319         LBCD7     LDX  #FP0EXP        POINT X TO FPA0 
E741 C1F8             (     ROMbasic.ASM):03320                   CMPB #-8            EXPONENT DIFFERENCE < -8? 
E743 2E06             (     ROMbasic.ASM):03321                   BGT  LBCE4          YES 
E745 BDE515           (     ROMbasic.ASM):03322                   JSR  LBAAE          SHIFT FPA0 RIGHT UNTIL FPA0 EXPONENT = $A0 
E748 0F5B             (     ROMbasic.ASM):03323                   CLR  FPCARY         CLEAR CARRY IN BYTE 
E74A 39               (     ROMbasic.ASM):03324                   RTS                  
E74B 0F5B             (     ROMbasic.ASM):03325         LBCE4     CLR  FPCARY         CLEAR CARRY IN BYTE 
E74D 9654             (     ROMbasic.ASM):03326                   LDA  FP0SGN         * GET SIGN OF FPA0 MANTISSA 
E74F 49               (     ROMbasic.ASM):03327                   ROLA                * ROTATE IT INTO THE CARRY FLAG 
E750 0650             (     ROMbasic.ASM):03328                   ROR  FPA0           ROTATE CARRY (MANTISSA SIGN) INTO BIT 7 
                      (     ROMbasic.ASM):03329         ;                             OF LS BYTE OF MANTISSA 
E752 7EE521           (     ROMbasic.ASM):03330                   JMP  LBABA          DE-NORMALIZE FPA0 
                      (     ROMbasic.ASM):03331                                        
                      (     ROMbasic.ASM):03332         ; INT                          
                      (     ROMbasic.ASM):03333         ; THE INT STATEMENT WILL "DENORMALIZE" FPA0 - THAT IS IT WILL SHIFT THE BINARY POINT                      
                      (     ROMbasic.ASM):03334         ; TO THE EXTREME RIGHT OF THE MANTISSA TO FORCE ITS EXPONENT TO BE $AO. ONCE                      
                      (     ROMbasic.ASM):03335         ; THIS IS DONE THE MANTISSA OF FPA0 WILL CONTAIN THE FOUR LEAST SIGNIFICANT                      
                      (     ROMbasic.ASM):03336         ; BYTES OF THE INTEGER PORTION OF FPA0. AT THE CONCLUSION OF THE DE-NORMALIZATION                      
                      (     ROMbasic.ASM):03337         ; ONLY THE INTEGER PORTION OF FPA0 WILL REMAIN.                      
                      (     ROMbasic.ASM):03338         ;                              
E755 D64F             (     ROMbasic.ASM):03339         INT       LDB  FP0EXP         GET EXPONENT OF FPA0 
E757 C1A0             (     ROMbasic.ASM):03340                   CMPB #$A0           LARGEST POSSIBLE INTEGER EXPONENT 
E759 241D             (     ROMbasic.ASM):03341                   BCC  LBD11          RETURN IF FPA0 >= 32768 
E75B 8DD2             (     ROMbasic.ASM):03342                   BSR  LBCC8          SHIFT THE BINARY POINT ONE TO THE RIGHT OF THE 
                      (     ROMbasic.ASM):03343         ;                             LS BYTE OF THE FPA0 MANTISSA 
E75D D763             (     ROMbasic.ASM):03344                   STB  FPSBYT         ACCB = 0: ZERO OUT THE SUB BYTE 
E75F 9654             (     ROMbasic.ASM):03345                   LDA  FP0SGN         GET MANTISSA SIGN 
E761 D754             (     ROMbasic.ASM):03346                   STB  FP0SGN         FORCE MANTISSA SIGN TO BE POSITIVE 
E763 8080             (     ROMbasic.ASM):03347                   SUBA #$80           SET CARRY IF MANTISSA 
E765 86A0             (     ROMbasic.ASM):03348                   LDA  #$A0           * GET DENORMALIZED EXPONENT AND 
E767 974F             (     ROMbasic.ASM):03349                   STA  FP0EXP         * SAVE IT IN FPA0 EXPONENT 
E769 9653             (     ROMbasic.ASM):03350                   LDA  FPA0+3         = GET LS BYTE OF FPA0 AND 
E76B 9701             (     ROMbasic.ASM):03351                   STA  CHARAC         = SAVE IT IN CHARAC 
E76D 7EE47F           (     ROMbasic.ASM):03352                   JMP  LBA18          NORMALIZE FPA0 
                      (     ROMbasic.ASM):03353                                        
E770 D750             (     ROMbasic.ASM):03354         LBD09     STB  FPA0           * LOAD MANTISSA OF FPA0 WITH CONTENTS OF ACCB 
E772 D751             (     ROMbasic.ASM):03355                   STB  FPA0+1         * 
E774 D752             (     ROMbasic.ASM):03356                   STB  FPA0+2         * 
E776 D753             (     ROMbasic.ASM):03357                   STB  FPA0+3         * 
E778 39               (     ROMbasic.ASM):03358         LBD11     RTS                 * 
                      (     ROMbasic.ASM):03359                                        
                      (     ROMbasic.ASM):03360         ; CONVERT ASCII STRING TO FLOATING POINT                      
E779 9E74             (     ROMbasic.ASM):03361         LBD12     LDX  ZERO           (X) = 0 
E77B 9F54             (     ROMbasic.ASM):03362                   STX  FP0SGN         * ZERO OUT FPA0 & THE SIGN FLAG (COEFCT) 
E77D 9F4F             (     ROMbasic.ASM):03363                   STX  FP0EXP         * 
E77F 9F51             (     ROMbasic.ASM):03364                   STX  FPA0+1         * 
E781 9F52             (     ROMbasic.ASM):03365                   STX  FPA0+2         * 
E783 9F47             (     ROMbasic.ASM):03366                   STX  V47            INITIALIZE EXPONENT & EXPONENT SIGN FLAG TO ZERO 
E785 9F45             (     ROMbasic.ASM):03367                   STX  V45            INITIALIZE RIGHT DECIMAL CTR & DECIMAL PT FLAG TO 0 
E787 2564             (     ROMbasic.ASM):03368                   BCS  LBD86          IF CARRY SET (NUMERIC CHARACTER), ASSUME ACCA CONTAINS FIRST 
                      (     ROMbasic.ASM):03369         ;         NUMERIC CHAR, SIGN IS POSITIVE AND SKIP THE RAM HOOK  
E789 BDEEB6           (     ROMbasic.ASM):03370                   JSR  XVEC19         CALL EXTENDED BASIC ADD-IN 
E78C 812D             (     ROMbasic.ASM):03371         LBD25     CMPA #'-            * CHECK FOR A LEADING MINUS SIGN AND BRANCH 
E78E 2604             (     ROMbasic.ASM):03372                   BNE  LBD2D          * IF NO MINUS SIGN 
E790 0355             (     ROMbasic.ASM):03373                   COM  COEFCT         TOGGLE SIGN; 0 = +; FF = - 
E792 2004             (     ROMbasic.ASM):03374                   BRA  LBD31          INTERPRET THE REST OF THE STRING 
E794 812B             (     ROMbasic.ASM):03375         LBD2D     CMPA #'+            * CHECK FOR LEADING PLUS SlGN AND BRANCH 
E796 2604             (     ROMbasic.ASM):03376                   BNE  LBD35          * IF NOT A PLUS SIGN 
E798 9D7C             (     ROMbasic.ASM):03377         LBD31     JSR  GETNCH         GET NEXT INPUT CHARACTER FROM BASIC 
E79A 2551             (     ROMbasic.ASM):03378                   BCS  LBD86          BRANCH IF NUMERIC CHARACTER 
E79C 812E             (     ROMbasic.ASM):03379         LBD35     CMPA #'.            DECIMAL POlNT? 
E79E 2728             (     ROMbasic.ASM):03380                   BEQ  LBD61          YES 
E7A0 8145             (     ROMbasic.ASM):03381                   CMPA #'E            "E" SHORTHAND FORM (SCIENTIFIC NOTATION)? 
E7A2 2628             (     ROMbasic.ASM):03382                   BNE  LBD65          NO 
                      (     ROMbasic.ASM):03383         ; EVALUATE EXPONENT OF EXPONENTIAL FORMAT                      
E7A4 9D7C             (     ROMbasic.ASM):03384                   JSR  GETNCH         GET NEXT INPUT CHARACTER FROM BASIC 
E7A6 2564             (     ROMbasic.ASM):03385                   BCS  LBDA5          BRANCH IF NUMERIC 
E7A8 81A7             (     ROMbasic.ASM):03386                   CMPA #TOK_MINUS     MINUS TOKEN? 
E7AA 270E             (     ROMbasic.ASM):03387                   BEQ  LBD53          YES 
E7AC 812D             (     ROMbasic.ASM):03388                   CMPA #'-            ASCII MINUS? 
E7AE 270A             (     ROMbasic.ASM):03389                   BEQ  LBD53          YES 
E7B0 81A6             (     ROMbasic.ASM):03390                   CMPA #TOK_PLUS      PLUS TOKEN? 
E7B2 2708             (     ROMbasic.ASM):03391                   BEQ  LBD55          YES 
E7B4 812B             (     ROMbasic.ASM):03392                   CMPA #'+            ASCII PLUS? 
E7B6 2704             (     ROMbasic.ASM):03393                   BEQ  LBD55          YES 
E7B8 2006             (     ROMbasic.ASM):03394                   BRA  LBD59          BRANCH IF NO SIGN FOUND 
E7BA 0348             (     ROMbasic.ASM):03395         LBD53     COM  V48            SET EXPONENT SIGN FLAG TO NEGATIVE 
                      (     ROMbasic.ASM):03396         ; STRIP A DECIMAL NUMBER FROM BASIC LINE, CONVERT IT TO BINARY IN V47                      
E7BC 9D7C             (     ROMbasic.ASM):03397         LBD55     JSR  GETNCH         GET NEXT INPUT CHARACTER FROM BASIC 
E7BE 254C             (     ROMbasic.ASM):03398                   BCS  LBDA5          IF NUMERIC CHARACTER, CONVERT TO BINARY 
E7C0 0D48             (     ROMbasic.ASM):03399         LBD59     TST  V48            * CHECK EXPONENT SIGN FLAG 
E7C2 2708             (     ROMbasic.ASM):03400                   BEQ  LBD65          * AND BRANCH IF POSITIVE 
E7C4 0047             (     ROMbasic.ASM):03401                   NEG  V47            NEGATE VALUE OF EXPONENT 
E7C6 2004             (     ROMbasic.ASM):03402                   BRA  LBD65           
E7C8 0346             (     ROMbasic.ASM):03403         LBD61     COM  V46            *TOGGLE DECIMAL PT FLAG AND INTERPRET ANOTHER 
E7CA 26CC             (     ROMbasic.ASM):03404                   BNE  LBD31          *CHARACTER IF <> 0 - TERMINATE INTERPRETATION 
                      (     ROMbasic.ASM):03405         ;         IF   SECOND DECIMAL POINT  
                      (     ROMbasic.ASM):03406         ; ADJUST FPA0 FOR THE DECIMAL EXPONENT IN V47                      
E7CC 9647             (     ROMbasic.ASM):03407         LBD65     LDA  V47            * GET EXPONENT, SUBTRACT THE NUMBER OF 
E7CE 9045             (     ROMbasic.ASM):03408                   SUBA V45            * PLACES TO THE RIGHT OF DECIMAL POINT 
E7D0 9747             (     ROMbasic.ASM):03409                   STA  V47            * AND RESAVE IT. 
E7D2 2712             (     ROMbasic.ASM):03410                   BEQ  LBD7F          EXIT ROUTINE IF ADJUSTED EXPONENT = ZERO 
E7D4 2A09             (     ROMbasic.ASM):03411                   BPL  LBD78          BRANCH IF POSITIVE EXPONENT 
E7D6 BDE5E9           (     ROMbasic.ASM):03412         LBD6F     JSR  LBB82          DIVIDE FPA0 BY 10 
E7D9 0C47             (     ROMbasic.ASM):03413                   INC  V47            INCREMENT EXPONENT COUNTER (MULTIPLY BY 10) 
E7DB 26F9             (     ROMbasic.ASM):03414                   BNE  LBD6F          KEEP MULTIPLYING 
E7DD 2007             (     ROMbasic.ASM):03415                   BRA  LBD7F          EXIT ROUTINE 
E7DF BDE5D1           (     ROMbasic.ASM):03416         LBD78     JSR  LBB6A          MULTIPLY FPA0 BY 10 
E7E2 0A47             (     ROMbasic.ASM):03417                   DEC  V47            DECREMENT EXPONENT COUNTER (DIVIDE BY 10) 
E7E4 26F9             (     ROMbasic.ASM):03418                   BNE  LBD78          KEEP MULTIPLYING 
E7E6 9655             (     ROMbasic.ASM):03419         LBD7F     LDA  COEFCT         GET THE SIGN FLAG 
E7E8 2A8E             (     ROMbasic.ASM):03420                   BPL  LBD11          RETURN IF POSITIVE 
E7EA 7EE950           (     ROMbasic.ASM):03421                   JMP  LBEE9          TOGGLE MANTISSA SIGN OF FPA0, IF NEGATIVE 
                      (     ROMbasic.ASM):03422         ;MULTIPLY FPA0 BY TEN AND ADD ACCA TO THE RESULT                      
E7ED D645             (     ROMbasic.ASM):03423         LBD86     LDB  V45            *GET THE RIGHT DECIMAL COUNTER AND SUBTRACT 
E7EF D046             (     ROMbasic.ASM):03424                   SUBB V46            *THE DECIMAL POINT FLAG FROM IT. IF DECIMAL POINT 
E7F1 D745             (     ROMbasic.ASM):03425                   STB  V45            *FLAG=0, NOTHING HAPPENS. IF DECIMAL POINT FLAG IS 
                      (     ROMbasic.ASM):03426         ;                             -1, THEN RIGHT DECIMAL COUNTER IS INCREMENTED BY ONE 
E7F3 3402             (     ROMbasic.ASM):03427                   PSHS A              SAVE NEW DIGIT ON STACK 
E7F5 BDE5D1           (     ROMbasic.ASM):03428                   JSR  LBB6A          MULTIPLY FPA0 BY 10 
E7F8 3504             (     ROMbasic.ASM):03429                   PULS B              GET NEW DIGIT BACK 
E7FA C030             (     ROMbasic.ASM):03430                   SUBB #'0            MASK OFF ASCII 
E7FC 8D02             (     ROMbasic.ASM):03431                   BSR  LBD99          ADD ACCB TO FPA0 
E7FE 2098             (     ROMbasic.ASM):03432                   BRA  LBD31          GET ANOTHER CHARACTER FROM BASIC 
E800 BDE696           (     ROMbasic.ASM):03433         LBD99     JSR  LBC2F          PACK FPA0 AND SAVE IT IN FPA3 
E803 BDE6E3           (     ROMbasic.ASM):03434                   JSR  LBC7C          CONVERT ACCB TO FP NUMBER IN FPA0 
E806 8E0040           (     ROMbasic.ASM):03435                   LDX  #V40           * ADD FPA0 TO 
E809 7EE429           (     ROMbasic.ASM):03436                   JMP  LB9C2          * FPA3 
                      (     ROMbasic.ASM):03437                                        
                      (     ROMbasic.ASM):03438                                        
E80C D647             (     ROMbasic.ASM):03439         LBDA5     LDB  V47             
E80E 58               (     ROMbasic.ASM):03440                   ASLB                TIMES 2 
E80F 58               (     ROMbasic.ASM):03441                   ASLB                TIMES 4 
E810 DB47             (     ROMbasic.ASM):03442                   ADDB V47            ADD 1 = TIMES 5 
E812 58               (     ROMbasic.ASM):03443                   ASLB                TIMES 10 
E813 8030             (     ROMbasic.ASM):03444                   SUBA #'0            *MASK OFF ASCII FROM ACCA, PUSH 
E815 3404             (     ROMbasic.ASM):03445                   PSHS B              *RESULT ONTO THE STACK AND 
E817 ABE0             (     ROMbasic.ASM):03446                   ADDA ,S+            ADD lT TO ACCB 
E819 9747             (     ROMbasic.ASM):03447                   STA  V47            SAVE IN V47 
E81B 209F             (     ROMbasic.ASM):03448                   BRA  LBD55          INTERPRET ANOTHER CHARACTER 
                      (     ROMbasic.ASM):03449         ;                              
E81D 9B3EBC1FFD       (     ROMbasic.ASM):03450         LBDB6     FCB  $9B,$3E,$BC,$1F,$FD * 99999999.9 
E822 9E6E6B27FD       (     ROMbasic.ASM):03451         LBDBB     FCB  $9E,$6E,$6B,$27,$FD * 999999999 
E827 9E6E6B2800       (     ROMbasic.ASM):03452         LBDC0     FCB  $9E,$6E,$6B,$28,$00 * 1E + 09 
                      (     ROMbasic.ASM):03453         ;                              
E82C 8ED3C7           (     ROMbasic.ASM):03454         LBDC5     LDX  #LABE8-1       POINT X TO " IN " MESSAGE 
E82F 8D0C             (     ROMbasic.ASM):03455                   BSR  LBDD6          COPY A STRING FROM (X) TO CONSOLE OUT 
E831 DC68             (     ROMbasic.ASM):03456                   LDD  CURLIN         GET CURRENT BASIC LINE NUMBER TO ACCD 
                      (     ROMbasic.ASM):03457         ; CONVERT VALUE IN ACCD INTO A DECIMAL NUMBER                      
                      (     ROMbasic.ASM):03458         ; AND PRINT IT TO CONSOLE OUT                      
E833 DD50             (     ROMbasic.ASM):03459         LBDCC     STD  FPA0           SAVE ACCD IN TOP HALF OF FPA0 
E835 C690             (     ROMbasic.ASM):03460                   LDB  #$90           REQ’D EXPONENT IF TOP HALF OF ACCD = INTEGER 
E837 43               (     ROMbasic.ASM):03461                   COMA                SET CARRY FLAG - FORCE POSITIVE MANTISSA 
E838 BDE6ED           (     ROMbasic.ASM):03462                   JSR  LBC86          ZERO BOTTOM HALF AND SIGN OF FPA0, THEN 
                      (     ROMbasic.ASM):03463         ;         SAVE EXPONENT AND NORMALIZE IT  
E83B 8D03             (     ROMbasic.ASM):03464                   BSR  LBDD9          CONVERT FP NUMBER TO ASCII STRING 
E83D 7EE403           (     ROMbasic.ASM):03465         LBDD6     JMP  LB99C          COPY A STRING FROM (X) TO CONSOLE OUT 
                      (     ROMbasic.ASM):03466                                        
                      (     ROMbasic.ASM):03467         ; CONVERT FP NUMBER TO ASCII STRING                      
E840 CE01F1           (     ROMbasic.ASM):03468         LBDD9     LDU  #STRBUF+3      POINT U TO BUFFER WHICH WILL NOT CAUSE 
                      (     ROMbasic.ASM):03469         ;                             THE STRING TO BE STORED IN STRING SPACE 
E843 8620             (     ROMbasic.ASM):03470         LBDDC     LDA  #SPACE         SPACE = DEFAULT SIGN FOR POSITIVE # 
E845 D654             (     ROMbasic.ASM):03471                   LDB  FP0SGN         GET SIGN OF FPA0 
E847 2A02             (     ROMbasic.ASM):03472                   BPL  LBDE4          BRANCH IF POSITIVE 
E849 862D             (     ROMbasic.ASM):03473                   LDA  #'-            ASCII MINUS SIGN 
E84B A7C0             (     ROMbasic.ASM):03474         LBDE4     STA  ,U+            STORE SIGN OF NUMBER 
E84D DF64             (     ROMbasic.ASM):03475                   STU  COEFPT         SAVE BUFFER POINTER 
E84F 9754             (     ROMbasic.ASM):03476                   STA  FP0SGN         SAVE SIGN (IN ASCII) 
E851 8630             (     ROMbasic.ASM):03477                   LDA  #'0            ASCII ZERO IF EXPONENT = 0 
E853 D64F             (     ROMbasic.ASM):03478                   LDB  FP0EXP         GET FPA0 EXPONENT 
E855 102700C6         (     ROMbasic.ASM):03479                   LBEQ LBEB8          BRANCH IF FPA0 = 0 
E859 4F               (     ROMbasic.ASM):03480                   CLRA                BASE 10 EXPONENT=0 FOR FP NUMBER > 1 
E85A C180             (     ROMbasic.ASM):03481                   CMPB #$80           CHECK EXPONENT 
E85C 2208             (     ROMbasic.ASM):03482                   BHI  LBDFF          BRANCH IF FP NUMBER > 1 
                      (     ROMbasic.ASM):03483         ; IF FPA0 < 1.0, MULTIPLY IT BY 1E+09 TO SPEED UP THE CONVERSION PROCESS                      
E85E 8EE827           (     ROMbasic.ASM):03484                   LDX  #LBDC0         POINT X TO FP 1E+09 
E861 BDE531           (     ROMbasic.ASM):03485                   JSR  LBACA          MULTIPLY FPA0 BY (X) 
E864 86F7             (     ROMbasic.ASM):03486                   LDA  #-9            BASE 10 EXPONENT = -9 
E866 9745             (     ROMbasic.ASM):03487         LBDFF     STA  V45            BASE 10 EXPONENT 
                      (     ROMbasic.ASM):03488         ; PSEUDO - NORMALIZE THE FP NUMBER TO A VALUE IN THE RANGE                      
                      (     ROMbasic.ASM):03489         ; OF 999,999,999 RO 99,999,999.9 - THIS IS THE LARGEST                      
                      (     ROMbasic.ASM):03490         ; NUMBER RANGE IN WHICH ALL OF THE DIGITS ARE                      
                      (     ROMbasic.ASM):03491         ; SIGNIFICANT WHICH CAN BE DISPLAYED WITHOUT USING                      
                      (     ROMbasic.ASM):03492         ; SCIENTIFIC NOTATION                      
E868 8EE822           (     ROMbasic.ASM):03493         LBE01     LDX  #LBDBB         POINT X TO FP 999,999,999 
E86B BDE707           (     ROMbasic.ASM):03494                   JSR  LBCA0          COMPARE FPA0 TO 999,999,999 
E86E 2E0F             (     ROMbasic.ASM):03495                   BGT  LBE18          BRANCH IF > 999,999,999 
E870 8EE81D           (     ROMbasic.ASM):03496         LBE09     LDX  #LBDB6         POINT X TO FP 99,999,999.9 
E873 BDE707           (     ROMbasic.ASM):03497                   JSR  LBCA0          COMPARE FPA0 TO 99,999,999.9 
E876 2E0E             (     ROMbasic.ASM):03498                   BGT  LBE1F          BRANCH IF > 99,999,999.9 (IN RANGE) 
E878 BDE5D1           (     ROMbasic.ASM):03499                   JSR  LBB6A          MULTIPLY FPA0 BY 10 
E87B 0A45             (     ROMbasic.ASM):03500                   DEC  V45            SUBTRACT ONE FROM DECIMAL OFFSET 
E87D 20F1             (     ROMbasic.ASM):03501                   BRA  LBE09          PSEUDO - NORMALIZE SOME MORE 
E87F BDE5E9           (     ROMbasic.ASM):03502         LBE18     JSR  LBB82          DIVIDE FPA0 BY 10 
E882 0C45             (     ROMbasic.ASM):03503                   INC  V45            ADD ONE TO BASE 10 EXPONENT 
E884 20E2             (     ROMbasic.ASM):03504                   BRA  LBE01          PSEUDO - NORMALIZE SOME MORE 
E886 BDE41B           (     ROMbasic.ASM):03505         LBE1F     JSR  LB9B4          ADD .5 TO FPA0 (ROUND OFF) 
E889 BDE72F           (     ROMbasic.ASM):03506                   JSR  LBCC8          CONVERT FPA0 TO AN INTEGER 
E88C C601             (     ROMbasic.ASM):03507                   LDB  #1             DEFAULT DECIMAL POINT FLAG (FORCE IMMED DECIMAL PT) 
E88E 9645             (     ROMbasic.ASM):03508                   LDA  V45            * GET BASE 10 EXPONENT AND ADD TEN TO IT 
E890 8B0A             (     ROMbasic.ASM):03509                   ADDA #9+1           * (NUMBER ‘NORMALIZED’ TO 9 PLACES & DECIMAL PT) 
E892 2B09             (     ROMbasic.ASM):03510                   BMI  LBE36          BRANCH IF NUMBER < 1.0 
E894 810B             (     ROMbasic.ASM):03511                   CMPA #9+2           NINE PLACES MAY BE DISPLAYED WITHOUT 
                      (     ROMbasic.ASM):03512         ;         USING SCIENTIFIC NOTATION  
E896 2405             (     ROMbasic.ASM):03513                   BCC  LBE36          BRANCH IF SCIENTIFIC NOTATION REQUIRED 
E898 4A               (     ROMbasic.ASM):03514                   DECA                * SUBTRACT 1 FROM MODIFIED BASE 10 EXPONENT CTR 
E899 1F89             (     ROMbasic.ASM):03515                   TFR  A,B            * AND SAVE IT IN ACCB (DECiMAL POINT FLAG) 
E89B 8602             (     ROMbasic.ASM):03516                   LDA  #2             FORCE EXPONENT = 0 - DON'T USE SCIENTIFIC NOTATION 
E89D 4A               (     ROMbasic.ASM):03517         LBE36     DECA                * SUBTRACT TWO (WITHOUT AFFECTING CARRY) 
E89E 4A               (     ROMbasic.ASM):03518                   DECA                * FROM BASE 10 EXPONENT 
E89F 9747             (     ROMbasic.ASM):03519                   STA  V47            SAVE EXPONENT - ZERO EXPONENT = DO NOT DISPLAY 
                      (     ROMbasic.ASM):03520         ;         IN   SCIENTIFIC NOTATION  
E8A1 D745             (     ROMbasic.ASM):03521                   STB  V45            DECIMAL POINT FLAG - NUMBER OF PLACES TO 
                      (     ROMbasic.ASM):03522         ;         LEFT OF DECIMAL POINT  
E8A3 2E0D             (     ROMbasic.ASM):03523                   BGT  LBE4B          BRANCH IF >= 1 
E8A5 DE64             (     ROMbasic.ASM):03524                   LDU  COEFPT         POINT U TO THE STRING BUFFER 
E8A7 862E             (     ROMbasic.ASM):03525                   LDA  #'.            * STORE A PERIOD 
E8A9 A7C0             (     ROMbasic.ASM):03526                   STA  ,U+            * IN THE BUFFER 
E8AB 5D               (     ROMbasic.ASM):03527                   TSTB CHECK DECIMAL POINT FLAG  
E8AC 2704             (     ROMbasic.ASM):03528                   BEQ  LBE4B          BRANCH IF NOTHING TO LEFT OF DECIMAL POINT 
E8AE 8630             (     ROMbasic.ASM):03529                   LDA  #'0            * STORE A ZERO 
E8B0 A7C0             (     ROMbasic.ASM):03530                   STA  ,U+            * IN THE BUFFER 
                      (     ROMbasic.ASM):03531                                        
                      (     ROMbasic.ASM):03532         ; CONVERT FPA0 INTO A STRING OF ASCII DIGITS                      
E8B2 8EE92C           (     ROMbasic.ASM):03533         LBE4B     LDX  #LBEC5         POINT X TO FP POWER OF 10 MANTISSA 
E8B5 C680             (     ROMbasic.ASM):03534                   LDB  #0+$80         INITIALIZE DIGIT COUNTER TO 0+$80 
                      (     ROMbasic.ASM):03535         ; BIT 7 SET IS USED TO INDICATE THAT THE POWER OF 10 MANTISSA                      
                      (     ROMbasic.ASM):03536         ; IS NEGATIVE. WHEN YOU 'ADD' A NEGATIVE MANTISSA, IT IS                      
                      (     ROMbasic.ASM):03537         ; THE SAME AS SUBTRACTING A POSITIVE ONE AND BIT 7 OF ACCB IS HOW                      
                      (     ROMbasic.ASM):03538         ; THE ROUTINE KNOWS THAT A 'SUBTRACTION' IS OCCURING.                      
E8B7 9653             (     ROMbasic.ASM):03539         LBE50     LDA  FPA0+3         * ADD MANTISSA LS 
E8B9 AB03             (     ROMbasic.ASM):03540                   ADDA 3,X            * BYTE OF FPA0 
E8BB 9753             (     ROMbasic.ASM):03541                   STA  FPA0+3         * AND (X) 
E8BD 9652             (     ROMbasic.ASM):03542                   LDA  FPA0+2         = ADD MANTISSA 
E8BF A902             (     ROMbasic.ASM):03543                   ADCA 2,X            = NUMBER 3 BYTE OF 
E8C1 9752             (     ROMbasic.ASM):03544                   STA  FPA0+2         = FPA0 AND (X) 
E8C3 9651             (     ROMbasic.ASM):03545                   LDA  FPA0+1         * ADD MANTISSA 
E8C5 A901             (     ROMbasic.ASM):03546                   ADCA 1,X            * NUMBER 2 BYTE OF 
E8C7 9751             (     ROMbasic.ASM):03547                   STA  FPA0+1         * FPA0 AND (X) 
E8C9 9650             (     ROMbasic.ASM):03548                   LDA  FPA0           = ADD MANTISSA 
E8CB A984             (     ROMbasic.ASM):03549                   ADCA ,X             = MS BYTE OF 
E8CD 9750             (     ROMbasic.ASM):03550                   STA  FPA0           = FPA0 AND (X) 
E8CF 5C               (     ROMbasic.ASM):03551                   INCB                ADD ONE TO DIGIT COUNTER 
E8D0 56               (     ROMbasic.ASM):03552                   RORB ROTATE CARRY INTO BIT 7  
E8D1 59               (     ROMbasic.ASM):03553                   ROLB                *SET OVERFLOW FLAG AND BRANCH IF CARRY = 1 AND 
E8D2 28E3             (     ROMbasic.ASM):03554                   BVC  LBE50          *POSITIVE MANTISSA OR CARRY = 0 AND NEG MANTISSA 
E8D4 2403             (     ROMbasic.ASM):03555                   BCC  LBE72          BRANCH IF NEGATIVE MANTISSA 
E8D6 C00B             (     ROMbasic.ASM):03556                   SUBB #10+1          * TAKE THE 9’S COMPLEMENT IF 
E8D8 50               (     ROMbasic.ASM):03557                   NEGB                * ADDING MANTISSA 
E8D9 CB2F             (     ROMbasic.ASM):03558         LBE72     ADDB #'0-1          ADD ASCII OFFSET TO DIGIT 
E8DB 3004             (     ROMbasic.ASM):03559                   LEAX 4,X            MOVE TO NEXT POWER OF 10 MANTISSA 
E8DD 1F98             (     ROMbasic.ASM):03560                   TFR  B,A            SAVE DIGIT IN ACCA 
E8DF 847F             (     ROMbasic.ASM):03561                   ANDA #$7F           MASK OFF BIT 7 (ADD/SUBTRACT FLAG) 
E8E1 A7C0             (     ROMbasic.ASM):03562                   STA  ,U+            STORE DIGIT IN STRING BUFFER 
E8E3 0A45             (     ROMbasic.ASM):03563                   DEC  V45            DECREMENT DECIMAL POINT FLAG 
E8E5 2604             (     ROMbasic.ASM):03564                   BNE  LBE84          BRANCH IF NOT TIME FOR DECIMAL POINT 
E8E7 862E             (     ROMbasic.ASM):03565                   LDA  #'.            * STORE DECIMAL POINT IN 
E8E9 A7C0             (     ROMbasic.ASM):03566                   STA  ,U+            * STRING BUFFER 
E8EB 53               (     ROMbasic.ASM):03567         LBE84     COMB                TOGGLE BIT 7 (ADD/SUBTRACT FLAG) 
E8EC C480             (     ROMbasic.ASM):03568                   ANDB #$80           MASK OFF ALL BUT ADD/SUBTRACT FLAG 
E8EE 8CE950           (     ROMbasic.ASM):03569                   CMPX #LBEC5+36      COMPARE X TO END OF MANTISSA TABLE 
E8F1 26C4             (     ROMbasic.ASM):03570                   BNE  LBE50          BRANCH IF NOT AT END OF TABLE 
                      (     ROMbasic.ASM):03571         ; BLANK TRAILING ZEROS AND STORE EXPONENT IF ANY                      
E8F3 A6C2             (     ROMbasic.ASM):03572         LBE8C     LDA  ,-U            GET THE LAST CHARACTER; MOVE POINTER BACK 
E8F5 8130             (     ROMbasic.ASM):03573                   CMPA #'0            WAS IT A ZERO? 
E8F7 27FA             (     ROMbasic.ASM):03574                   BEQ  LBE8C          IGNORE TRAILING ZEROS IF SO 
E8F9 812E             (     ROMbasic.ASM):03575                   CMPA #'.            CHECK FOR DECIMAL POINT 
E8FB 2602             (     ROMbasic.ASM):03576                   BNE  LBE98          BRANCH IF NOT DECIMAL POINT 
E8FD 335F             (     ROMbasic.ASM):03577                   LEAU -1,U           STEP OVER THE DECIMAL POINT 
E8FF 862B             (     ROMbasic.ASM):03578         LBE98     LDA  #'+            ASCII PLUS SIGN 
E901 D647             (     ROMbasic.ASM):03579                   LDB  V47            GET SCIENTIFIC NOTATION EXPONENT 
E903 271C             (     ROMbasic.ASM):03580                   BEQ  LBEBA          BRANCH IF NOT SCIENTIFIC NOTATION 
E905 2A03             (     ROMbasic.ASM):03581                   BPL  LBEA3          BRANCH IF POSITIVE EXPONENT 
E907 862D             (     ROMbasic.ASM):03582                   LDA  #'-            ASCII MINUS SIGN 
E909 50               (     ROMbasic.ASM):03583                   NEGB                NEGATE EXPONENT IF NEGATIVE 
E90A A742             (     ROMbasic.ASM):03584         LBEA3     STA  2,U            STORE EXPONENT SIGN IN STRING 
E90C 8645             (     ROMbasic.ASM):03585                   LDA  #'E            * GET ASCII ‘E’ (SCIENTIFIC NOTATION 
E90E A741             (     ROMbasic.ASM):03586                   STA  1,U            * FLAG) AND SAVE IT IN THE STRING 
E910 862F             (     ROMbasic.ASM):03587                   LDA  #'0-1          INITIALIZE ACCA TO ASCII ZERO 
                      (     ROMbasic.ASM):03588                                        
                      (     ROMbasic.ASM):03589                                        
E912 4C               (     ROMbasic.ASM):03590         LBEAB     INCA                ADD ONE TO 10’S DIGIT OF EXPONENT 
E913 C00A             (     ROMbasic.ASM):03591                   SUBB #10            SUBTRACT 10 FROM ACCB 
E915 24FB             (     ROMbasic.ASM):03592                   BCC  LBEAB          ADD 1 TO 10’S DIGIT IF NO CARRY 
E917 CB3A             (     ROMbasic.ASM):03593                   ADDB #'9+1          CONVERT UNITS DIGIT TO ASCII 
E919 ED43             (     ROMbasic.ASM):03594                   STD  3,U            SAVE EXPONENT IN STRING 
E91B 6F45             (     ROMbasic.ASM):03595                   CLR  5,U            CLEAR LAST BYTE (TERMINATOR) 
E91D 2004             (     ROMbasic.ASM):03596                   BRA  LBEBC          GO RESET POINTER 
E91F A7C4             (     ROMbasic.ASM):03597         LBEB8     STA  ,U             STORE LAST CHARACTER 
E921 6F41             (     ROMbasic.ASM):03598         LBEBA     CLR  1,U            CLEAR LAST BYTE (TERMINATOR - REQUIRED BY 
                      (     ROMbasic.ASM):03599         ;         PRINT SUBROUTINES)    
E923 8E01F1           (     ROMbasic.ASM):03600         LBEBC     LDX  #STRBUF+3      RESET POINTER TO START OF BUFFER 
E926 39               (     ROMbasic.ASM):03601                   RTS                  
                      (     ROMbasic.ASM):03602         ;                              
E927 8000000000       (     ROMbasic.ASM):03603         LBEC0     FCB  $80,$00,$00,$00,$00 FLOATING POINT .5 
                      (     ROMbasic.ASM):03604         ;                              
                      (     ROMbasic.ASM):03605         ;* TABLE OF UNNORMALIZED POWERS OF 10                      
E92C FA0A1F00         (     ROMbasic.ASM):03606         LBEC5     FCB  $FA,$0A,$1F,$00 -100000000 
E930 00989680         (     ROMbasic.ASM):03607         LBEC9     FCB  $00,$98,$96,$80 10000000 
E934 FFF0BDC0         (     ROMbasic.ASM):03608         LBECD     FCB  $FF,$F0,$BD,$C0 -1000000 
E938 000186A0         (     ROMbasic.ASM):03609         LBED1     FCB  $00,$01,$86,$A0 100000 
E93C FFFFD8F0         (     ROMbasic.ASM):03610         LBED5     FCB  $FF,$FF,$D8,$F0 -10000 
E940 000003E8         (     ROMbasic.ASM):03611         LBED9     FCB  $00,$00,$03,$E8 1000 
E944 FFFFFF9C         (     ROMbasic.ASM):03612         LBEDD     FCB  $FF,$FF,$FF,$9C -100 
E948 0000000A         (     ROMbasic.ASM):03613         LBEE1     FCB  $00,$00,$00,$0A 10 
E94C FFFFFFFF         (     ROMbasic.ASM):03614         LBEE5     FCB  $FF,$FF,$FF,$FF -1 
                      (     ROMbasic.ASM):03615         ;                              
                      (     ROMbasic.ASM):03616         ;                              
E950 964F             (     ROMbasic.ASM):03617         LBEE9     LDA  FP0EXP         GET EXPONENT OF FPA0 
E952 2702             (     ROMbasic.ASM):03618                   BEQ  LBEEF          BRANCH IF FPA0 = 0 
E954 0354             (     ROMbasic.ASM):03619                   COM  FP0SGN         TOGGLE MANTISSA SIGN OF FPA0 
E956 39               (     ROMbasic.ASM):03620         LBEEF     RTS                  
                      (     ROMbasic.ASM):03621         ; EXPAND A POLYNOMIAL OF THE FORM                      
                      (     ROMbasic.ASM):03622         ; AQ+BQ**3+CQ**5+DQ**7.... WHERE Q = FPA0                      
                      (     ROMbasic.ASM):03623         ; AND THE X REGISTER POINTS TO A TABLE OF                      
                      (     ROMbasic.ASM):03624         ; COEFFICIENTS A,B,C,D....                      
E957 9F64             (     ROMbasic.ASM):03625         LBEF0     STX  COEFPT         SAVE COEFFICIENT TABLE POINTER 
E959 BDE696           (     ROMbasic.ASM):03626                   JSR  LBC2F          MOVE FPA0 TO FPA3 
E95C 8D05             (     ROMbasic.ASM):03627                   BSR  LBEFC          MULTIPLY FPA3 BY FPA0 
E95E 8D08             (     ROMbasic.ASM):03628                   BSR  LBF01          EXPAND POLYNOMIAL 
E960 8E0040           (     ROMbasic.ASM):03629                   LDX  #V40           POINT X TO FPA3 
E963 7EE531           (     ROMbasic.ASM):03630         LBEFC     JMP  LBACA          MULTIPLY (X) BY FPA0 
                      (     ROMbasic.ASM):03631                                        
                      (     ROMbasic.ASM):03632         ; CALCULATE THE VALUE OF AN EXPANDED POLYNOMIAL                      
                      (     ROMbasic.ASM):03633         ; EXPRESSION. ENTER WITH (X) POINTING TO A TABLE                      
                      (     ROMbasic.ASM):03634         ; OF COEFFICIENTS, THE FIRST BYTE OF WHICH IS THE                      
                      (     ROMbasic.ASM):03635         ; NUMBER OF (COEFFICIENTS-1) FOLLOWED BY THAT NUMBER                      
                      (     ROMbasic.ASM):03636         ; OF PACKED FLOATING POINT NUMBERS. THE                      
                      (     ROMbasic.ASM):03637         ; POLYNOMIAL IS EVALUATED AS FOLLOWS: VALUE =                      
                      (     ROMbasic.ASM):03638         ; (((FPA0*Y0+Y1)*FPA0+Y2)*FPA0…YN)                      
E966 9F64             (     ROMbasic.ASM):03639         LBEFF     STX  COEFPT         SAVE COEFFICIENT TABLE POINTER 
E968 BDE691           (     ROMbasic.ASM):03640         LBF01     JSR  LBC2A          MOVE FPA0 TO FPA4 
E96B 9E64             (     ROMbasic.ASM):03641                   LDX  COEFPT         GET THE COEFFICIENT POINTER 
E96D E680             (     ROMbasic.ASM):03642                   LDB  ,X+            GET THE TOP OF COEFFICIENT TABLE TO 
E96F D755             (     ROMbasic.ASM):03643                   STB  COEFCT         * USE AND STORE IT IN TEMPORARY COUNTER 
E971 9F64             (     ROMbasic.ASM):03644                   STX  COEFPT         SAVE NEW COEFFICIENT POINTER 
E973 8DEE             (     ROMbasic.ASM):03645         LBF0C     BSR  LBEFC          MULTIPLY (X) BY FPA0 
E975 9E64             (     ROMbasic.ASM):03646                   LDX  COEFPT         *GET COEFFICIENT POINTER 
E977 3005             (     ROMbasic.ASM):03647                   LEAX 5,X            *MOVE TO NEXT FP NUMBER 
E979 9F64             (     ROMbasic.ASM):03648                   STX  COEFPT         *SAVE NEW COEFFICIENT POINTER 
E97B BDE429           (     ROMbasic.ASM):03649                   JSR  LB9C2          ADD (X) AND FPA0 
E97E 8E0045           (     ROMbasic.ASM):03650                   LDX  #V45           POINT (X) TO FPA4 
E981 0A55             (     ROMbasic.ASM):03651                   DEC  COEFCT         DECREMENT TEMP COUNTER 
E983 26EE             (     ROMbasic.ASM):03652                   BNE  LBF0C          BRANCH IF MORE COEFFICIENTS LEFT 
E985 39               (     ROMbasic.ASM):03653                   RTS                  
                      (     ROMbasic.ASM):03654                                        
                      (     ROMbasic.ASM):03655         ; RND                          
E986 BDE6D4           (     ROMbasic.ASM):03656         RND       JSR  LBC6D          TEST FPA0 
E989 2B1F             (     ROMbasic.ASM):03657                   BMI  LBF45          BRANCH IF FPA0 = NEGATIVE 
E98B 2715             (     ROMbasic.ASM):03658                   BEQ  LBF3B          BRANCH IF FPA0 = 0 
E98D 8D10             (     ROMbasic.ASM):03659                   BSR  LBF38          CONVERT FPA0 TO AN INTEGER 
E98F BDE696           (     ROMbasic.ASM):03660                   JSR  LBC2F          PACK FPA0 TO FPA3 
E992 8D0E             (     ROMbasic.ASM):03661                   BSR  LBF3B          GET A RANDOM NUMBER: FPA0 < 1.0 
E994 8E0040           (     ROMbasic.ASM):03662                   LDX  #V40           POINT (X) TO FPA3 
E997 8DCA             (     ROMbasic.ASM):03663                   BSR  LBEFC          MULTIPLY (X) BY FPA0 
E999 8EE52C           (     ROMbasic.ASM):03664                   LDX  #LBAC5         POINT (X) TO FP VALUE OF 1.0 
E99C BDE429           (     ROMbasic.ASM):03665                   JSR  LB9C2          ADD 1.0 TO FPA0 
E99F 7EE755           (     ROMbasic.ASM):03666         LBF38     JMP  INT            CONVERT FPA0 TO AN INTEGER 
                      (     ROMbasic.ASM):03667         ; CALCULATE A RANDOM NUMBER IN THE RANGE 0.0 < X <= 1.0                      
E9A2 9EB1             (     ROMbasic.ASM):03668         LBF3B     LDX  RVSEED+1       * MOVE VARIABLE 
E9A4 9F50             (     ROMbasic.ASM):03669                   STX  FPA0           * RANDOM NUMBER 
E9A6 9EB3             (     ROMbasic.ASM):03670                   LDX  RVSEED+3       * SEED TO 
E9A8 9F52             (     ROMbasic.ASM):03671                   STX  FPA0+2         * FPA0 
E9AA BEE9D7           (     ROMbasic.ASM):03672         LBF45     LDX  RSEED          = MOVE FIXED 
E9AD 9F5D             (     ROMbasic.ASM):03673                   STX  FPA1           = RANDOM NUMBER 
E9AF BEE9D9           (     ROMbasic.ASM):03674                   LDX  RSEED+2        = SEED TO 
E9B2 9F5F             (     ROMbasic.ASM):03675                   STX  FPA1+2         = MANTISSA OF FPA0 
E9B4 BDE537           (     ROMbasic.ASM):03676                   JSR  LBAD0          MULTIPLY FPA0 X FPA1 
E9B7 DC8A             (     ROMbasic.ASM):03677                   LDD  VAD            GET THE TWO LOWEST ORDER PRODUCT BYTES 
E9B9 C3658B           (     ROMbasic.ASM):03678                   ADDD #$658B         ADD A CONSTANT 
E9BC DDB3             (     ROMbasic.ASM):03679                   STD  RVSEED+3       SAVE NEW LOW ORDER VARIABLE RANDOM # SEED 
E9BE DD52             (     ROMbasic.ASM):03680                   STD  FPA0+2         SAVE NEW LOW ORDER BYTES OF FPA0 MANTISSA 
E9C0 DC88             (     ROMbasic.ASM):03681                   LDD  VAB            GET 2 MORE LOW ORDER PRODUCT BYTES 
E9C2 C9B0             (     ROMbasic.ASM):03682                   ADCB #$B0           ADD A CONSTANT 
E9C4 8905             (     ROMbasic.ASM):03683                   ADCA #5             ADD A CONSTANT 
E9C6 DDB1             (     ROMbasic.ASM):03684                   STD  RVSEED+1       SAVE NEW HIGH ORDER VARIABLE RANDOM # SEED 
E9C8 DD50             (     ROMbasic.ASM):03685                   STD  FPA0           SAVE NEW HIGH ORDER FPA0 MANTISSA 
E9CA 0F54             (     ROMbasic.ASM):03686                   CLR  FP0SGN         FORCE FPA0 MANTISSA = POSITIVE 
E9CC 8680             (     ROMbasic.ASM):03687                   LDA  #$80           * SET FPA0 BIASED EXPONENT 
E9CE 974F             (     ROMbasic.ASM):03688                   STA  FP0EXP         * TO 0 1 < FPA0 < 0 
E9D0 9615             (     ROMbasic.ASM):03689                   LDA  FPA2+2         GET A BYTE FROM FPA2 (MORE RANDOMNESS) 
E9D2 9763             (     ROMbasic.ASM):03690                   STA  FPSBYT         SAVE AS SUB BYTE 
E9D4 7EE483           (     ROMbasic.ASM):03691                   JMP  LBA1C          NORMALIZE FPA0 
                      (     ROMbasic.ASM):03692         ;                              
E9D7 40E6             (     ROMbasic.ASM):03693         RSEED     FDB  $40E6          *CONSTANT RANDOM NUMBER GENERATOR SEED 
E9D9 4DAB             (     ROMbasic.ASM):03694                   FDB  $4DAB          * 
                      (     ROMbasic.ASM):03695                                        
                      (     ROMbasic.ASM):03696         ; SIN                          
                      (     ROMbasic.ASM):03697         ; THE SIN FUNCTION REQUIRES AN ARGUMENT IN RADIANS AND WILL REPEAT ITSELF EVERY                      
                      (     ROMbasic.ASM):03698         ; 2*PI RADIANS. THE ARGUMENT IS DIVIDED BY 2*PI AND ONLY THE FRACTIONAL PART IS                      
                      (     ROMbasic.ASM):03699         ; RETAINED. SINCE THE ARGUMENT WAS DIVIDED BY 2*P1, THE COEFFICIENTS MUST BE                      
                      (     ROMbasic.ASM):03700         ; MULTIPLIED BY THE APPROPRIATE POWER OF 2*PI.                      
                      (     ROMbasic.ASM):03701                                        
                      (     ROMbasic.ASM):03702         ; SIN IS EVALUATED USING THE TRIGONOMETRIC IDENTITIES BELOW:                      
                      (     ROMbasic.ASM):03703         ; SIN(X)=SIN(PI-X) & -SIN(PI/2-X)=SIN((3*PI)/2+X)                      
E9DB BDE6C6           (     ROMbasic.ASM):03704         SIN       JSR  LBC5F          COPY FPA0 TO FPA1 
E9DE 8EEA20           (     ROMbasic.ASM):03705                   LDX  #LBFBD         POINT (X) TO 2*PI 
E9E1 D661             (     ROMbasic.ASM):03706                   LDB  FP1SGN         *GET MANTISSA SIGN OF FPA1 
E9E3 BDE5F0           (     ROMbasic.ASM):03707                   JSR  LBB89          *AND DIVIDE FPA0 BY 2*PI 
E9E6 BDE6C6           (     ROMbasic.ASM):03708                   JSR  LBC5F          COPY FPA0 TO FPA1 
E9E9 8DB4             (     ROMbasic.ASM):03709                   BSR  LBF38          CONVERT FPA0 TO AN INTEGER 
E9EB 0F62             (     ROMbasic.ASM):03710                   CLR  RESSGN         SET RESULT SIGN = POSITIVE 
E9ED 965C             (     ROMbasic.ASM):03711                   LDA  FP1EXP         *GET EXPONENT OF FPA1 
E9EF D64F             (     ROMbasic.ASM):03712                   LDB  FP0EXP         *GET EXPONENT OF FPA0 
E9F1 BDE423           (     ROMbasic.ASM):03713                   JSR  LB9BC          *SUBTRACT FPA0 FROM FPA1 
                      (     ROMbasic.ASM):03714         ; NOW FPA0 CONTAINS ONLY THE FRACTIONAL PART OF ARGUMENT/2*PI                      
E9F4 8EEA25           (     ROMbasic.ASM):03715                   LDX  #LBFC2         POINT X TO FP (.25) 
E9F7 BDE420           (     ROMbasic.ASM):03716                   JSR  LB9B9          SUBTRACT FPA0 FROM .25 (PI/2) 
E9FA 9654             (     ROMbasic.ASM):03717                   LDA  FP0SGN         GET MANTISSA SIGN OF FPA0 
E9FC 3402             (     ROMbasic.ASM):03718                   PSHS A              SAVE IT ON STACK 
E9FE 2A09             (     ROMbasic.ASM):03719                   BPL  LBFA6          BRANCH IF MANTISSA POSITIVE 
EA00 BDE41B           (     ROMbasic.ASM):03720                   JSR  LB9B4          ADD .5 (PI) TO FPA0 
EA03 9654             (     ROMbasic.ASM):03721                   LDA  FP0SGN         GET SIGN OF FPA0 
EA05 2B05             (     ROMbasic.ASM):03722                   BMI  LBFA9          BRANCH IF NEGATIVE 
EA07 030A             (     ROMbasic.ASM):03723                   COM  RELFLG         COM IF +(3*PI)/2 >= ARGUMENT >+ PI/2 (QUADRANT FLAG) 
EA09 BDE950           (     ROMbasic.ASM):03724         LBFA6     JSR  LBEE9          TOGGLE MANTISSA SIGN OF FPA0 
EA0C 8EEA25           (     ROMbasic.ASM):03725         LBFA9     LDX  #LBFC2         POINT X TO FP (.25) 
EA0F BDE429           (     ROMbasic.ASM):03726                   JSR  LB9C2          ADD .25 (PI/2) TO FPA0 
EA12 3502             (     ROMbasic.ASM):03727                   PULS A              GET OLD MANTISSA SIGN 
EA14 4D               (     ROMbasic.ASM):03728                   TSTA                * BRANCH IF OLD 
EA15 2A03             (     ROMbasic.ASM):03729                   BPL  LBFB7          * SIGN WAS POSITIVE 
EA17 BDE950           (     ROMbasic.ASM):03730                   JSR  LBEE9          TOGGLE MANTISSA SIGN 
EA1A 8EEA2A           (     ROMbasic.ASM):03731         LBFB7     LDX  #LBFC7         POINT X TO TABLE OF COEFFICIENTS 
EA1D 7EE957           (     ROMbasic.ASM):03732                   JMP  LBEF0          GO CALCULATE POLYNOMIAL VALUE 
                      (     ROMbasic.ASM):03733                                        
EA20 83490FDAA2       (     ROMbasic.ASM):03734         LBFBD     FCB  $83,$49,$0F,$DA,$A2 6.28318531 (2*PI) 
EA25 7F00000000       (     ROMbasic.ASM):03735         LBFC2     FCB  $7F,$00,$00,$00,$00 .25 
                      (     ROMbasic.ASM):03736                                        
                      (     ROMbasic.ASM):03737                                        
EA2A 05               (     ROMbasic.ASM):03738         LBFC7     FCB  6-1            SIX COEFFICIENTS 
EA2B 84E61A2D1B       (     ROMbasic.ASM):03739         LBFC8     FCB  $84,$E6,$1A,$2D,$1B * -((2*PI)**11)/11! 
EA30 862807FBF8       (     ROMbasic.ASM):03740         LBFCD     FCB  $86,$28,$07,$FB,$F8 * ((2*PI)**9)/9! 
EA35 8799688901       (     ROMbasic.ASM):03741         LBFD2     FCB  $87,$99,$68,$89,$01 * -((2*PI)**7)/7! 
EA3A 872335DFE1       (     ROMbasic.ASM):03742         LBFD7     FCB  $87,$23,$35,$DF,$E1 * ((2*PI)**5)/5! 
EA3F 86A55DE728       (     ROMbasic.ASM):03743         LBFDC     FCB  $86,$A5,$5D,$E7,$28 * -((2*PI)**3)/3! 
EA44 83490FDAA2       (     ROMbasic.ASM):03744         LBFE1     FCB  $83,$49,$0F,$DA,$A2 * 
                      (     ROMbasic.ASM):03745                                        
EA49 A154468F13       (     ROMbasic.ASM):03746                   FCB  $A1,$54,$46,$8F,$13 UNUSED GARBAGE BYTES 
EA4E 8F524389CD       (     ROMbasic.ASM):03747                   FCB  $8F,$52,$43,$89,$CD UNUSED GARBAGE BYTES 
                      (     ROMbasic.ASM):03748         ; EXTENDED BASIC                      
                      (     ROMbasic.ASM):03749                                        
                      (     ROMbasic.ASM):03750         ; COS                          
                      (     ROMbasic.ASM):03751         ; THE VALUE OF COS(X) IS DETERMINED BY THE TRIG IDENTITY COS(X)=SIN((PI/2)+X)                      
EA53 8EEA86           (     ROMbasic.ASM):03752         COS       LDX  #L83AB         POINT X TO FP CONSTANT (P1/2) 
EA56 BDE429           (     ROMbasic.ASM):03753                   JSR  LB9C2          ADD FPA0 TO (X) 
EA59 7EE9DB           (     ROMbasic.ASM):03754         L837E     JMP  SIN            JUMP TO SIN ROUTINE 
                      (     ROMbasic.ASM):03755                                        
                      (     ROMbasic.ASM):03756         ; TAN                          
                      (     ROMbasic.ASM):03757         ; THE VALUE OF TAN(X) IS DETERMINED BY THE TRIG IDENTITY TAN(X)=SIN(X)/COS(X)                      
EA5C BDE696           (     ROMbasic.ASM):03758         TAN       JSR  LBC2F          PACK FPA0 AND MOVE IT TO FPA3 
EA5F 0F0A             (     ROMbasic.ASM):03759                   CLR  RELFLG         RESET QUADRANT FLAG 
EA61 8DF6             (     ROMbasic.ASM):03760                   BSR  L837E          CALCULATE SIN OF ARGUMENT 
EA63 8E004A           (     ROMbasic.ASM):03761                   LDX  #V4A           POINT X TO FPA5 
EA66 BDE69C           (     ROMbasic.ASM):03762                   JSR  LBC35          PACK FPA0 AND MOVE IT TO FPA5 
EA69 8E0040           (     ROMbasic.ASM):03763                   LDX  #V40           POINT X TO FPA3 
EA6C BDE67B           (     ROMbasic.ASM):03764                   JSR  LBC14          MOVE FPA3 TO FPA0 
EA6F 0F54             (     ROMbasic.ASM):03765                   CLR  FP0SGN         FORCE FPA0 MANTISSA TO BE POSITIVE 
EA71 960A             (     ROMbasic.ASM):03766                   LDA  RELFLG         GET THE QUADRANT FLAG - COS NEGATIVE IN QUADS 2,3 
EA73 8D0C             (     ROMbasic.ASM):03767                   BSR  L83A6          CALCULATE VALUE OF COS(FPA0) 
EA75 0D4F             (     ROMbasic.ASM):03768                   TST  FP0EXP         CHECK EXPONENT OF FPA0 
EA77 1027FA7E         (     ROMbasic.ASM):03769                   LBEQ LBA92          ‘OV’ ERROR IF COS(X)=0 
EA7B 8E004A           (     ROMbasic.ASM):03770                   LDX  #V4A           POINT X TO FPA5 
EA7E 7EE5F6           (     ROMbasic.ASM):03771         L83A3     JMP  LBB8F          DIVIDE (X) BY FPA0 - SIN(X)/COS(X) 
EA81 3402             (     ROMbasic.ASM):03772         L83A6     PSHS A              SAVE SIGN FLAG ON STACK 
EA83 7EEA09           (     ROMbasic.ASM):03773                   JMP  LBFA6          EXPAND POLYNOMIAL 
                      (     ROMbasic.ASM):03774                                        
EA86 81490FDAA2       (     ROMbasic.ASM):03775         L83AB     FCB  $81,$49,$0F,$DA,$A2 1.57079633 (PI/2) 
                      (     ROMbasic.ASM):03776                                        
                      (     ROMbasic.ASM):03777         ; ATN                          
                      (     ROMbasic.ASM):03778         ; A 12 TERM TAYLOR SERIES IS USED TO EVALUATE THE                      
                      (     ROMbasic.ASM):03779         ; ARCTAN EXPRESSION. TWO  DIFFERENT FORMULI ARE USED  
                      (     ROMbasic.ASM):03780         ; TO EVALUATE THE EXPRESSION DEPENDING UPON                      
                      (     ROMbasic.ASM):03781         ; WHETHER OR NOT THE ARGUMENT SQUARED IS > OR < 1.0                      
                      (     ROMbasic.ASM):03782                                        
                      (     ROMbasic.ASM):03783         ; IF X**2<1 THEN ATN=X-(X**3)/3+(X**5)/5-(X**7)/7. . .                      
                      (     ROMbasic.ASM):03784         ; IF X**2>=1 THEN ATN=PI/2-(1/X-1/((X**3)*3)+(1/((X**5)*5)-. . .)                      
                      (     ROMbasic.ASM):03785                                        
EA8B 9654             (     ROMbasic.ASM):03786         ATN       LDA  FP0SGN         * GET THE SIGN OF THE MANTISSA AND 
EA8D 3402             (     ROMbasic.ASM):03787                   PSHS A              * SAVE IT ON THE STACK 
EA8F 2A02             (     ROMbasic.ASM):03788                   BPL  L83B8          BRANCH IF POSITIVE MANTISSA 
EA91 8D24             (     ROMbasic.ASM):03789                   BSR  L83DC          CHANGE SIGN OF FPA0 
EA93 964F             (     ROMbasic.ASM):03790         L83B8     LDA  FP0EXP         * GET EXPONENT OF FPA0 AND 
EA95 3402             (     ROMbasic.ASM):03791                   PSHS A              * SAVE IT ON THE STACK 
EA97 8181             (     ROMbasic.ASM):03792                   CMPA #$81           IS FPAO < 1.0? 
EA99 2505             (     ROMbasic.ASM):03793                   BLO  L83C5          YES 
EA9B 8EE52C           (     ROMbasic.ASM):03794                   LDX  #LBAC5         POINT X TO FP CONSTANT 1.0 
EA9E 8DDE             (     ROMbasic.ASM):03795                   BSR  L83A3          GET RECIPROCAL OF FPA0 
EAA0 8EEABB           (     ROMbasic.ASM):03796         L83C5     LDX  #L83E0         POINT (X) TO TAYLOR SERIES COEFFICIENTS 
EAA3 BDE957           (     ROMbasic.ASM):03797                   JSR  LBEF0          EXPAND POLYNOMIAL 
EAA6 3502             (     ROMbasic.ASM):03798                   PULS A              GET EXPONENT OF ARGUMENT 
EAA8 8181             (     ROMbasic.ASM):03799                   CMPA #$81           WAS ARGUMENT < 1.0? 
EAAA 2506             (     ROMbasic.ASM):03800                   BLO  L83D7          YES 
EAAC 8EEA86           (     ROMbasic.ASM):03801                   LDX  #L83AB         POINT (X) TO FP NUMBER (PI/2) 
EAAF BDE420           (     ROMbasic.ASM):03802                   JSR  LB9B9          SUBTRACT FPA0 FROM (PI/2) 
EAB2 3502             (     ROMbasic.ASM):03803         L83D7     PULS A              * GET SIGN OF INITIAL ARGUMENT MANTISSA 
EAB4 4D               (     ROMbasic.ASM):03804                   TSTA                * AND SET FLAGS ACCORDING TO IT 
EAB5 2A03             (     ROMbasic.ASM):03805                   BPL  L83DF          RETURN IF ARGUMENT WAS POSITIVE 
EAB7 7EE950           (     ROMbasic.ASM):03806         L83DC     JMP  LBEE9          CHANGE MANTISSA SIGN OF FPA0 
EABA 39               (     ROMbasic.ASM):03807         L83DF     RTS                  
                      (     ROMbasic.ASM):03808         ;                              
                      (     ROMbasic.ASM):03809         ; TCHEBYSHEV MODIFIED TAYLOR SERIES COEFFICIENTS FOR ARCTANGENT                      
EABB 0B               (     ROMbasic.ASM):03810         L83E0     FCB  $0B            TWELVE COEFFICIENTS 
EABC 76B383BDD3       (     ROMbasic.ASM):03811         L83E1     FCB  $76,$B3,$83,$BD,$D3 -6.84793912E-04 1/23 
EAC1 791EF4A6F5       (     ROMbasic.ASM):03812         L83E6     FCB  $79,$1E,$F4,$A6,$F5 +4.85094216E-03 1/21 
EAC6 7B83FCB010       (     ROMbasic.ASM):03813         L83EB     FCB  $7B,$83,$FC,$B0,$10 -0.0161117018 
EACB 7C0C1F67CA       (     ROMbasic.ASM):03814         L83F0     FCB  $7C,$0C,$1F,$67,$CA 0.0342096381 
EAD0 7CDE53CBC1       (     ROMbasic.ASM):03815         L83F5     FCB  $7C,$DE,$53,$CB,$C1 -0.0542791328 
EAD5 7D1464704C       (     ROMbasic.ASM):03816         L83FA     FCB  $7D,$14,$64,$70,$4C 0.0724571965 
EADA 7DB7EA517A       (     ROMbasic.ASM):03817         L83FF     FCB  $7D,$B7,$EA,$51,$7A -0.0898023954 
EADF 7D6330887E       (     ROMbasic.ASM):03818         L8404     FCB  $7D,$63,$30,$88,$7E 0.110932413 
EAE4 7E9244993A       (     ROMbasic.ASM):03819         L8409     FCB  $7E,$92,$44,$99,$3A -0.142839808 
EAE9 7E4CCC91C7       (     ROMbasic.ASM):03820         L840E     FCB  $7E,$4C,$CC,$91,$C7 0.199999121 
EAEE 7FAAAAAA13       (     ROMbasic.ASM):03821         L8413     FCB  $7F,$AA,$AA,$AA,$13 -0.333333316 
EAF3 8100000000       (     ROMbasic.ASM):03822         L8418     FCB  $81,$00,$00,$00,$00 1 
                      (     ROMbasic.ASM):03823         ;                              
                      (     ROMbasic.ASM):03824         ;* TCHEBYSHEV MODIFIED TAYLOR SERIES COEFFICIENTS FOR LN(X)                      
                      (     ROMbasic.ASM):03825         ;                              
EAF8 03               (     ROMbasic.ASM):03826         L841D     FCB  3              FOUR COEFFICIENTS 
EAF9 7F5E56CB79       (     ROMbasic.ASM):03827         L841E     FCB  $7F,$5E,$56,$CB,$79 0.434255942 
EAFE 80139B0B64       (     ROMbasic.ASM):03828         L8423     FCB  $80,$13,$9B,$0B,$64 0.576584541 
EB03 8076389316       (     ROMbasic.ASM):03829         L8428     FCB  $80,$76,$38,$93,$16 0.961800759 
EB08 8238AA3B20       (     ROMbasic.ASM):03830         L842D     FCB  $82,$38,$AA,$3B,$20 2.88539007 
                      (     ROMbasic.ASM):03831                                        
EB0D 803504F334       (     ROMbasic.ASM):03832         L8432     FCB  $80,$35,$04,$F3,$34 1/SQR(2) 
                      (     ROMbasic.ASM):03833                                        
EB12 813504F334       (     ROMbasic.ASM):03834         L8437     FCB  $81,$35,$04,$F3,$34 SQR(2) 
                      (     ROMbasic.ASM):03835                                        
EB17 8080000000       (     ROMbasic.ASM):03836         L843C     FCB  $80,$80,$00,$00,$00 -0.5 
                      (     ROMbasic.ASM):03837                                        
EB1C 80317217F8       (     ROMbasic.ASM):03838         L8441     FCB  $80,$31,$72,$17,$F8 LN(2) 
                      (     ROMbasic.ASM):03839         ;                              
                      (     ROMbasic.ASM):03840         ; LOG - NATURAL LOGARITHM (LN)                      
                      (     ROMbasic.ASM):03841                                        
                      (     ROMbasic.ASM):03842         ; THE NATURAL OR NAPERIAN LOGARITHM IS CALCULATED USING                      
                      (     ROMbasic.ASM):03843         ; MATHEMATICAL IDENTITIES. FPA0 IS OF THE FORM FPA0=A*(2**B) (SCIENTIFIC                      
                      (     ROMbasic.ASM):03844         ; NOTATION). THEREFORE, THE LOG ROUTINE DETERMINES THE VALUE OF                      
                      (     ROMbasic.ASM):03845         ; LN(A*(2**B)). A SERIES OF MATHEMATICAL IDENTITIES WILL EXPAND THIS                      
                      (     ROMbasic.ASM):03846         ; TERM: LN(A*(2**B))=(-1/2+(1/LN(2))*(LN(A*SQR(2)))+B)*LN(2). ALL OF                      
                      (     ROMbasic.ASM):03847         ; THE TERMS OF THE LATTER EXPRESSION ARE CONSTANTS EXCEPT FOR THE                      
                      (     ROMbasic.ASM):03848         ; LN(A*SQR(2)) TERM WHICH IS EVALUATED USING THE TAYLOR SERIES EXPANSION                      
EB21 BDE6D4           (     ROMbasic.ASM):03849         LOG       JSR  LBC6D          CHECK STATUS OF FPA0 
EB24 102FF0C9         (     ROMbasic.ASM):03850                   LBLE LB44A          ‘FC’ ERROR IF NEGATIVE OR ZERO 
EB28 8EEB0D           (     ROMbasic.ASM):03851                   LDX  #L8432         POINT (X) TO FP NUMBER (1/SQR(2)) 
EB2B 964F             (     ROMbasic.ASM):03852                   LDA  FP0EXP         *GET EXPONENT OF ARGUMENT 
EB2D 8080             (     ROMbasic.ASM):03853                   SUBA #$80           *SUBTRACT OFF THE BIAS AND 
EB2F 3402             (     ROMbasic.ASM):03854                   PSHS A              *SAVE IT ON THE STACK 
EB31 8680             (     ROMbasic.ASM):03855                   LDA  #$80            
EB33 974F             (     ROMbasic.ASM):03856                   STA  FP0EXP          
EB35 BDE429           (     ROMbasic.ASM):03857                   JSR  LB9C2          ADD FPA0 TO (X) 
EB38 8EEB12           (     ROMbasic.ASM):03858                   LDX  #L8437         POINT X TO SQR(2) 
EB3B BDE5F6           (     ROMbasic.ASM):03859                   JSR  LBB8F          DIVIDE SQR(2) BY FPA0 
EB3E 8EE52C           (     ROMbasic.ASM):03860                   LDX  #LBAC5         POINT X TO FP VALUE OF 1.00 
EB41 BDE420           (     ROMbasic.ASM):03861                   JSR  LB9B9          SUBTRACT FPA0 FROM (X) 
                      (     ROMbasic.ASM):03862         ;         NOW  FPA0 = (1-SQR(2)*X)/(1+SQR(2)*X) WHERE X IS ARGUMENT  
EB44 8EEAF8           (     ROMbasic.ASM):03863                   LDX  #L841D         POINT X TO TABLE OF COEFFICIENTS 
EB47 BDE957           (     ROMbasic.ASM):03864                   JSR  LBEF0          EXPAND POLYNOMIAL 
EB4A 8EEB17           (     ROMbasic.ASM):03865                   LDX  #L843C         POINT X TO FP VALUE OF (-.5) 
EB4D BDE429           (     ROMbasic.ASM):03866                   JSR  LB9C2          ADD FPA0 TO X 
EB50 3504             (     ROMbasic.ASM):03867                   PULS B              GET EXPONENT OF ARGUMENT BACK (WITHOUT BIAS) 
EB52 BDE800           (     ROMbasic.ASM):03868                   JSR  LBD99          ADD ACCB TO FPA0 
EB55 8EEB1C           (     ROMbasic.ASM):03869                   LDX  #L8441         POINT X TO LN(2) 
EB58 7EE531           (     ROMbasic.ASM):03870                   JMP  LBACA          MULTIPLY FPA0 * LN(2) 
                      (     ROMbasic.ASM):03871                                        
                      (     ROMbasic.ASM):03872         ; SQR                          
EB5B BDE6C6           (     ROMbasic.ASM):03873         SQR       JSR  LBC5F          MOVE FPA0 TO FPA1 
EB5E 8EE927           (     ROMbasic.ASM):03874                   LDX  #LBEC0         POINT (X) TO FP NUMBER (.5) 
EB61 BDE67B           (     ROMbasic.ASM):03875                   JSR  LBC14          COPY A PACKED NUMBER FROM (X) TO FPA0 
                      (     ROMbasic.ASM):03876                                        
                      (     ROMbasic.ASM):03877         ; ARITHMETIC OPERATOR FOR EXPONENTIATION JUMPS                      
                      (     ROMbasic.ASM):03878         ; HERE. THE FORMULA USED TO EVALUATE EXPONENTIATION                      
                      (     ROMbasic.ASM):03879         ; IS A**X=E**(X LN A) = E**(FPA0*LN(FPA1)), E=2.7182818                      
EB64 2767             (     ROMbasic.ASM):03880         L8489     BEQ  EXP            DO A NATURAL EXPONENTIATION IF EXPONENT = 0 
EB66 4D               (     ROMbasic.ASM):03881                   TSTA                *CHECK VALUE BEING EXPONENTIATED 
EB67 2603             (     ROMbasic.ASM):03882                   BNE  L8491          *AND BRANCH IF IT IS <> 0 
EB69 7EE4A1           (     ROMbasic.ASM):03883                   JMP  LBA3A          FPA0=0 IF RAISING ZERO TO A POWER 
EB6C 8E004A           (     ROMbasic.ASM):03884         L8491     LDX  #V4A           * PACK FPA0 AND SAVE 
EB6F BDE69C           (     ROMbasic.ASM):03885                   JSR  LBC35          * IT IN FPA5 (ARGUMENT’S EXPONENT) 
EB72 5F               (     ROMbasic.ASM):03886                   CLRB                ACCB=DEFAULT RESULT SIGN FLAG; 0=POSITIVE 
EB73 9661             (     ROMbasic.ASM):03887                   LDA  FP1SGN         *CHECK THE SIGN OF ARGUMENT 
EB75 2A10             (     ROMbasic.ASM):03888                   BPL  L84AC          *BRANCH IF POSITIVE 
EB77 BDE755           (     ROMbasic.ASM):03889                   JSR  INT            CONVERT EXPONENT INTO AN INTEGER 
EB7A 8E004A           (     ROMbasic.ASM):03890                   LDX  #V4A           POINT X TO FPA5 (ORIGINAL EXPONENT) 
EB7D 9661             (     ROMbasic.ASM):03891                   LDA  FP1SGN         GET MANTISSA SIGN OF FPA1 (ARGUMENT) 
EB7F BDE707           (     ROMbasic.ASM):03892                   JSR  LBCA0          *COMPARE FPA0 TO (X) AND 
EB82 2603             (     ROMbasic.ASM):03893                   BNE  L84AC          *BRANCH IF NOT EQUAL 
EB84 43               (     ROMbasic.ASM):03894                   COMA                TOGGLE FPA1 MANTISSA SIGN - FORCE POSITIVE 
EB85 D601             (     ROMbasic.ASM):03895                   LDB  CHARAC         GET LS BYTE OF INTEGER VALUE OF EXPONENT (RESULT SIGN FLAG) 
EB87 BDE6B3           (     ROMbasic.ASM):03896         L84AC     JSR  LBC4C          COPY FPA1 TO FPA0; ACCA = MANTISSA SIGN 
EB8A 3404             (     ROMbasic.ASM):03897                   PSHS B              PUT RESULT SIGN FLAG ON THE STACK 
EB8C BDEB21           (     ROMbasic.ASM):03898                   JSR  LOG             
EB8F 8E004A           (     ROMbasic.ASM):03899                   LDX  #V4A           POINT (X) TO FPA5 
EB92 BDE531           (     ROMbasic.ASM):03900                   JSR  LBACA          MULTIPLY FPA0 BY FPA5 
EB95 8D36             (     ROMbasic.ASM):03901                   BSR  EXP            CALCULATE E**(FPA0) 
EB97 3502             (     ROMbasic.ASM):03902                   PULS A              * GET RESULT SIGN FLAG FROM THE STACK 
EB99 46               (     ROMbasic.ASM):03903                   RORA * AND BRANCH IF NEGATIVE  
EB9A 1025FDB2         (     ROMbasic.ASM):03904                   LBCS LBEE9          CHANGE SIGN OF FPA0 MANTISSA 
EB9E 39               (     ROMbasic.ASM):03905                   RTS                  
                      (     ROMbasic.ASM):03906                                        
                      (     ROMbasic.ASM):03907         ; CORRECTION FACTOR FOR EXPONENTIAL FUNCTION                      
EB9F 8138AA3B29       (     ROMbasic.ASM):03908         L84C4     FCB  $81,$38,$AA,$3B,$29 1.44269504 ( CF ) 
                      (     ROMbasic.ASM):03909         ;                              
                      (     ROMbasic.ASM):03910         ; TCHEBYSHEV MODIFIED TAYLOR SERIES COEFFICIENTS FOR E**X                      
                      (     ROMbasic.ASM):03911         ;                              
EBA4 07               (     ROMbasic.ASM):03912         L84C9     FCB  7              EIGHT COEFFICIENTS 
EBA5 7134583E56       (     ROMbasic.ASM):03913         L84CA     FCB  $71,$34,$58,$3E,$56 2.14987637E-05: 1/(7!*(CF**7)) 
EBAA 74167EB31B       (     ROMbasic.ASM):03914         L84CF     FCB  $74,$16,$7E,$B3,$1B 1.4352314E-04 : 1/(6!*(CF**6)) 
EBAF 772FEEE385       (     ROMbasic.ASM):03915         L84D4     FCB  $77,$2F,$EE,$E3,$85 1.34226348E-03: 1/(5!*(CF**5)) 
EBB4 7A1D841C2A       (     ROMbasic.ASM):03916         L84D9     FCB  $7A,$1D,$84,$1C,$2A 9.61401701E-03: 1/(4!*(CF**4)) 
EBB9 7C6359580A       (     ROMbasic.ASM):03917         L84DE     FCB  $7C,$63,$59,$58,$0A 0.0555051269 
EBBE 7E75FDE7C6       (     ROMbasic.ASM):03918         L84E3     FCB  $7E,$75,$FD,$E7,$C6 0.240226385 
EBC3 8031721810       (     ROMbasic.ASM):03919         L84E8     FCB  $80,$31,$72,$18,$10 0.693147186 
EBC8 8100000000       (     ROMbasic.ASM):03920         L84ED     FCB  $81,$00,$00,$00,$00 1 
                      (     ROMbasic.ASM):03921         ;                              
                      (     ROMbasic.ASM):03922         ; EXP ( E**X)                      
                      (     ROMbasic.ASM):03923         ; THE EXPONENTIAL FUNCTION IS EVALUATED BY FIRST MULTIPLYING THE                      
                      (     ROMbasic.ASM):03924         ; ARGUMENT BY A CORRECTION FACTOR (CF). AFTER THIS IS DONE, AN                      
                      (     ROMbasic.ASM):03925         ; ARGUMENT >= 127 WILL YIELD A ZERO RESULT (NO UNDERFLOW) FOR A                      
                      (     ROMbasic.ASM):03926         ; NEGATIVE ARGUMENT OR AN 'OV' (OVERFLOW) ERROR FOR A POSITIVE                      
                      (     ROMbasic.ASM):03927         ; ARGUMENT. THE POLYNOMIAL COEFFICIENTS ARE MODIFIED TO REFLECT                      
                      (     ROMbasic.ASM):03928         ; THE CF MULTIPLICATION AT THE START OF THE EVALUATION PROCESS.                      
                      (     ROMbasic.ASM):03929                                        
EBCD 8EEB9F           (     ROMbasic.ASM):03930         EXP       LDX  #L84C4         POINT X TO THE CORRECTION FACTOR 
EBD0 BDE531           (     ROMbasic.ASM):03931                   JSR  LBACA          MULTIPLY FPA0 BY (X) 
EBD3 BDE696           (     ROMbasic.ASM):03932                   JSR  LBC2F          PACK FPA0 AND STORE IT IN FPA3 
EBD6 964F             (     ROMbasic.ASM):03933                   LDA  FP0EXP         *GET EXPONENT OF FPA0 AND 
EBD8 8188             (     ROMbasic.ASM):03934                   CMPA #$88           *COMPARE TO THE MAXIMUM VALUE 
EBDA 2503             (     ROMbasic.ASM):03935                   BLO  L8504          BRANCH IF FPA0 < 128 
EBDC 7EE5C3           (     ROMbasic.ASM):03936         L8501     JMP  LBB5C          SET FPA0 = 0 OR ‘OV’ ERROR 
EBDF BDE755           (     ROMbasic.ASM):03937         L8504     JSR  INT            CONVERT FPA0 TO INTEGER 
EBE2 9601             (     ROMbasic.ASM):03938                   LDA  CHARAC         GET LS BYTE OF INTEGER 
EBE4 8B81             (     ROMbasic.ASM):03939                   ADDA #$81           * WAS THE ARGUMENT =127, IF SO 
EBE6 27F4             (     ROMbasic.ASM):03940                   BEQ  L8501          * THEN ‘OV’ ERROR; THIS WILL ALSO ADD THE $80 BIAS 
                      (     ROMbasic.ASM):03941         ;              * REQUIRED WHEN THE NEW EXPONENT IS CALCULATED BELOW  
EBE8 4A               (     ROMbasic.ASM):03942                   DECA                DECREMENT ONE FROM THE EXPONENT, BECAUSE $81, NOT $80 WAS USED ABOVE 
EBE9 3402             (     ROMbasic.ASM):03943                   PSHS A              SAVE EXPONENT OF INTEGER PORTION ON STACK 
EBEB 8E0040           (     ROMbasic.ASM):03944                   LDX  #V40           POINT (X) TO FPA3 
EBEE BDE420           (     ROMbasic.ASM):03945                   JSR  LB9B9          SUBTRACT FPA0 FROM (X) - GET FRACTIONAL PART OF ARGUMENT 
EBF1 8EEBA4           (     ROMbasic.ASM):03946                   LDX  #L84C9         POINT X TO COEFFICIENTS 
EBF4 BDE966           (     ROMbasic.ASM):03947                   JSR  LBEFF          EVALUATE POLYNOMIAL FOR FRACTIONAL PART 
EBF7 0F62             (     ROMbasic.ASM):03948                   CLR  RESSGN         FORCE THE MANTISSA TO BE POSITIVE 
EBF9 3502             (     ROMbasic.ASM):03949                   PULS A              GET INTEGER EXPONENT FROM STACK 
EBFB BDE5AF           (     ROMbasic.ASM):03950                   JSR  LBB48          * CALCULATE EXPONENT OF NEW FPA0 BY ADDING THE EXPONENTS OF THE 
                      (     ROMbasic.ASM):03951         ;              * INTEGER AND FRACTIONAL PARTS  
EBFE 39               (     ROMbasic.ASM):03952                   RTS                  
                      (     ROMbasic.ASM):03953                                        
                      (     ROMbasic.ASM):03954         ; FIX                          
EBFF BDE6D4           (     ROMbasic.ASM):03955         FIX       JSR  LBC6D          CHECK STATUS OF FPA0 
EC02 2B03             (     ROMbasic.ASM):03956                   BMI  L852C          BRANCH IF FPA0 = NEGATIVE 
EC04 7EE755           (     ROMbasic.ASM):03957         L8529     JMP  INT            CONVERT FPA0 TO INTEGER 
EC07 0354             (     ROMbasic.ASM):03958         L852C     COM  FP0SGN         TOGGLE SIGN OF FPA0 MANTISSA 
EC09 8DF9             (     ROMbasic.ASM):03959                   BSR  L8529          CONVERT FPA0 TO INTEGER 
EC0B 7EE950           (     ROMbasic.ASM):03960                   JMP  LBEE9          TOGGLE SIGN OF FPA0 
                      (     ROMbasic.ASM):03961                                        
                      (     ROMbasic.ASM):03962         ; EDIT                         
EC0E BDF03C           (     ROMbasic.ASM):03963         EDIT      JSR  L89AE          GET LINE NUMBER FROM BASIC 
EC11 3262             (     ROMbasic.ASM):03964                   LEAS $02,S PURGE RETURN ADDRESS OFF OF THE STACK  
EC13 8601             (     ROMbasic.ASM):03965         L8538     LDA  #$01           ‘LIST’ FLAG 
EC15 9798             (     ROMbasic.ASM):03966                   STA  VD8            SET FLAG TO LIST LINE 
EC17 BDD4C5           (     ROMbasic.ASM):03967                   JSR  LAD01          GO FIND THE LINE NUMBER IN PROGRAM 
EC1A 1025EA84         (     ROMbasic.ASM):03968                   LBCS LAED2 ERROR #7 ‘UNDEFINED LINE #'  
EC1E BDE259           (     ROMbasic.ASM):03969                   JSR  LB7C2          GO UNCRUNCH LINE INTO BUFFER AT LINBUF+1 
EC21 1F20             (     ROMbasic.ASM):03970                   TFR  Y,D            PUT ABSOLUTE ADDRESS OF END OF LINE TO ACCD 
EC23 8300F5           (     ROMbasic.ASM):03971                   SUBD #LINBUF+2 SUBTRACT OUT THE START OF LINE  
EC26 D797             (     ROMbasic.ASM):03972                   STB  VD7            SAVE LENGTH OF LINE 
EC28 DC2B             (     ROMbasic.ASM):03973         L854D     LDD  BINVAL         GET THE HEX VALUE OF LINE NUMBER 
EC2A BDE833           (     ROMbasic.ASM):03974                   JSR  LBDCC          LIST THE LINE NUMBER ON THE SCREEN 
EC2D BDE413           (     ROMbasic.ASM):03975                   JSR  LB9AC          PRINT A SPACE 
EC30 8E00F4           (     ROMbasic.ASM):03976                   LDX  #LINBUF+1      POINT X TO BUFFER 
EC33 D698             (     ROMbasic.ASM):03977                   LDB  VD8            * CHECK TO SEE IF LINE IS TO BE 
EC35 2625             (     ROMbasic.ASM):03978                   BNE  L8581          * LISTED TO SCREEN - BRANCH IF IT IS 
EC37 5F               (     ROMbasic.ASM):03979         L855C     CLRB                RESET DIGIT ACCUMULATOR - DEFAULT VALUE 
EC38 BDED62           (     ROMbasic.ASM):03980         L855D     JSR  L8687          GET KEY STROKE 
EC3B BDF507           (     ROMbasic.ASM):03981                   JSR  L90AA          SET CARRY IF NOT NUMERIC 
EC3E 250B             (     ROMbasic.ASM):03982                   BLO  L8570          BRANCH IF NOT NUMERIC 
EC40 8030             (     ROMbasic.ASM):03983                   SUBA #'0'           MASK OFF ASCII  
EC42 3402             (     ROMbasic.ASM):03984                   PSHS A              SAVE IT ON STACK  
EC44 860A             (     ROMbasic.ASM):03985                   LDA  #10            NUMBER BEING CONVERTED IS BASE 10 
EC46 3D               (     ROMbasic.ASM):03986                   MUL                 MULTIPLY ACCUMULATED VALUE BY BASE (10)  
EC47 EBE0             (     ROMbasic.ASM):03987                   ADDB ,S+            ADD DIGIT TO ACCUMULATED VALUE  
EC49 20ED             (     ROMbasic.ASM):03988                   BRA  L855D          CHECK FOR ANOTHER DIGIT 
EC4B C001             (     ROMbasic.ASM):03989         L8570     SUBB #$01           REPEAT PARAMETER IN ACCB; IF IT  
EC4D C901             (     ROMbasic.ASM):03990                   ADCB #$01           IS 0, THEN MAKE IT ‘1’  
EC4F 8141             (     ROMbasic.ASM):03991                   CMPA #'A'           ABORT?          
EC51 2605             (     ROMbasic.ASM):03992                   BNE  L857D          NO 
EC53 BDE3C3           (     ROMbasic.ASM):03993                   JSR  LB958          PRINT CARRIAGE RETURN TO SCREEN 
EC56 20BB             (     ROMbasic.ASM):03994                   BRA  L8538          RESTART EDIT PROCESS - CANCEL ALL CHANGES 
EC58 814C             (     ROMbasic.ASM):03995         L857D     CMPA #'L'           LIST?           
EC5A 260B             (     ROMbasic.ASM):03996                   BNE  L858C          NO 
EC5C 8D31             (     ROMbasic.ASM):03997         L8581     BSR  L85B4          LIST THE LINE 
EC5E 0F98             (     ROMbasic.ASM):03998                   CLR  VD8            RESET THE LIST FLAG TO ‘NO LIST’ 
EC60 BDE3C3           (     ROMbasic.ASM):03999                   JSR  LB958          PRINT CARRIAGE RETURN 
EC63 20C3             (     ROMbasic.ASM):04000                   BRA  L854D          GO INTERPRET ANOTHER EDIT COMMAND 
EC65 3262             (     ROMbasic.ASM):04001         L858A     LEAS $02,S          PURGE RETURN ADDRESS OFF OF THE STACK  
EC67 810D             (     ROMbasic.ASM):04002         L858C     CMPA #CR            ENTER KEY?      
EC69 260D             (     ROMbasic.ASM):04003                   BNE  L859D          NO 
EC6B 8D22             (     ROMbasic.ASM):04004                   BSR  L85B4          ECHO THE LINE TO THE SCREEN 
EC6D BDE3C3           (     ROMbasic.ASM):04005         L8592     JSR  LB958          PRINT CARRIAGE RETURN 
EC70 8E00F4           (     ROMbasic.ASM):04006                   LDX  #LINBUF+1      * RESET BASIC’S INPUT POINTER 
EC73 9F83             (     ROMbasic.ASM):04007                   STX  CHARAD         * TO THE LINE INPUT BUFFER 
EC75 7ED46E           (     ROMbasic.ASM):04008                   JMP  LACA8          GO PUT LINE BACK IN PROGRAM 
EC78 8145             (     ROMbasic.ASM):04009         L859D     CMPA #'E'           EXIT?           
EC7A 27F1             (     ROMbasic.ASM):04010                   BEQ  L8592          YES - SAME AS ENTER EXCEPT NO ECHO 
EC7C 8151             (     ROMbasic.ASM):04011                   CMPA #'Q'           QUIT?           
EC7E 2606             (     ROMbasic.ASM):04012                   BNE  L85AB          NO 
EC80 BDE3C3           (     ROMbasic.ASM):04013                   JSR  LB958          PRINT CARRIAGE RETURN TO SCREEN 
EC83 7ED445           (     ROMbasic.ASM):04014                   JMP  LAC73          GO TO COMMAND LEVEL - MAKE NO CHANGES 
EC86 8D02             (     ROMbasic.ASM):04015         L85AB     BSR  L85AF          INTERPRET THE REMAINING COMMANDS AS SUBROUTINES 
EC88 20AD             (     ROMbasic.ASM):04016                   BRA  L855C          GO INTERPRET ANOTHER EDIT COMMAND 
EC8A 8120             (     ROMbasic.ASM):04017         L85AF     CMPA #SPACE         SPACE BAR?      
EC8C 2610             (     ROMbasic.ASM):04018                   BNE  L85C3          NO 
EC8E 8C               (     ROMbasic.ASM):04019         L85B3     FCB  SKP2           SKIP TWO BYTES 
                      (     ROMbasic.ASM):04020         ; DISPLAY THE NEXT ACCB BYTES OF THE LINE IN THE BUFFER TO THE SCREEN                      
                      (     ROMbasic.ASM):04021         ;                              
EC8F C6F9             (     ROMbasic.ASM):04022         L85B4     LDB  #LBUFMX-1      250 BYTES MAX IN BUFFER 
EC91 A684             (     ROMbasic.ASM):04023         L85B6     LDA  ,X             GET A CHARACTER FROM BUFFER 
EC93 2708             (     ROMbasic.ASM):04024                   BEQ  L85C2          EXIT IF IT’S A 0 
EC95 BDD017           (     ROMbasic.ASM):04025                   JSR  PUTCHR         SEND CHAR TO CONSOLE OUT 
EC98 3001             (     ROMbasic.ASM):04026                   LEAX $01,X          MOVE POINTER UP ONE  
EC9A 5A               (     ROMbasic.ASM):04027                   DECB                DECREMENT CHARACTER COUNTER  
EC9B 26F4             (     ROMbasic.ASM):04028                   BNE  L85B6          LOOP IF NOT DONE 
EC9D 39               (     ROMbasic.ASM):04029         L85C2     RTS                  
EC9E 8144             (     ROMbasic.ASM):04030         L85C3     CMPA #'D'           DELETE?         
ECA0 2648             (     ROMbasic.ASM):04031                   BNE  L860F          NO 
ECA2 6D84             (     ROMbasic.ASM):04032         L85C7     TST  ,X             * CHECK FOR END OF LINE 
ECA4 27F7             (     ROMbasic.ASM):04033                   BEQ  L85C2          * AND BRANCH IF SO 
ECA6 8D04             (     ROMbasic.ASM):04034                   BSR  L85D1          REMOVE A CHARACTER 
ECA8 5A               (     ROMbasic.ASM):04035                   DECB                DECREMENT REPEAT PARAMETER  
ECA9 26F7             (     ROMbasic.ASM):04036                   BNE  L85C7          BRANCH IF NOT DONE 
ECAB 39               (     ROMbasic.ASM):04037                   RTS                  
                      (     ROMbasic.ASM):04038         ; REMOVE ONE CHARACTER FROM BUFFER                      
ECAC 0A97             (     ROMbasic.ASM):04039         L85D1     DEC  VD7            DECREMENT LENGTH OF BUFFER 
ECAE 311F             (     ROMbasic.ASM):04040                   LEAY $-01,X         POINT Y TO ONE BEFORE CURRENT BUFFER POINTER  
ECB0 3121             (     ROMbasic.ASM):04041         L85D5     LEAY $01,Y          INCREMENT TEMPORARY BUFFER POINTER  
ECB2 A621             (     ROMbasic.ASM):04042                   LDA  $01,Y          GET NEXT CHARACTER 
ECB4 A7A4             (     ROMbasic.ASM):04043                   STA  ,Y             PUT IT IN CURRENT POSITION 
ECB6 26F8             (     ROMbasic.ASM):04044                   BNE  L85D5          BRANCH IF NOT END OF LINE 
ECB8 39               (     ROMbasic.ASM):04045                   RTS                  
ECB9 8149             (     ROMbasic.ASM):04046         L85DE     CMPA #'I' INSERT?         
ECBB 2713             (     ROMbasic.ASM):04047                   BEQ  L85F5          YES 
ECBD 8158             (     ROMbasic.ASM):04048                   CMPA #'X' EXTEND?         
ECBF 270D             (     ROMbasic.ASM):04049                   BEQ  L85F3          YES 
ECC1 8148             (     ROMbasic.ASM):04050                   CMPA #'H' HACK?           
ECC3 265C             (     ROMbasic.ASM):04051                   BNE  L8646          NO 
ECC5 6F84             (     ROMbasic.ASM):04052                   CLR  ,X             TURN CURRENT BUFFER POINTER INTO END OF LINE FLAG 
ECC7 1F10             (     ROMbasic.ASM):04053                   TFR  X,D            PUT CURRENT BUFFER POINTER IN ACCD 
ECC9 8300F5           (     ROMbasic.ASM):04054                   SUBD #LINBUF+2      SUBTRACT INITIAL POINTER POSITION  
ECCC D797             (     ROMbasic.ASM):04055                   STB  VD7            SAVE NEW BUFFER LENGTH 
ECCE 8DBF             (     ROMbasic.ASM):04056         L85F3     BSR  L85B4          DISPLAY THE LINE ON THE SCREEN 
ECD0 BDED62           (     ROMbasic.ASM):04057         L85F5     JSR  L8687          GET A KEYSTROKE 
ECD3 810D             (     ROMbasic.ASM):04058                   CMPA #CR            ENTER KEY?      
ECD5 278E             (     ROMbasic.ASM):04059                   BEQ  L858A          YES - INTERPRET ANOTHER COMMAND - PRINT LINE 
ECD7 811B             (     ROMbasic.ASM):04060                   CMPA #ESC           ESCAPE?         
ECD9 2725             (     ROMbasic.ASM):04061                   BEQ  L8625          YES - RETURN TO COMMAND LEVEL - DON’T PRINT LINE 
ECDB 8108             (     ROMbasic.ASM):04062                   CMPA #BS            BACK SPACE?     
ECDD 2622             (     ROMbasic.ASM):04063                   BNE  L8626          NO 
ECDF 8C00F4           (     ROMbasic.ASM):04064                   CMPX #LINBUF+1      COMPARE POINTER TO START OF BUFFER  
ECE2 27EC             (     ROMbasic.ASM):04065                   BEQ  L85F5          DO NOT ALLOW BS IF AT START 
ECE4 8D45             (     ROMbasic.ASM):04066                   BSR  L8650          MOVE POINTER BACK ONE, BS TO SCREEN 
ECE6 8DC4             (     ROMbasic.ASM):04067                   BSR  L85D1          REMOVE ONE CHARACTER FROM BUFFER 
ECE8 20E6             (     ROMbasic.ASM):04068                   BRA  L85F5          GET INSERT SUB COMMAND 
ECEA 8143             (     ROMbasic.ASM):04069         L860F     CMPA #'C'           CHANGE?         
ECEC 26CB             (     ROMbasic.ASM):04070                   BNE  L85DE          NO 
ECEE 6D84             (     ROMbasic.ASM):04071         L8613     TST  ,X             CHECK CURRENT BUFFER CHARACTER 
ECF0 270E             (     ROMbasic.ASM):04072                   BEQ  L8625          BRANCH IF END OF LINE 
ECF2 BDED62           (     ROMbasic.ASM):04073                   JSR  L8687          GET A KEYSTROKE 
ECF5 2502             (     ROMbasic.ASM):04074                   BLO  L861E          BRANCH IF LEGITIMATE KEY 
ECF7 20F5             (     ROMbasic.ASM):04075                   BRA  L8613          TRY AGAIN IF ILLEGAL KEY 
ECF9 A780             (     ROMbasic.ASM):04076         L861E     STA  ,X+            INSERT NEW CHARACTER INTO BUFFER 
ECFB 8D37             (     ROMbasic.ASM):04077                   BSR  L8659          SEND NEW CHARACTER TO SCREEN 
ECFD 5A               (     ROMbasic.ASM):04078                   DECB                DECREMENT REPEAT PARAMETER  
ECFE 26EE             (     ROMbasic.ASM):04079                   BNE  L8613          BRANCH IF NOT DONE 
ED00 39               (     ROMbasic.ASM):04080         L8625     RTS                  
ED01 D697             (     ROMbasic.ASM):04081         L8626     LDB  VD7            GET LENGTH OF LINE 
ED03 C1F9             (     ROMbasic.ASM):04082                   CMPB #LBUFMX-1      COMPARE TO MAXIMUM LENGTH  
ED05 2602             (     ROMbasic.ASM):04083                   BNE  L862E          BRANCH IF NOT AT MAXIMUM 
ED07 20C7             (     ROMbasic.ASM):04084                   BRA  L85F5          IGNORE INPUT IF LINE AT MAXIMUM LENGTH 
ED09 3410             (     ROMbasic.ASM):04085         L862E     PSHS X              SAVE CURRENT BUFFER POINTER  
ED0B 6D80             (     ROMbasic.ASM):04086         L8630     TST  ,X+            * SCAN THE LINE UNTIL END OF 
ED0D 26FC             (     ROMbasic.ASM):04087                   BNE  L8630          * LINE (0) IS FOUND 
ED0F E682             (     ROMbasic.ASM):04088         L8634     LDB  ,-X            DECR TEMP LINE POINTER AND GET A CHARACTER 
ED11 E701             (     ROMbasic.ASM):04089                   STB  $01,X          PUT CHARACTER BACK DOWN ONE SPOT 
ED13 ACE4             (     ROMbasic.ASM):04090                   CMPX ,S             HAVE WE REACHED STARTING POINT?  
ED15 26F8             (     ROMbasic.ASM):04091                   BNE  L8634          NO - KEEP GOING 
ED17 3262             (     ROMbasic.ASM):04092                   LEAS $02,S          PURGE BUFFER POINTER FROM STACK  
ED19 A780             (     ROMbasic.ASM):04093                   STA  ,X+            INSERT NEW CHARACTER INTO THE LINE 
ED1B 8D17             (     ROMbasic.ASM):04094                   BSR  L8659          SEND A CHARACTER TO CONSOLE OUT 
ED1D 0C97             (     ROMbasic.ASM):04095                   INC  VD7            ADD ONE TO BUFFER LENGTH 
ED1F 20AF             (     ROMbasic.ASM):04096                   BRA  L85F5          GET INSERT SUB COMMAND 
ED21 8108             (     ROMbasic.ASM):04097         L8646     CMPA #BS            BACKSPACE?      
ED23 2612             (     ROMbasic.ASM):04098                   BNE  L865C          NO 
ED25 8D04             (     ROMbasic.ASM):04099         L864A     BSR  L8650          MOVE POINTER BACK 1, SEND BS TO SCREEN 
ED27 5A               (     ROMbasic.ASM):04100                   DECB                DECREMENT REPEAT PARAMETER  
ED28 26FB             (     ROMbasic.ASM):04101                   BNE  L864A          LOOP UNTIL DONE 
ED2A 39               (     ROMbasic.ASM):04102                   RTS                  
ED2B 8C00F4           (     ROMbasic.ASM):04103         L8650     CMPX #LINBUF+1      COMPARE POINTER TO START OF BUFFER  
ED2E 27D0             (     ROMbasic.ASM):04104                   BEQ  L8625          DO NOT ALLOW BS IF AT START 
ED30 301F             (     ROMbasic.ASM):04105                   LEAX $-01,X         MOVE POINTER BACK ONE  
ED32 8608             (     ROMbasic.ASM):04106                   LDA  #BS            BACK SPACE 
ED34 7ED017           (     ROMbasic.ASM):04107         L8659     JMP  PUTCHR         SEND TO CONSOLE OUT 
ED37 814B             (     ROMbasic.ASM):04108         L865C     CMPA #'K'           KILL?           
ED39 2705             (     ROMbasic.ASM):04109                   BEQ  L8665          YES 
ED3B 8053             (     ROMbasic.ASM):04110                   SUBA #'S'           SEARCH?         
ED3D 2701             (     ROMbasic.ASM):04111                   BEQ  L8665          YES 
ED3F 39               (     ROMbasic.ASM):04112                   RTS                  
ED40 3402             (     ROMbasic.ASM):04113         L8665     PSHS A              SAVE KILL/SEARCH FLAG ON STACK  
ED42 8D1E             (     ROMbasic.ASM):04114                   BSR  L8687          * GET A KEYSTROKE (TARGET CHARACTER) 
ED44 3402             (     ROMbasic.ASM):04115                   PSHS A              * AND SAVE IT ON STACK  
ED46 A684             (     ROMbasic.ASM):04116         L866B     LDA  ,X             GET CURRENT BUFFER CHARACTER 
ED48 2716             (     ROMbasic.ASM):04117                   BEQ  L8685          AND RETURN IF END OF LINE 
ED4A 6D61             (     ROMbasic.ASM):04118                   TST  $01,S          CHECK KILL/SEARCH FLAG 
ED4C 2606             (     ROMbasic.ASM):04119                   BNE  L8679          BRANCH IF KILL 
ED4E 8DE4             (     ROMbasic.ASM):04120                   BSR  L8659          SEND A CHARACTER TO CONSOLE OUT 
ED50 3001             (     ROMbasic.ASM):04121                   LEAX $01,X          INCREMENT BUFFER POINTER  
ED52 2003             (     ROMbasic.ASM):04122                   BRA  L867C          CHECK NEXT INPUT CHARACTER 
ED54 BDECAC           (     ROMbasic.ASM):04123         L8679     JSR  L85D1          REMOVE ONE CHARACTER FROM BUFFER 
ED57 A684             (     ROMbasic.ASM):04124         L867C     LDA  ,X             GET CURRENT INPUT CHARACTER 
ED59 A1E4             (     ROMbasic.ASM):04125                   CMPA ,S             COMPARE TO TARGET CHARACTER  
ED5B 26E9             (     ROMbasic.ASM):04126                   BNE  L866B          BRANCH IF NO MATCH 
ED5D 5A               (     ROMbasic.ASM):04127                   DECB                DECREMENT REPEAT PARAMETER  
ED5E 26E6             (     ROMbasic.ASM):04128                   BNE  L866B          BRANCH IF NOT DONE 
ED60 35A0             (     ROMbasic.ASM):04129         L8685     PULS Y,PC           THE Y PULL WILL CLEAN UP THE STACK FOR THE 2 PSHS A  
                      (     ROMbasic.ASM):04130         ;                              
                      (     ROMbasic.ASM):04131         ; GET A KEYSTRKE                      
ED62 BDD000           (     ROMbasic.ASM):04132         L8687     JSR  KEYWAIT        CALL CONSOLE IN : DEV NBR=SCREEN 
ED65 817F             (     ROMbasic.ASM):04133                   CMPA #$7F           GRAPHIC CHARACTER?  
ED67 24F9             (     ROMbasic.ASM):04134                   BCC  L8687          YES - GET ANOTHER CHAR 
ED69 815F             (     ROMbasic.ASM):04135                   CMPA #$5F           SHIFT UP ARROW (QUIT INSERT)  
ED6B 2602             (     ROMbasic.ASM):04136                   BNE  L8694          NO 
ED6D 861B             (     ROMbasic.ASM):04137                   LDA  #ESC           REPLACE W/ESCAPE CODE 
ED6F 810D             (     ROMbasic.ASM):04138         L8694     CMPA #CR            ENTER KEY       
ED71 270E             (     ROMbasic.ASM):04139                   BEQ  L86A6          YES 
ED73 811B             (     ROMbasic.ASM):04140                   CMPA #ESC           ESCAPE?         
ED75 270A             (     ROMbasic.ASM):04141                   BEQ  L86A6          YES 
ED77 8108             (     ROMbasic.ASM):04142                   CMPA #BS            BACKSPACE?      
ED79 2706             (     ROMbasic.ASM):04143                   BEQ  L86A6          YES 
ED7B 8120             (     ROMbasic.ASM):04144                   CMPA #SPACE         SPACE           
ED7D 25E3             (     ROMbasic.ASM):04145                   BLO  L8687          GET ANOTHER CHAR IF CONTROL CHAR 
ED7F 1A01             (     ROMbasic.ASM):04146                   ORCC #$01           SET CARRY       
ED81 39               (     ROMbasic.ASM):04147         L86A6     RTS                  
                      (     ROMbasic.ASM):04148                                        
                      (     ROMbasic.ASM):04149         ; TRON                         
ED82 86               (     ROMbasic.ASM):04150         TRON      FCB  SKP1LD         SKIP ONE BYTE AND LDA #$4F 
                      (     ROMbasic.ASM):04151                                        
                      (     ROMbasic.ASM):04152         ; TROFF                        
ED83 4F               (     ROMbasic.ASM):04153         TROFF     CLRA                TROFF FLAG 
ED84 978C             (     ROMbasic.ASM):04154                   STA  TRCFLG         TRON/TROFF FLAG:0=TROFF, <> 0=TRON 
ED86 39               (     ROMbasic.ASM):04155                   RTS                  
                      (     ROMbasic.ASM):04156                                        
                      (     ROMbasic.ASM):04157         ; POS                          
ED87 8600             (     ROMbasic.ASM):04158         POS       LDA  #0             GET DEVICE NUMBER 
ED89 D679             (     ROMbasic.ASM):04159                   LDB  LPTPOS         GET PRINT POSITION 
ED8B 1D               (     ROMbasic.ASM):04160         LA5E8     SEX                 CONVERT ACCB TO 2 DIGIT SIGNED INTEGER 
ED8C 7EDC9B           (     ROMbasic.ASM):04161                   JMP  GIVABF         CONVERT ACCD TO FLOATING POINT 
                      (     ROMbasic.ASM):04162                                        
                      (     ROMbasic.ASM):04163         ; VARPTR                       
ED8F BDDA16           (     ROMbasic.ASM):04164         VARPT     JSR  LB26A          SYNTAX CHECK FOR ‘(‘ 
ED92 DC1F             (     ROMbasic.ASM):04165                   LDD  ARYEND         GET ADDR OF END OF ARRAYS 
ED94 3406             (     ROMbasic.ASM):04166                   PSHS B,A            SAVE IT ON STACK 
ED96 BDDAFE           (     ROMbasic.ASM):04167                   JSR  LB357          GET VARIABLE DESCRIPTOR 
ED99 BDDA13           (     ROMbasic.ASM):04168                   JSR  LB267          SYNTAX CHECK FOR ‘)‘ 
ED9C 3506             (     ROMbasic.ASM):04169                   PULS A,B            GET END OF ARRAYS ADDR BACK 
ED9E 1E10             (     ROMbasic.ASM):04170                   EXG  X,D            SWAP END OF ARRAYS AND VARIABLE DESCRIPTOR 
EDA0 9C1F             (     ROMbasic.ASM):04171                   CMPX ARYEND         COMPARE TO NEW END OF ARRAYS 
EDA2 2651             (     ROMbasic.ASM):04172                   BNE  L8724          ‘FC’ ERROR IF VARIABLE WAS NOT DEFINED PRIOR TO CALLING VARPTR 
EDA4 7EDC9B           (     ROMbasic.ASM):04173                   JMP  GIVABF         CONVERT VARIABLE DESCRIPTOR INTO A FP NUMBER 
                      (     ROMbasic.ASM):04174                                        
                      (     ROMbasic.ASM):04175         ; MID$(OLDSTRING,POSITION,LENGTH)=REPLACEMENT                      
EDA7 9D7C             (     ROMbasic.ASM):04176         L86D6     JSR  GETNCH         GET INPUT CHAR FROM BASIC 
EDA9 BDDA16           (     ROMbasic.ASM):04177                   JSR  LB26A          SYNTAX CHECK FOR ‘(‘ 
EDAC BDDAFE           (     ROMbasic.ASM):04178                   JSR  LB357          * GET VARIABLE DESCRIPTOR ADDRESS AND 
EDAF 3410             (     ROMbasic.ASM):04179                   PSHS X              * SAVE IT ON THE STACK 
EDB1 EC02             (     ROMbasic.ASM):04180                   LDD  $02,X          POINT ACCD TO START OF OLDSTRING 
EDB3 109321           (     ROMbasic.ASM):04181                   CMPD FRETOP         COMPARE TO START OF CLEARED SPACE 
EDB6 2304             (     ROMbasic.ASM):04182                   BLS  L86EB          BRANCH IF <= 
EDB8 9327             (     ROMbasic.ASM):04183                   SUBD MEMSIZ         SUBTRACT OUT TOP OF CLEARED SPACE 
EDBA 2312             (     ROMbasic.ASM):04184                   BLS  L86FD          BRANCH IF STRING IN STRING SPACE 
EDBC E684             (     ROMbasic.ASM):04185         L86EB     LDB  ,X             GET LENGTH OF OLDSTRING 
EDBE BDDD14           (     ROMbasic.ASM):04186                   JSR  LB56D          RESERVE ACCB BYTES IN STRING SPACE 
EDC1 3410             (     ROMbasic.ASM):04187                   PSHS X              SAVE RESERVED SPACE STRING ADDRESS ON STACK 
EDC3 AE62             (     ROMbasic.ASM):04188                   LDX  $02,S          POINT X TO OLDSTRING DESCRIPTOR 
EDC5 BDDDEA           (     ROMbasic.ASM):04189                   JSR  LB643          MOVE OLDSTRING INTO STRING SPACE 
EDC8 3550             (     ROMbasic.ASM):04190                   PULS X,U            * GET OLDSTRING DESCRIPTOR ADDRESS AND RESERVED STRING 
EDCA AF42             (     ROMbasic.ASM):04191                   STX  $02,U          * ADDRESS AND SAVE RESERVED ADDRESS AS OLDSTRING ADDRESS 
EDCC 3440             (     ROMbasic.ASM):04192                   PSHS U              SAVE OLDSTRING DESCRIPTOR ADDRESS 
EDCE BDDEDF           (     ROMbasic.ASM):04193         L86FD     JSR  LB738          SYNTAX CHECK FOR COMMA AND EVALUATE LENGTH EXPRESSION 
EDD1 3404             (     ROMbasic.ASM):04194                   PSHS B              SAVE POSITION PARAMETER ON STACK 
EDD3 5D               (     ROMbasic.ASM):04195                   TSTB * CHECK POSITION PARAMETER AND BRANCH  
EDD4 271F             (     ROMbasic.ASM):04196                   BEQ  L8724          * IF START OF STRING 
EDD6 C6FF             (     ROMbasic.ASM):04197                   LDB  #$FF           DEFAULT REPLACEMENT LENGTH = $FF 
EDD8 8129             (     ROMbasic.ASM):04198                   CMPA #')'           * CHECK FOR END OF MID$ STATEMENT AND 
EDDA 2703             (     ROMbasic.ASM):04199                   BEQ  L870E          * BRANCH IF AT END OF STATEMENT 
EDDC BDDEDF           (     ROMbasic.ASM):04200                   JSR  LB738          SYNTAX CHECK FOR COMMA AND EVALUATE LENGTH EXPRESSION 
EDDF 3404             (     ROMbasic.ASM):04201         L870E     PSHS B              SAVE LENGTH PARAMETER ON STACK 
EDE1 BDDA13           (     ROMbasic.ASM):04202                   JSR  LB267          SYNTAX CHECK FOR ‘)‘ 
EDE4 C6AE             (     ROMbasic.ASM):04203                   LDB  #TOK_EQUALS    TOKEN FOR = 
EDE6 BDDA1B           (     ROMbasic.ASM):04204                   JSR  LB26F          SYNTAX CHECK FOR “=‘ 
EDE9 8D2E             (     ROMbasic.ASM):04205                   BSR  L8748          EVALUATE REPLACEMENT STRING 
EDEB 1F13             (     ROMbasic.ASM):04206                   TFR  X,U            SAVE REPLACEMENT STRING ADDRESS IN U 
EDED AE62             (     ROMbasic.ASM):04207                   LDX  $02,S          POINT X TO OLOSTRING DESCRIPTOR ADDRESS 
EDEF A684             (     ROMbasic.ASM):04208                   LDA  ,X             GET LENGTH OF OLDSTRING 
EDF1 A061             (     ROMbasic.ASM):04209                   SUBA $01,S          SUBTRACT POSITION PARAMETER 
EDF3 2403             (     ROMbasic.ASM):04210                   BCC  L8727          INSERT REPLACEMENT STRING INTO OLDSTRING 
EDF5 7EDBF1           (     ROMbasic.ASM):04211         L8724     JMP  LB44A          ‘FC’ ERROR IF POSITION > LENGTH OF OLDSTRING 
EDF8 4C               (     ROMbasic.ASM):04212         L8727     INCA                * NOW ACCA = NUMBER OF CHARACTERS TO THE RIGHT 
                      (     ROMbasic.ASM):04213         ;                             * (INCLUSIVE) OF THE POSITION PARAMETER 
EDF9 A1E4             (     ROMbasic.ASM):04214                   CMPA ,S              
EDFB 2402             (     ROMbasic.ASM):04215                   BCC  L872E          BRANCH IF NEW STRING WILL FIT IN OLDSTRING 
EDFD A7E4             (     ROMbasic.ASM):04216                   STA  ,S             IF NOT, USE AS MUCH OF LENGTH PARAMETER AS WILL FIT 
EDFF A661             (     ROMbasic.ASM):04217         L872E     LDA  $01,S          GET POSITION PARAMETER 
EE01 1E89             (     ROMbasic.ASM):04218                   EXG  A,B            ACCA=LENGTH OF REPL STRING, ACCB=POSITION PARAMETER 
EE03 AE02             (     ROMbasic.ASM):04219                   LDX  $02,X          POINT X TO OLDSTRING ADDRESS 
EE05 5A               (     ROMbasic.ASM):04220                   DECB                * BASIC’S POSITION PARAMETER STARTS AT 1; THIS ROUTINE 
                      (     ROMbasic.ASM):04221         ;                             * WANTS IT TO START AT ZERO 
EE06 3A               (     ROMbasic.ASM):04222                   ABX                 POINT X TO POSITION IN OLDSTRING WHERE THE REPLACEMENT WILL GO 
EE07 4D               (     ROMbasic.ASM):04223                   TSTA                * IF THE LENGTH OF THE REPLACEMENT STRING IS ZERO 
EE08 270D             (     ROMbasic.ASM):04224                   BEQ  L8746          * THEN RETURN 
EE0A A1E4             (     ROMbasic.ASM):04225                   CMPA ,S              
EE0C 2302             (     ROMbasic.ASM):04226                   BLS  L873F          ADJUSTED LENGTH PARAMETER, THEN BRANCH 
EE0E A6E4             (     ROMbasic.ASM):04227                   LDA  ,S             OTHERWISE USE AS MUCH ROOM AS IS AVAILABLE 
EE10 1F89             (     ROMbasic.ASM):04228         L873F     TFR  A,B            SAVE NUMBER OF BYTES TO MOVE IN ACCB 
EE12 1E31             (     ROMbasic.ASM):04229                   EXG  U,X            SWAP SOURCE AND DESTINATION POINTERS 
EE14 BDD1D1           (     ROMbasic.ASM):04230                   JSR  LA59A          MOVE (B) BYTES FROM (X) TO (U) 
EE17 3596             (     ROMbasic.ASM):04231         L8746     PULS A,B,X,PC        
EE19 BDD902           (     ROMbasic.ASM):04232         L8748     JSR  LB156          EVALUATE EXPRESSION 
EE1C 7EDDFB           (     ROMbasic.ASM):04233                   JMP  LB654          *‘TM’ ERROR IF NUMERIC; RETURN WITH X POINTING 
                      (     ROMbasic.ASM):04234         ;                             *TO STRING, ACCB = LENGTH 
                      (     ROMbasic.ASM):04235                                        
                      (     ROMbasic.ASM):04236         ; STRING                       
EE1F BDDA16           (     ROMbasic.ASM):04237         STRING    JSR  LB26A          SYNTAX CHECK FOR ‘(’ 
EE22 BDDEB2           (     ROMbasic.ASM):04238                   JSR  LB70B          EVALUATE EXPRESSION; ERROR IF > 255 
EE25 3404             (     ROMbasic.ASM):04239                   PSHS B              SAVE LENGTH OF STRING 
EE27 BDDA19           (     ROMbasic.ASM):04240                   JSR  LB26D          SYNTAX CHECK FOR COMMA 
EE2A BDD902           (     ROMbasic.ASM):04241                   JSR  LB156          EVALUATE EXPRESSION 
EE2D BDDA13           (     ROMbasic.ASM):04242                   JSR  LB267          SYNTAX CHECK FOR ‘)‘ 
EE30 9606             (     ROMbasic.ASM):04243                   LDA  VALTYP         GET VARIABLE TYPE 
EE32 2605             (     ROMbasic.ASM):04244                   BNE  L8768          BRANCH IF STRING 
EE34 BDDEB5           (     ROMbasic.ASM):04245                   JSR  LB70E          CONVERT FPA0 INTO AN INTEGER IN ACCB 
EE37 2003             (     ROMbasic.ASM):04246                   BRA  L876B          SAVE THE STRING IN STRING SPACE 
EE39 BDDE4B           (     ROMbasic.ASM):04247         L8768     JSR  LB6A4          GET FIRST BYTE OF STRING 
EE3C 3404             (     ROMbasic.ASM):04248         L876B     PSHS B              SAVE FIRST BYTE OF EXPRESSION 
EE3E E661             (     ROMbasic.ASM):04249                   LDB  $01,S          GET LENGTH OF STRING 
EE40 BDDCB6           (     ROMbasic.ASM):04250                   JSR  LB50F          RESERVE ACCB BYTES IN STRING SPACE 
EE43 3506             (     ROMbasic.ASM):04251                   PULS A,B            GET LENGTH OF STRING AND CHARACTER 
EE45 2705             (     ROMbasic.ASM):04252                   BEQ  L877B          BRANCH IF NULL STRING 
EE47 A780             (     ROMbasic.ASM):04253         L8776     STA  ,X+            SAVE A CHARACTER IN STRING SPACE 
EE49 5A               (     ROMbasic.ASM):04254                   DECB                DECREMENT LENGTH 
EE4A 26FB             (     ROMbasic.ASM):04255                   BNE  L8776          BRANCH IF NOT DONE 
EE4C 7EDE42           (     ROMbasic.ASM):04256         L877B     JMP  LB69B          PUT STRING DESCRIPTOR ONTO STRING STACK 
                      (     ROMbasic.ASM):04257                                        
                      (     ROMbasic.ASM):04258         ; INSTR                        
EE4F BDDA16           (     ROMbasic.ASM):04259         INSTR     JSR  LB26A          SYNTAX CHECK FOR ‘(‘ 
EE52 BDD902           (     ROMbasic.ASM):04260                   JSR  LB156          EVALUATE EXPRESSION 
EE55 C601             (     ROMbasic.ASM):04261                   LDB  #$01           DEFAULT POSITION = 1 (SEARCH START) 
EE57 3404             (     ROMbasic.ASM):04262                   PSHS B              SAVE START 
EE59 9606             (     ROMbasic.ASM):04263                   LDA  VALTYP         GET VARIABLE TYPE 
EE5B 2610             (     ROMbasic.ASM):04264                   BNE  L879C          BRANCH IF STRING 
EE5D BDDEB5           (     ROMbasic.ASM):04265                   JSR  LB70E          CONVERT FPA0 TO INTEGER IN ACCB 
EE60 E7E4             (     ROMbasic.ASM):04266                   STB  ,S             SAVE START SEARCH VALUE 
EE62 2791             (     ROMbasic.ASM):04267                   BEQ  L8724          BRANCH IF START SEARCH AT ZERO 
EE64 BDDA19           (     ROMbasic.ASM):04268                   JSR  LB26D          SYNTAX CHECK FOR COMMA 
EE67 BDD902           (     ROMbasic.ASM):04269                   JSR  LB156          EVALUATE EXPRESSION - SEARCH STRING 
EE6A BDD8F2           (     ROMbasic.ASM):04270                   JSR  LB146          ‘TM’ ERROR IF NUMERIC 
EE6D 9E52             (     ROMbasic.ASM):04271         L879C     LDX  FPA0+2         SEARCH STRING DESCRIPTOR ADDRESS 
EE6F 3410             (     ROMbasic.ASM):04272                   PSHS X              SAVE ON THE STACK 
EE71 BDDA19           (     ROMbasic.ASM):04273                   JSR  LB26D          SYNTAX CHECK FOR COMMA 
EE74 BDEE19           (     ROMbasic.ASM):04274                   JSR  L8748          EVALUATE TARGET STRING EXPRESSION 
EE77 3414             (     ROMbasic.ASM):04275                   PSHS X,B            SAVE ADDRESS AND LENGTH ON STACK 
EE79 BDDA13           (     ROMbasic.ASM):04276                   JSR  LB267          SYNTAX CHECK FOR ')' 
EE7C AE63             (     ROMbasic.ASM):04277                   LDX  $03,S          * LOAD X WITH SEARCH STRING DESCRIPTOR ADDRESS 
EE7E BDDE00           (     ROMbasic.ASM):04278                   JSR  LB659          * AND GET THE LENGTH ANDADDRESS OF SEARCH STRING 
EE81 3404             (     ROMbasic.ASM):04279                   PSHS B              SAVE LENGTH ON STACK 
                      (     ROMbasic.ASM):04280         ;                              
                      (     ROMbasic.ASM):04281         ; AT THIS POINT THE STACK HAS THE FOLLOWING INFORMATION                      
                      (     ROMbasic.ASM):04282         ; ON IT: 0,S-SEARCH LENGTH; 1,S-TARGET LENGTH; 2 3,S-TARGET                      
                      (     ROMbasic.ASM):04283         ; ADDRESS; 4 5,S-SEARCH DESCRIPTOR ADDRESS; 6,S-SEARCH POSITION                      
EE83 E166             (     ROMbasic.ASM):04284                   CMPB $06,S          COMPARE LENGTH OF SEARCH STRING TO START 
EE85 2523             (     ROMbasic.ASM):04285                   BLO  L87D9          POSITION; RETURN 0 IF LENGTH < START 
EE87 A661             (     ROMbasic.ASM):04286                   LDA  $01,S          GET LENGTH OF TARGET STRING 
EE89 271C             (     ROMbasic.ASM):04287                   BEQ  L87D6          BRANCH IF TARGET STRING = NULL 
EE8B E666             (     ROMbasic.ASM):04288                   LDB  $06,S          GET START POSITION 
EE8D 5A               (     ROMbasic.ASM):04289                   DECB                MOVE BACK ONE 
EE8E 3A               (     ROMbasic.ASM):04290                   ABX  POINT X TO POSITION IN SEARCH STRING WHERE SEARCHING WILL START  
EE8F 3184             (     ROMbasic.ASM):04291         L87BE     LEAY ,X             POINT Y TO SEARCH POSITION 
EE91 EE62             (     ROMbasic.ASM):04292                   LDU  $02,S          POINT U TO START OF TARGET 
EE93 E661             (     ROMbasic.ASM):04293                   LDB  $01,S          LOAD ACCB WITH LENGTH OF TARGET 
EE95 A6E4             (     ROMbasic.ASM):04294                   LDA  ,S             LOAD ACCA WITH LENGTH OF SEARCH 
EE97 A066             (     ROMbasic.ASM):04295                   SUBA $06,S          SUBTRACT SEARCH POSITION FROM SEARCH LENGTH 
EE99 4C               (     ROMbasic.ASM):04296                   INCA                ADD ONE 
EE9A A161             (     ROMbasic.ASM):04297                   CMPA $01,S          COMPARE TO TARGET LENGTH 
EE9C 250C             (     ROMbasic.ASM):04298                   BLO  L87D9          RETURN 0 IF TARGET LENGTH > WHAT’S LEFT OF SEARCH STRING 
EE9E A680             (     ROMbasic.ASM):04299         L87CD     LDA  ,X+            GET A CHARACTER FROM SEARCH STRING 
EEA0 A1C0             (     ROMbasic.ASM):04300                   CMPA ,U+            COMPARE IT TO TARGET STRING 
EEA2 260C             (     ROMbasic.ASM):04301                   BNE  L87DF          BRANCH IF NO MATCH 
EEA4 5A               (     ROMbasic.ASM):04302                   DECB                DECREMENT TARGET LENGTH 
EEA5 26F7             (     ROMbasic.ASM):04303                   BNE  L87CD          CHECK ANOTHER CHARACTER 
EEA7 E666             (     ROMbasic.ASM):04304         L87D6     LDB  $06,S          GET MATCH POSITION 
EEA9 21               (     ROMbasic.ASM):04305         L87D8     FCB  SKP1           SKIP NEXT BYTE 
EEAA 5F               (     ROMbasic.ASM):04306         L87D9     CLRB                MATCH ADDRESS = 0 
EEAB 3267             (     ROMbasic.ASM):04307                   LEAS $07,S          CLEAN UP THE STACK 
EEAD 7EDC9A           (     ROMbasic.ASM):04308                   JMP  LB4F3          CONVERT ACCB TO FP NUMBER 
EEB0 6C66             (     ROMbasic.ASM):04309         L87DF     INC  $06,S          INCREMENT SEARCH POSITION 
EEB2 3021             (     ROMbasic.ASM):04310                   LEAX $01,Y          MOVE X TO NEXT SEARCH POSITION 
EEB4 20D9             (     ROMbasic.ASM):04311                   BRA  L87BE          KEEP LOOKING FOR A MATCH 
                      (     ROMbasic.ASM):04312                                        
                      (     ROMbasic.ASM):04313         ; EXTENDED BASIC RVEC19 HOOK CODE                      
EEB6 8126             (     ROMbasic.ASM):04314         XVEC19    CMPA #'&'           * 
EEB8 265C             (     ROMbasic.ASM):04315                   BNE  L8845          * RETURN IF NOT HEX OR OCTAL VARIABLE 
EEBA 3262             (     ROMbasic.ASM):04316                   LEAS $02,S          PURGE RETURN ADDRESS FROM STACK 
                      (     ROMbasic.ASM):04317         ; PROCESS A VARIABLE PRECEEDED BY A ‘&‘ (&H,&O)                      
EEBC 0F52             (     ROMbasic.ASM):04318         L87EB     CLR  FPA0+2         * CLEAR BOTTOM TWO 
EEBE 0F53             (     ROMbasic.ASM):04319                   CLR  FPA0+3         * BYTES OF FPA0 
EEC0 8E0052           (     ROMbasic.ASM):04320                   LDX  #FPA0+2        BYTES 2,3 OF FPA0 = (TEMPORARY ACCUMULATOR) 
EEC3 9D7C             (     ROMbasic.ASM):04321                   JSR  GETNCH         GET A CHARACTER FROM BASIC 
EEC5 814F             (     ROMbasic.ASM):04322                   CMPA #'O'            
EEC7 2712             (     ROMbasic.ASM):04323                   BEQ  L880A          YES 
EEC9 8148             (     ROMbasic.ASM):04324                   CMPA #'H'            
EECB 2723             (     ROMbasic.ASM):04325                   BEQ  L881F          YES 
EECD 9D82             (     ROMbasic.ASM):04326                   JSR  GETCCH         GET CURRENT INPUT CHARACTER 
EECF 200C             (     ROMbasic.ASM):04327                   BRA  L880C          DEFAULT TO OCTAL (&O) 
EED1 8138             (     ROMbasic.ASM):04328         L8800     CMPA #'8'            
EED3 1022EB4C         (     ROMbasic.ASM):04329                   LBHI LB277           
EED7 C603             (     ROMbasic.ASM):04330                   LDB  #$03           BASE 8 MULTIPLIER 
EED9 8D2A             (     ROMbasic.ASM):04331                   BSR  L8834          ADD DIGIT TO TEMPORARY ACCUMULATOR 
                      (     ROMbasic.ASM):04332         ; EVALUATE AN &O VARIABLE                      
EEDB 9D7C             (     ROMbasic.ASM):04333         L880A     JSR  GETNCH         GET A CHARACTER FROM BASIC 
EEDD 25F2             (     ROMbasic.ASM):04334         L880C     BLO  L8800          BRANCH IF NUMERIC 
EEDF 0F50             (     ROMbasic.ASM):04335         L880E     CLR  FPA0           * CLEAR 2 HIGH ORDER 
EEE1 0F51             (     ROMbasic.ASM):04336                   CLR  FPA0+1         * BYTES OF FPA0 
EEE3 0F06             (     ROMbasic.ASM):04337                   CLR  VALTYP         SET VARXABLE TYPE TO NUMERIC 
EEE5 0F63             (     ROMbasic.ASM):04338                   CLR  FPSBYT         ZERO OUT SUB BYTE OF FPA0 
EEE7 0F54             (     ROMbasic.ASM):04339                   CLR  FP0SGN         ZERO OUT MANTISSA SIGN OF FPA0 
EEE9 C6A0             (     ROMbasic.ASM):04340                   LDB  #$A0           * SET EXPONENT OF FPA0 
EEEB D74F             (     ROMbasic.ASM):04341                   STB  FP0EXP         * 
EEED 7EE483           (     ROMbasic.ASM):04342                   JMP  LBA1C          GO NORMALIZE FPA0 
                      (     ROMbasic.ASM):04343         ; EVALUATE AN &H VARIABLE                      
EEF0 9D7C             (     ROMbasic.ASM):04344         L881F     JSR  GETNCH         GET A CHARACTER FROM BASIC 
EEF2 250B             (     ROMbasic.ASM):04345                   BLO  L882E          BRANCH IF NUMERIC 
EEF4 BDDB49           (     ROMbasic.ASM):04346                   JSR  LB3A2          SET CARRY IF NOT ALPHA 
EEF7 25E6             (     ROMbasic.ASM):04347                   BLO  L880E          BRANCH IF NOT ALPHA OR NUMERIC 
EEF9 8147             (     ROMbasic.ASM):04348                   CMPA #'G'           CHECK FOR LETTERS A-F 
EEFB 24E2             (     ROMbasic.ASM):04349                   BCC  L880E          BRANCH IF >= G (ILLEGAL HEX LETTER) 
EEFD 8007             (     ROMbasic.ASM):04350                   SUBA #7             SUBTRACT ASCII DIFFERENCE BETWEEN A AND 9 
EEFF C604             (     ROMbasic.ASM):04351         L882E     LDB  #$04           BASE 16 DIGIT MULTIPLIER = 2**4 
EF01 8D02             (     ROMbasic.ASM):04352                   BSR  L8834          ADD DIGIT TO TEMPORARY ACCUMULATOR 
EF03 20EB             (     ROMbasic.ASM):04353                   BRA  L881F          KEEP EVALUATING VARIABLE 
EF05 6801             (     ROMbasic.ASM):04354         L8834     ASL  $01,X          * MULTIPLY TEMPORARY 
EF07 6984             (     ROMbasic.ASM):04355                   ROL  ,X             * ACCUMULATOR BY TWO 
EF09 1025F5EC         (     ROMbasic.ASM):04356                   LBCS LBA92          ‘OV' OVERFLOW ERROR 
EF0D 5A               (     ROMbasic.ASM):04357                   DECB                DECREMENT SHIFT COUNTER 
EF0E 26F5             (     ROMbasic.ASM):04358                   BNE  L8834          MULTIPLY TEMPORARY ACCUMULATOR AGAIN 
EF10 8030             (     ROMbasic.ASM):04359                   SUBA #'0'           MASK OFF ASCII 
EF12 AB01             (     ROMbasic.ASM):04360                   ADDA $01,X          * ADD DIGIT TO TEMPORARY 
EF14 A701             (     ROMbasic.ASM):04361                   STA  $01,X          * ACCUMULATOR AND SAVE IT 
EF16 39               (     ROMbasic.ASM):04362         L8845     RTS                  
                      (     ROMbasic.ASM):04363                                        
EF17 3540             (     ROMbasic.ASM):04364         XVEC15    PULS U              PULL RETURN ADDRESS AND SAVE IN U REGISTER 
EF19 0F06             (     ROMbasic.ASM):04365                   CLR  VALTYP         SET VARIABLE TYPE TO NUMERIC 
EF1B 9E83             (     ROMbasic.ASM):04366                   LDX  CHARAD         CURRENT INPUT POINTER TO X 
EF1D 9D7C             (     ROMbasic.ASM):04367                   JSR  GETNCH         GET CHARACTER FROM BASIC 
EF1F 8126             (     ROMbasic.ASM):04368                   CMPA #'&'           HEX AND OCTAL VARIABLES ARE PRECEEDED BY & 
EF21 2799             (     ROMbasic.ASM):04369                   BEQ  L87EB          PROCESS A ‘&‘ VARIABLE 
EF23 81B0             (     ROMbasic.ASM):04370                   CMPA #TOK_FN        TOKEN FOR FN 
EF25 275E             (     ROMbasic.ASM):04371                   BEQ  L88B4          PROCESS FN CALL 
EF27 81FF             (     ROMbasic.ASM):04372                   CMPA #$FF           CHECK FOR SECONDARY TOKEN 
EF29 2608             (     ROMbasic.ASM):04373                   BNE  L8862          NOT SECONDARY 
EF2B 9D7C             (     ROMbasic.ASM):04374                   JSR  GETNCH         GET CHARACTER FROM BASIC 
EF2D 8183             (     ROMbasic.ASM):04375                   CMPA #TOK_USR       TOKEN FOR USR 
EF2F 102700AB         (     ROMbasic.ASM):04376                   LBEQ L892C          PROCESS USR CALL 
EF33 9F83             (     ROMbasic.ASM):04377         L8862     STX  CHARAD         RESTORE BASIC’S INPUT POINTER 
EF35 6EC4             (     ROMbasic.ASM):04378                   JMP  ,U             RETURN TO CALLING ROUTINE 
EF37 9E68             (     ROMbasic.ASM):04379         L8866     LDX  CURLIN         GET CURRENT LINE NUMBER 
EF39 3001             (     ROMbasic.ASM):04380                   LEAX $01,X          IN DIRECT MODE? 
EF3B 26D9             (     ROMbasic.ASM):04381                   BNE  L8845          RETURN IF NOT IN DIRECT MODE 
EF3D C616             (     ROMbasic.ASM):04382                   LDB  #2*11          ‘ILLEGAL DIRECT STATEMENT’ ERROR 
EF3F 7ED426           (     ROMbasic.ASM):04383         L886E     JMP  LAC46          PROCESS ERROR 
                      (     ROMbasic.ASM):04384                                        
EF42 AE9F0083         (     ROMbasic.ASM):04385         DEF       LDX  [CHARAD]       GET TWO INPUT CHARS 
EF46 8CFF83           (     ROMbasic.ASM):04386                   CMPX #TOK_FF_USR    TOKEN FOR USR 
EF49 10270074         (     ROMbasic.ASM):04387                   LBEQ L890F          BRANCH IF DEF USR 
EF4D 8D23             (     ROMbasic.ASM):04388                   BSR  L88A1          GET DESCRIPTOR ADDRESS FOR FN VARIABLE NAME 
EF4F 8DE6             (     ROMbasic.ASM):04389                   BSR  L8866          DON’T ALLOW DEF FN IF IN DIRECT MODE 
EF51 BDDA16           (     ROMbasic.ASM):04390                   JSR  LB26A          SYNTAX CHECK FOR ‘(‘ 
EF54 C680             (     ROMbasic.ASM):04391                   LDB  #$80           * GET THE FLAG TO INDICATE ARRAY VARIABLE SEARCH DISABLE 
EF56 D708             (     ROMbasic.ASM):04392                   STB  ARYDIS         * AND SAVE IT IN THE ARRAY DISABLE FLAG 
EF58 BDDAFE           (     ROMbasic.ASM):04393                   JSR  LB357          GET VARIABLE DESCRIPTOR 
EF5B 8D25             (     ROMbasic.ASM):04394                   BSR  L88B1          ‘TM’ ERROR IF STRING 
EF5D BDDA13           (     ROMbasic.ASM):04395                   JSR  LB267          SYNTAX CHECK FOR ‘)‘ 
EF60 C6AE             (     ROMbasic.ASM):04396                   LDB  #TOK_EQUALS    TOKEN FOR ‘=‘ 
EF62 BDDA1B           (     ROMbasic.ASM):04397                   JSR  LB26F          DO A SYNTAX CHECK FOR = 
EF65 9E4B             (     ROMbasic.ASM):04398                   LDX  V4B            GET THE ADDRESS OF THE FN NAME DESCRIPTOR 
EF67 DC83             (     ROMbasic.ASM):04399                   LDD  CHARAD         * GET THE CURRENT INPUT POINTER ADDRESS AND 
EF69 ED84             (     ROMbasic.ASM):04400                   STD  ,X             * SAVE IT IN FIRST 2 BYTES OF THE DESCRIPTOR 
EF6B DC39             (     ROMbasic.ASM):04401                   LDD  VARPTR         = GET THE DESCRIPTOR ADDRESS OF THE ARGUMENT 
EF6D ED02             (     ROMbasic.ASM):04402                   STD  $02,X          = VARIABLE AND SAVE IT IN THE DESCRIPTOR OF THE FN NAME 
EF6F 7ED6B0           (     ROMbasic.ASM):04403                   JMP  DATA           MOVE INPUT POINTER TO END OF LINE OR SUBLINE 
EF72 C6B0             (     ROMbasic.ASM):04404         L88A1     LDB  #TOK_FN        TOKEN FOR FN 
EF74 BDDA1B           (     ROMbasic.ASM):04405                   JSR  LB26F          DO A SYNTAX CHECK FOR FN 
EF77 C680             (     ROMbasic.ASM):04406                   LDB  #$80           * GET THE FLAG TO INDICATE ARRAY VARIABLE SEARCH DISABLE FLAG 
EF79 D708             (     ROMbasic.ASM):04407                   STB  ARYDIS         * AND SAVE IT IN ARRAY VARIABLE FLAG 
EF7B 8A80             (     ROMbasic.ASM):04408                   ORA  #$80           SET BIT 7 OF CURRENT INPUT CHARACTER TO INDICATE AN FN VARIABLE 
EF7D BDDB03           (     ROMbasic.ASM):04409                   JSR  LB35C          * GET THE DESCRIPTOR ADDRESS OF THIS 
EF80 9F4B             (     ROMbasic.ASM):04410                   STX  V4B            * VARIABLE AND SAVE IT IN V4B 
EF82 7ED8EF           (     ROMbasic.ASM):04411         L88B1     JMP  LB143          ‘TM’ ERROR IF STRING VARIABLE 
                      (     ROMbasic.ASM):04412         ; EVALUATE AN FN CALL                      
EF85 8DEB             (     ROMbasic.ASM):04413         L88B4     BSR  L88A1          * GET THE DESCRIPTOR OF THE FN NAME 
EF87 3410             (     ROMbasic.ASM):04414                   PSHS X              * VARIABLE AND SAVE IT ON THE STACK 
EF89 BDDA0E           (     ROMbasic.ASM):04415                   JSR  LB262          SYNTAX CHECK FOR ‘(‘ & EVALUATE EXPR 
EF8C 8DF4             (     ROMbasic.ASM):04416                   BSR  L88B1          ‘TM’ ERROR IF STRING VARIABLE 
EF8E 3540             (     ROMbasic.ASM):04417                   PULS U              POINT U TO FN NAME DESCRIPTOR 
EF90 C632             (     ROMbasic.ASM):04418                   LDB  #2*25          ‘UNDEFINED FUNCTION CALL’ ERROR 
EF92 AE42             (     ROMbasic.ASM):04419                   LDX  $02,U          POINT X TO ARGUMENT VARIABLE DESCRIPTOR 
EF94 27A9             (     ROMbasic.ASM):04420                   BEQ  L886E          BRANCH TO ERROR HANDLER 
EF96 109E83           (     ROMbasic.ASM):04421                   LDY  CHARAD         SAVE CURRENT INPUT POINTER IN Y 
EF99 EEC4             (     ROMbasic.ASM):04422                   LDU  ,U             * POINT U TO START OF FN FORMULA AND 
EF9B DF83             (     ROMbasic.ASM):04423                   STU  CHARAD         * SAVE IT IN INPUT POINTER 
EF9D A604             (     ROMbasic.ASM):04424                   LDA  $04,X          = GET FP VALUE OF 
EF9F 3402             (     ROMbasic.ASM):04425                   PSHS A              = ARGUMENT VARIABLE, CURRENT INPUT 
EFA1 EC84             (     ROMbasic.ASM):04426                   LDD  ,X             = POINTER, AND ADDRESS OF START 
EFA3 EE02             (     ROMbasic.ASM):04427                   LDU  $02,X          = OF FN FORMULA AND SAVE 
EFA5 3476             (     ROMbasic.ASM):04428                   PSHS U,Y,X,B,A      = THEM ON THE STACK 
EFA7 BDE69C           (     ROMbasic.ASM):04429                   JSR  LBC35          PACK FPA0 AND SAVE IT IN (X) 
EFAA BDD8ED           (     ROMbasic.ASM):04430         L88D9     JSR  LB141          EVALUATE FN EXPRESSION 
EFAD 3576             (     ROMbasic.ASM):04431                   PULS A,B,X,Y,U      RESTORE REGISTERS 
EFAF ED84             (     ROMbasic.ASM):04432                   STD  ,X             * GET THE FP 
EFB1 EF02             (     ROMbasic.ASM):04433                   STU  $02,X          * VALUE OF THE ARGUMENT 
EFB3 3502             (     ROMbasic.ASM):04434                   PULS A              * VARIABLE OFF OF THE 
EFB5 A704             (     ROMbasic.ASM):04435                   STA  $04,X          * STACK AND RE-SAVE IT 
EFB7 9D82             (     ROMbasic.ASM):04436                   JSR  GETCCH         GET FINAL CHARACTER OF THE FN FORMULA 
EFB9 1026EA66         (     ROMbasic.ASM):04437                   LBNE LB277          ‘SYNTAX’ ERROR IF NOT END OF LINE 
EFBD 109F83           (     ROMbasic.ASM):04438                   STY  CHARAD         RESTORE INPUT POINTER 
EFC0 39               (     ROMbasic.ASM):04439         L88EF     RTS                  
                      (     ROMbasic.ASM):04440                                        
                      (     ROMbasic.ASM):04441                                        
                      (     ROMbasic.ASM):04442                                        
                      (     ROMbasic.ASM):04443         ; DEF USR                      
EFC1 9D7C             (     ROMbasic.ASM):04444         L890F     JSR  GETNCH         SKIP PAST SECOND BYTE OF DEF USR TOKEN 
EFC3 8D09             (     ROMbasic.ASM):04445                   BSR  L891C          GET FN NUMBER 
EFC5 3410             (     ROMbasic.ASM):04446                   PSHS X              SAVE FN EXEC ADDRESS STORAGE LOC 
EFC7 8D2D             (     ROMbasic.ASM):04447                   BSR  L8944          CALCULATE EXEC ADDRESS 
EFC9 3540             (     ROMbasic.ASM):04448                   PULS U              GET FN EXEC ADDRESS STORAGE LOC 
EFCB AFC4             (     ROMbasic.ASM):04449                   STX  ,U             SAVE EXEC ADDRESS 
EFCD 39               (     ROMbasic.ASM):04450                   RTS                  
EFCE 5F               (     ROMbasic.ASM):04451         L891C     CLRB                DEFAULT TO USR0 IF NO ARGUMENT 
EFCF 9D7C             (     ROMbasic.ASM):04452                   JSR  GETNCH         GET A CHARACTER FROM BASIC 
EFD1 2406             (     ROMbasic.ASM):04453                   BCC  L8927          BRANCH IF NOT NUMERIC 
EFD3 8030             (     ROMbasic.ASM):04454                   SUBA #'0'           MASK OFF ASCII 
EFD5 1F89             (     ROMbasic.ASM):04455                   TFR  A,B            SAVE USR NUMBER IN ACCB 
EFD7 9D7C             (     ROMbasic.ASM):04456                   JSR  GETNCH         GET A CHARACTER FROM BASIC 
EFD9 9E8D             (     ROMbasic.ASM):04457         L8927     LDX  USRADR         GET ADDRESS OF STORAGE LOCs FOR USR ADDRESS 
EFDB 58               (     ROMbasic.ASM):04458                   ASLB                X2 - 2 BYTES/USR ADDRESS 
EFDC 3A               (     ROMbasic.ASM):04459                   ABX                 ADD OFFSET TO START ADDRESS OF STORAGE LOCs 
EFDD 39               (     ROMbasic.ASM):04460                   RTS                  
                      (     ROMbasic.ASM):04461         ; PROCESS A USR CALL                      
EFDE 8DEE             (     ROMbasic.ASM):04462         L892C     BSR  L891C          GET STORAGE LOC OF EXEC ADDRESS FOR USR N 
EFE0 AE84             (     ROMbasic.ASM):04463                   LDX  ,X             * GET EXEC ADDRESS AND 
EFE2 3410             (     ROMbasic.ASM):04464                   PSHS X              * PUSH IT ONTO STACK 
EFE4 BDDA0E           (     ROMbasic.ASM):04465                   JSR  LB262          SYNTAX CHECK FOR ‘(‘ & EVALUATE EXPR 
EFE7 8E004F           (     ROMbasic.ASM):04466                   LDX  #FP0EXP        POINT X TO FPA0 
EFEA 9606             (     ROMbasic.ASM):04467                   LDA  VALTYP         GET VARIABLE TYPE 
EFEC 2707             (     ROMbasic.ASM):04468                   BEQ  L8943          BRANCH IF NUMERIC, STRING IF <> 0 
EFEE BDDDFE           (     ROMbasic.ASM):04469                   JSR  LB657          GET LENGTH & ADDRESS OF STRING VARIABLE 
EFF1 9E52             (     ROMbasic.ASM):04470                   LDX  FPA0+2         GET POINTER TO STRING DESCRIPTOR 
EFF3 9606             (     ROMbasic.ASM):04471                   LDA  VALTYP         GET VARIABLE TYPE 
EFF5 39               (     ROMbasic.ASM):04472         L8943     RTS                 JUMP TO USR ROUTINE (PSHS X ABOVE) 
EFF6 C6AE             (     ROMbasic.ASM):04473         L8944     LDB  #TOK_EQUALS    TOKEN FOR ‘=‘ 
EFF8 BDDA1B           (     ROMbasic.ASM):04474                   JSR  LB26F          DO A SYNTAX CHECK FOR = 
EFFB 7EDEE4           (     ROMbasic.ASM):04475                   JMP  LB73D          EVALUATE EXPRESSION, RETURN VALUE IN X 
                      (     ROMbasic.ASM):04476         ; DEL                          
EFFE 1027EBEF         (     ROMbasic.ASM):04477         DEL       LBEQ LB44A          FC’ ERROR IF NO ARGUMENT 
F002 BDD737           (     ROMbasic.ASM):04478                   JSR  LAF67          CONVERT A DECIMAL BASIC NUMBER TO BINARY 
F005 BDD4C5           (     ROMbasic.ASM):04479                   JSR  LAD01          FIND RAM ADDRESS OF START OF A BASIC LINE 
F008 9F93             (     ROMbasic.ASM):04480                   STX  VD3            SAVE RAM ADDRESS OF STARTING LINE NUMBER 
F00A 9D82             (     ROMbasic.ASM):04481                   JSR  GETCCH         GET CURRENT INPUT CHARACTER 
F00C 2710             (     ROMbasic.ASM):04482                   BEQ  L8990          BRANCH IF END OF LINE 
F00E 81A7             (     ROMbasic.ASM):04483                   CMPA #TOK_MINUS     TOKEN FOR '-' 
F010 263B             (     ROMbasic.ASM):04484                   BNE  L89BF          TERMINATE COMMAND IF LINE NUMBER NOT FOLLOWED BY '-' 
F012 9D7C             (     ROMbasic.ASM):04485                   JSR  GETNCH         GET A CHARACTER FROM BASIC 
F014 2704             (     ROMbasic.ASM):04486                   BEQ  L898C          IF END OF LINE, USE DEFAULT ENDING LINE NUMBER 
F016 8D24             (     ROMbasic.ASM):04487                   BSR  L89AE          * CONVERT ENDING LINE NUMBER TO BINARY 
F018 2004             (     ROMbasic.ASM):04488                   BRA  L8990          * AND SAVE IT IN BINVAL 
F01A 86FF             (     ROMbasic.ASM):04489         L898C     LDA  #$FF           = USE $FFXX AS DEFAULT ENDING 
F01C 972B             (     ROMbasic.ASM):04490                   STA  BINVAL         = LINE NUMBER - SAVE IT IN BINVAL 
F01E DE93             (     ROMbasic.ASM):04491         L8990     LDU  VD3            POINT U TO STARTING LINE NUMBER ADDRESS 
F020 8C               (     ROMbasic.ASM):04492         L8992     FCB  SKP2           SKIP TWO BYTES 
F021 EEC4             (     ROMbasic.ASM):04493         L8993     LDU  ,U             POINT U TO START OF NEXT LINE 
F023 ECC4             (     ROMbasic.ASM):04494                   LDD  ,U             CHECK FOR END OF PROGRAM 
F025 2706             (     ROMbasic.ASM):04495                   BEQ  L899F          BRANCH IF END OF PROGRAM 
F027 EC42             (     ROMbasic.ASM):04496                   LDD  $02,U          LOAD ACCD WITH THIS LINE’S NUMBER 
F029 932B             (     ROMbasic.ASM):04497                   SUBD BINVAL         SUBTRACT ENDING LINE NUMBER ADDRESS 
F02B 23F4             (     ROMbasic.ASM):04498                   BLS  L8993          BRANCH IF = < ENDING LINE NUMBER 
F02D 9E93             (     ROMbasic.ASM):04499         L899F     LDX  VD3            GET STARTING LINE NUMBER 
F02F 8D15             (     ROMbasic.ASM):04500                   BSR  L89B8          MOVE (U) TO (X) UNTIL END OF PROGRAM 
F031 BDD4E5           (     ROMbasic.ASM):04501                   JSR  LAD21          RESET BASIC’S INPUT POINTER AND ERASE VARIABLES 
F034 9E93             (     ROMbasic.ASM):04502                   LDX  VD3            GET STARTING LINE NUMBER ADDRESS 
F036 BDD4B5           (     ROMbasic.ASM):04503                   JSR  LACF1          RECOMPUTE START OF NEXT LINE ADDRESSES 
F039 7ED445           (     ROMbasic.ASM):04504                   JMP  LAC73          JUMP TO BASIC’S MAIN COMMAND LOOP 
F03C BDD737           (     ROMbasic.ASM):04505         L89AE     JSR  LAF67          GO GET LINE NUMBER CONVERTED TO BINARY 
F03F 7ED1DA           (     ROMbasic.ASM):04506                   JMP  LA5C7          MAKE SURE THERE’S NO MORE ON THIS LINE 
F042 A6C0             (     ROMbasic.ASM):04507         L89B4     LDA  ,U+            GET A BYTE FROM (U) 
F044 A780             (     ROMbasic.ASM):04508                   STA  ,X+            MOVE THE BYTE TO (X) 
F046 11931B           (     ROMbasic.ASM):04509         L89B8     CMPU VARTAB         COMPARE TO END OF BASIC 
F049 26F7             (     ROMbasic.ASM):04510                   BNE  L89B4          BRANCH IF NOT AT END 
F04B 9F1B             (     ROMbasic.ASM):04511                   STX  VARTAB         SAVE (X) AS NEW END OF BASIC 
F04D 39               (     ROMbasic.ASM):04512         L89BF     RTS                  
                      (     ROMbasic.ASM):04513                                        
                      (     ROMbasic.ASM):04514                                        
F04E BDEF37           (     ROMbasic.ASM):04515         L89C0     JSR  L8866          ‘BS’ ERROR IF IN DIRECT MODE 
F051 9D7C             (     ROMbasic.ASM):04516                   JSR  GETNCH         GET A CHAR FROM BASIC 
F053 8122             (     ROMbasic.ASM):04517         L89D2     CMPA #'"'           CHECK FOR PROMPT STRING 
F055 260B             (     ROMbasic.ASM):04518                   BNE  L89E1          BRANCH IF NO PROMPT STRING 
F057 BDD9F0           (     ROMbasic.ASM):04519                   JSR  LB244          STRIP OFF PROMPT STRING & PUT IT ON STRING STACK 
F05A C63B             (     ROMbasic.ASM):04520                   LDB  #';'           * 
F05C BDDA1B           (     ROMbasic.ASM):04521                   JSR  LB26F          * DO A SYNTAX CHECK FOR; 
F05F BDE406           (     ROMbasic.ASM):04522                   JSR  LB99F          REMOVE PROMPT STRING FROM STRING STACK & SEND TO CONSOLE OUT 
F062 327E             (     ROMbasic.ASM):04523         L89E1     LEAS $-02,S         RESERVE TWO STORAGE SLOTS ON STACK 
F064 BDD7EC           (     ROMbasic.ASM):04524                   JSR  LB035          INPUT A LINE FROM CURRENT INPUT DEVICE 
F067 3262             (     ROMbasic.ASM):04525                   LEAS $02,S          CLEAN UP THE STACK 
F069 BDDAFE           (     ROMbasic.ASM):04526                   JSR  LB357          SEARCH FOR A VARIABLE 
F06C 9F3B             (     ROMbasic.ASM):04527                   STX  VARDES         SAVE POINTER TO VARIABLE DESCRIPTOR 
F06E BDD8F2           (     ROMbasic.ASM):04528                   JSR  LB146          ‘TM’ ERROR IF VARIABLE TYPE = NUMERIC 
F071 8E00F3           (     ROMbasic.ASM):04529                   LDX  #LINBUF        POINT X TO THE STRING BUFFER WHERE THE INPUT STRING WAS STORED 
F074 4F               (     ROMbasic.ASM):04530                   CLRA                TERMINATOR CHARACTER 0 (END OF LINE) 
F075 BDDCC3           (     ROMbasic.ASM):04531                   JSR  LB51A          PARSE THE INPUT STRING AND STORE IT IN THE STRING SPACE 
F078 7ED774           (     ROMbasic.ASM):04532                   JMP  LAFA4          REMOVE DESCRIPTOR FROM STRING STACK 
F07B BDD737           (     ROMbasic.ASM):04533         L89FC     JSR  LAF67          STRIP A DECIMAL NUMBER FROM BASIC INPUT LINE 
F07E 9E2B             (     ROMbasic.ASM):04534                   LDX  BINVAL         GET BINARY VALUE 
F080 39               (     ROMbasic.ASM):04535                   RTS                  
F081 9E91             (     ROMbasic.ASM):04536         L8A02     LDX  VD1            GET CURRENT OLD NUMBER BEING RENUMBERED 
F083 9F2B             (     ROMbasic.ASM):04537         L8A04     STX  BINVAL         SAVE THE LINE NUMBER BEING SEARCHED FOR 
F085 7ED4C5           (     ROMbasic.ASM):04538                   JMP  LAD01          GO FIND THE LINE NUMBER IN BASIC PROGRAM 
                      (     ROMbasic.ASM):04539                                        
                      (     ROMbasic.ASM):04540         ; RENUM                        
F088 BDD4EA           (     ROMbasic.ASM):04541         RENUM     JSR  LAD26          ERASE VARIABLES 
F08B CC000A           (     ROMbasic.ASM):04542                   LDD  #10            DEFAULT LINE NUMBER INTERVAL 
F08E DD95             (     ROMbasic.ASM):04543                   STD  VD5            SAVE DEFAULT RENUMBER START LINE NUMBER 
F090 DD8F             (     ROMbasic.ASM):04544                   STD  VCF            SAVE DEFAULT INTERVAL 
F092 5F               (     ROMbasic.ASM):04545                   CLRB                NOW ACCD = 0 
F093 DD91             (     ROMbasic.ASM):04546                   STD  VD1            DEFAULT LINE NUMBER OF WHERE TO START RENUMBERING 
F095 9D82             (     ROMbasic.ASM):04547                   JSR  GETCCH         GET CURRENT INPUT CHARACTER 
F097 2406             (     ROMbasic.ASM):04548                   BCC  L8A20          BRANCH IF NOT NUMERIC 
F099 8DE0             (     ROMbasic.ASM):04549                   BSR  L89FC          CONVERT DECIMAL NUMBER IN BASIC PROGRAM TO BINARY 
F09B 9F95             (     ROMbasic.ASM):04550                   STX  VD5            SAVE LINE NUMBER WHERE RENUMBERING STARTS 
F09D 9D82             (     ROMbasic.ASM):04551                   JSR  GETCCH         GET CURRENT INPUT CHARACTER 
F09F 271B             (     ROMbasic.ASM):04552         L8A20     BEQ  L8A3D          BRANCH IF END OF LINE 
F0A1 BDDA19           (     ROMbasic.ASM):04553                   JSR  LB26D          SYNTAX CHECK FOR COMMA 
F0A4 2406             (     ROMbasic.ASM):04554                   BCC  L8A2D          BRANCH IF NEXT CHARACTER NOT NUMERIC 
F0A6 8DD3             (     ROMbasic.ASM):04555                   BSR  L89FC          CONVERT DECIMAL NUMBER IN BASIC PROGRAM TO BINARY 
F0A8 9F91             (     ROMbasic.ASM):04556                   STX  VD1            SAVE NEW RENUMBER LINE 
F0AA 9D82             (     ROMbasic.ASM):04557                   JSR  GETCCH         GET CURRENT INPUT CHARACTER 
F0AC 270E             (     ROMbasic.ASM):04558         L8A2D     BEQ  L8A3D          BRANCH IF END OF LINE 
F0AE BDDA19           (     ROMbasic.ASM):04559                   JSR  LB26D          SYNTAX CHECK FOR COMMA 
F0B1 2406             (     ROMbasic.ASM):04560                   BCC  L8A3A          BRANCH IF NEXT CHARACTER NOT NUMERIC 
F0B3 8DC6             (     ROMbasic.ASM):04561                   BSR  L89FC          CONVERT DECIMAL NUMBER IN BASIC PROGRAM TO BINARY 
F0B5 9F8F             (     ROMbasic.ASM):04562                   STX  VCF            SAVE NEW INTERVAL 
F0B7 2749             (     ROMbasic.ASM):04563                   BEQ  L8A83          ‘FC' ERROR 
F0B9 BDD1DA           (     ROMbasic.ASM):04564         L8A3A     JSR  LA5C7          CHECK FOR MORE CHARACTERS ON LINE - ‘SYNTAX’ ERROR IF ANY 
F0BC 8DC3             (     ROMbasic.ASM):04565         L8A3D     BSR  L8A02          GO GET ADDRESS OF OLD NUMBER BEING RENUMBERED 
F0BE 9F93             (     ROMbasic.ASM):04566                   STX  VD3            SAVE ADDRESS 
F0C0 9E95             (     ROMbasic.ASM):04567                   LDX  VD5            GET NEXT RENUMBERED LINE NUMBER TO USE 
F0C2 8DBF             (     ROMbasic.ASM):04568                   BSR  L8A04          FIND THE LINE NUMBER IN THE BASIC PROGRAM 
F0C4 9C93             (     ROMbasic.ASM):04569                   CMPX VD3            COMPARE TO ADDRESS OF OLD LINE NUMBER 
F0C6 253A             (     ROMbasic.ASM):04570                   BLO  L8A83          ‘FC’ ERROR IF NEW ADDRESS < OLD ADDRESS 
F0C8 8D1C             (     ROMbasic.ASM):04571                   BSR  L8A67          MAKE SURE RENUMBERED LINE NUMBERS WILL BE IN RANGE 
F0CA BDF15C           (     ROMbasic.ASM):04572                   JSR  L8ADD          CONVERT ASCII LINE NUMBERS TO ‘EXPANDED’ BINARY 
F0CD BDD4B3           (     ROMbasic.ASM):04573                   JSR  LACEF          RECALCULATE NEXT LINE RAM ADDRESSES 
F0D0 8DAF             (     ROMbasic.ASM):04574                   BSR  L8A02          GET RAM ADDRESS OF FIRST LINE TO BE RENUMBERED 
F0D2 9F93             (     ROMbasic.ASM):04575                   STX  VD3            SAVE IT 
F0D4 8D3A             (     ROMbasic.ASM):04576                   BSR  L8A91          MAKE SURE LINE NUMBERS EXIST 
F0D6 8D0F             (     ROMbasic.ASM):04577                   BSR  L8A68          INSERT NEW LINE NUMBERS IN LINE HEADERS 
F0D8 8D36             (     ROMbasic.ASM):04578                   BSR  L8A91          INSERT NEW LINE NUMBERS IN PROGRAM STATEMENTS 
F0DA BDF1F7           (     ROMbasic.ASM):04579                   JSR  L8B7B          CONVERT PACKED BINARY LINE NUMBERS TO ASCII 
F0DD BDD4EA           (     ROMbasic.ASM):04580                   JSR  LAD26          ERASE VARIABLES 
F0E0 BDD4B3           (     ROMbasic.ASM):04581                   JSR  LACEF          RECALCULATE NEXT LINE RAM ADDRESS 
F0E3 7ED445           (     ROMbasic.ASM):04582                   JMP  LAC73          GO BACK TO BASIC’S MAIN LOOP 
F0E6 86               (     ROMbasic.ASM):04583         L8A67     FCB  SKP1LD         SKIP ONE BYTE - LDA #$4F 
F0E7 4F               (     ROMbasic.ASM):04584         L8A68     CLRA                NEW LINE NUMBER FLAG - 0; INSERT NEW LINE NUMBERS 
F0E8 9798             (     ROMbasic.ASM):04585                   STA  VD8            SAVE NEW LINE NUMBER FLAG; 0 = INSERT NEW NUMBERS 
F0EA 9E93             (     ROMbasic.ASM):04586                   LDX  VD3            GET ADDRESS OF OLD LINE NUMBER BEING RENUMBERED 
F0EC DC95             (     ROMbasic.ASM):04587                   LDD  VD5            GET THE CURRENT RENUMBERED LINE NUMBER 
F0EE 8D15             (     ROMbasic.ASM):04588                   BSR  L8A86          RETURN IF END OF PROGRAM 
F0F0 0D98             (     ROMbasic.ASM):04589         L8A71     TST  VD8            CHECK NEW LINE NUMBER FLAG 
F0F2 2602             (     ROMbasic.ASM):04590                   BNE  L8A77          BRANCH IF NOT INSERTING NEW LINE NUMBERS 
F0F4 ED02             (     ROMbasic.ASM):04591                   STD  $02,X          STORE THE NEW LINE NUMBER IN THE BASIC PROGRAM 
F0F6 AE84             (     ROMbasic.ASM):04592         L8A77     LDX  ,X             POINT X TO THE NEXT LINE IN BASIC 
F0F8 8D0B             (     ROMbasic.ASM):04593                   BSR  L8A86          RETURN IF END OF PROGRAM 
F0FA D38F             (     ROMbasic.ASM):04594                   ADDD VCF            ADD INTERVAL TO CURRENT RENUMBERED LINE NUMBER 
F0FC 2504             (     ROMbasic.ASM):04595                   BLO  L8A83          ‘FC’ ERROR IF LINE NUMBER > $FFFF 
F0FE 81FA             (     ROMbasic.ASM):04596                   CMPA #MAXLIN        LARGEST LINE NUMBER = $F9FF 
F100 25EE             (     ROMbasic.ASM):04597                   BLO  L8A71          BRANCH IF LEGAL LINE NUMBER 
F102 7EDBF1           (     ROMbasic.ASM):04598         L8A83     JMP  LB44A          ‘FC’ ERROR IF LINE NUMBER MS BYTE > $F9 
                      (     ROMbasic.ASM):04599         ; TEST THE TWO BYTES POINTED TO BY (X).                      
                      (     ROMbasic.ASM):04600         ; NORMAL RETURN IF <> 0. IF = 0 (END OF                      
                      (     ROMbasic.ASM):04601         ; PROGRAM) RETURN IS PULLED OFF STACK AND                      
                      (     ROMbasic.ASM):04602         ; YOU RETURN TO PREVIOUS SUBROUTINE CALL.                      
F105 3406             (     ROMbasic.ASM):04603         L8A86     PSHS B,A            SAVE ACCD 
F107 EC84             (     ROMbasic.ASM):04604                   LDD  ,X             TEST THE 2 BYTES POINTED TO BY X 
F109 3506             (     ROMbasic.ASM):04605                   PULS A,B            RESTORE ACCD 
F10B 2602             (     ROMbasic.ASM):04606                   BNE  L8A90          BRANCH IF NOT END OF PROGRAM 
F10D 3262             (     ROMbasic.ASM):04607                   LEAS $02,S          PURGE RETURN ADDRESS FROM STACK 
F10F 39               (     ROMbasic.ASM):04608         L8A90     RTS                  
F110 9E19             (     ROMbasic.ASM):04609         L8A91     LDX  TXTTAB         GET START OF BASIC PROGRAM 
F112 301F             (     ROMbasic.ASM):04610                   LEAX $-01,X         MOVE POINTER BACK ONE 
F114 3001             (     ROMbasic.ASM):04611         L8A95     LEAX $01,X          MOVE POINTER UP ONE 
F116 8DED             (     ROMbasic.ASM):04612                   BSR  L8A86          RETURN IF END OF PROGRAM 
F118 3003             (     ROMbasic.ASM):04613         L8A99     LEAX $03,X          SKIP OVER NEXT LINE ADDRESS AND LINE NUMBER 
F11A 3001             (     ROMbasic.ASM):04614         L8A9B     LEAX $01,X          MOVE POINTER TO NEXT CHARACTER 
F11C A684             (     ROMbasic.ASM):04615                   LDA  ,X             CHECK CURRENT CHARACTER 
F11E 27F4             (     ROMbasic.ASM):04616                   BEQ  L8A95          BRANCH IF END OF LINE 
F120 9F0F             (     ROMbasic.ASM):04617                   STX  TEMPTR         SAVE CURRENT POINTER 
F122 4A               (     ROMbasic.ASM):04618                   DECA                = 
F123 270C             (     ROMbasic.ASM):04619                   BEQ  L8AB2          =BRANCH IF START OF PACKED NUMERIC LINE 
F125 4A               (     ROMbasic.ASM):04620                   DECA                * 
F126 272A             (     ROMbasic.ASM):04621                   BEQ  L8AD3          *BRANCH IF LINE NUMBER EXISTS 
F128 4A               (     ROMbasic.ASM):04622                   DECA                = 
F129 26EF             (     ROMbasic.ASM):04623                   BNE  L8A9B          =MOVE TO NEXT CHARACTER IF > 3 
F12B 8603             (     ROMbasic.ASM):04624         L8AAC     LDA  #$03           * SET 1ST BYTE = 3 TO INDICATE LINE 
F12D A780             (     ROMbasic.ASM):04625                   STA  ,X+            * NUMBER DOESN’T CURRENTLY EXIST 
F12F 20E7             (     ROMbasic.ASM):04626                   BRA  L8A99          GO GET ANOTHER CHARACTER 
F131 EC01             (     ROMbasic.ASM):04627         L8AB2     LDD  $01,X          GET MS BYTE OF LINE NUMBER 
F133 6A02             (     ROMbasic.ASM):04628                   DEC  $02,X          DECREMENT ZERO CHECK BYTE 
F135 2701             (     ROMbasic.ASM):04629                   BEQ  L8AB9          BRANCH IF MS BYTE <> 0 
F137 4F               (     ROMbasic.ASM):04630                   CLRA                CLEAR MS BYTE 
F138 E603             (     ROMbasic.ASM):04631         L8AB9     LDB  $03,X          GET LS BYTE OF LINE NUMBER 
F13A 6A04             (     ROMbasic.ASM):04632                   DEC  $04,X          DECREMENT ZERO CHECK FLAG 
F13C 2701             (     ROMbasic.ASM):04633                   BEQ  L8AC0          BRANCH IF IS BYTE <> 0 
F13E 5F               (     ROMbasic.ASM):04634                   CLRB                CLEAR LS BYTE 
F13F ED01             (     ROMbasic.ASM):04635         L8AC0     STD  $01,X          SAVE BINARY LINE NUMBER 
F141 DD2B             (     ROMbasic.ASM):04636                   STD  BINVAL         SAVE TRIAL LINE NUMBER 
F143 BDD4C5           (     ROMbasic.ASM):04637                   JSR  LAD01          FIND RAM ADDRESS OF A BASIC LINE NUMBER 
F146 9E0F             (     ROMbasic.ASM):04638         L8AC7     LDX  TEMPTR         GET BACK POINTER TO START OF PACKED LINE NUMBER 
F148 25E1             (     ROMbasic.ASM):04639                   BLO  L8AAC          BRANCH IF NO LINE NUMBER MATCH FOUND 
F14A DC47             (     ROMbasic.ASM):04640                   LDD  V47            GET START ADDRESS OF LINE NUMBER 
F14C 6C80             (     ROMbasic.ASM):04641                   INC  ,X+            * SET 1ST BYTE = 2, TO INDICATE LINE NUMBER EXISTS IF CHECKING FOR 
                      (     ROMbasic.ASM):04642         ;                             * EXISTENCE OF LINE NUMBER, SET IT = 1 IF INSERTING LINE NUMBERS  
F14E ED84             (     ROMbasic.ASM):04643                   STD  ,X             SAVE RAM ADDRESS OF CORRECT LINE NUMBER 
F150 20C6             (     ROMbasic.ASM):04644                   BRA  L8A99          GO GET ANOTHER CHARACTER 
F152 6F84             (     ROMbasic.ASM):04645         L8AD3     CLR  ,X             CLEAR CARRY FLAG AND 1ST BYTE 
F154 AE01             (     ROMbasic.ASM):04646                   LDX  $01,X          POINT X TO RAM ADDRESS OF CORRECT LINE NUMBER 
F156 AE02             (     ROMbasic.ASM):04647                   LDX  $02,X          PUT CORRECT LINE NUMBER INTO (X) 
F158 9F47             (     ROMbasic.ASM):04648                   STX  V47            SAVE IT TEMPORARILY 
F15A 20EA             (     ROMbasic.ASM):04649                   BRA  L8AC7          GO INSERT IT INTO BASIC LINE 
F15C 9E19             (     ROMbasic.ASM):04650         L8ADD     LDX  TXTTAB         GET BEGINNING OF BASIC PROGRAM 
F15E 2004             (     ROMbasic.ASM):04651                   BRA  L8AE5           
F160 9E83             (     ROMbasic.ASM):04652         L8AE1     LDX  CHARAD         *GET CURRENT INPUT POINTER 
F162 3001             (     ROMbasic.ASM):04653                   LEAX $01,X          *AND BUMP IT ONE 
F164 8D9F             (     ROMbasic.ASM):04654         L8AE5     BSR  L8A86          RETURN IF END OF PROGRAM 
F166 3002             (     ROMbasic.ASM):04655                   LEAX $02,X          SKIP PAST NEXT LINE ADDRESS 
F168 3001             (     ROMbasic.ASM):04656         L8AE9     LEAX $01,X          ADVANCE POINTER BY ONE 
F16A 9F83             (     ROMbasic.ASM):04657         L8AEB     STX  CHARAD         SAVE NEW BASIC INPUT POINTER 
F16C 9D7C             (     ROMbasic.ASM):04658         L8AED     JSR  GETNCH         GET NEXT CHARACTER FROM BASIC 
F16E 4D               (     ROMbasic.ASM):04659         L8AEF     TSTA                CHECK THE CHARACTER 
F16F 27EF             (     ROMbasic.ASM):04660                   BEQ  L8AE1          BRANCH IF END OF LINE 
F171 2AF9             (     ROMbasic.ASM):04661                   BPL  L8AED          BRANCH IF NOT A TOKEN 
F173 9E83             (     ROMbasic.ASM):04662                   LDX  CHARAD         GET CURRENT INPUT POINTER 
F175 81FF             (     ROMbasic.ASM):04663                   CMPA #$FF           IS THIS A SECONDARY TOKEN? 
F177 27EF             (     ROMbasic.ASM):04664                   BEQ  L8AE9          YES - IGNORE IT 
F179 81A2             (     ROMbasic.ASM):04665                   CMPA #TOK_THEN      TOKEN FOR THEN? 
F17B 2712             (     ROMbasic.ASM):04666                   BEQ  L8B13          YES 
F17D 8184             (     ROMbasic.ASM):04667                   CMPA #TOK_ELSE      TOKEN FOR ELSE? 
F17F 270E             (     ROMbasic.ASM):04668                   BEQ  L8B13          YES 
F181 8181             (     ROMbasic.ASM):04669                   CMPA #TOK_GO        TOKEN FOR GO? 
F183 26E7             (     ROMbasic.ASM):04670                   BNE  L8AED          NO 
F185 9D7C             (     ROMbasic.ASM):04671                   JSR  GETNCH         GET A CHARACTER FROM BASIC 
F187 81A0             (     ROMbasic.ASM):04672                   CMPA #TOK_TO        TOKEN FOR TO? 
F189 2704             (     ROMbasic.ASM):04673                   BEQ  L8B13          YES 
F18B 81A1             (     ROMbasic.ASM):04674                   CMPA #TOK_SUB       TOKEN FOR SUB? 
F18D 26DB             (     ROMbasic.ASM):04675                   BNE  L8AEB          NO 
F18F 9D7C             (     ROMbasic.ASM):04676         L8B13     JSR  GETNCH         GET A CHARACTER FROM BASIC 
F191 2504             (     ROMbasic.ASM):04677                   BLO  L8B1B          BRANCH IF NUMERIC 
F193 9D82             (     ROMbasic.ASM):04678         L8B17     JSR  GETCCH         GET CURRENT BASIC INPUT CHARRACTER 
F195 20D7             (     ROMbasic.ASM):04679                   BRA  L8AEF          KEEP CHECKING THE LINE 
F197 9E83             (     ROMbasic.ASM):04680         L8B1B     LDX  CHARAD         GET CURRENT INPUT ADDRESS 
F199 3410             (     ROMbasic.ASM):04681                   PSHS X              SAVE IT ON THE STACK 
F19B BDD737           (     ROMbasic.ASM):04682                   JSR  LAF67          CONVERT DECIMAL BASIC NUMBER TO BINARY 
F19E 9E83             (     ROMbasic.ASM):04683                   LDX  CHARAD         GET CURRENT INPUT POINTER 
F1A0 A682             (     ROMbasic.ASM):04684         L8B24     LDA  ,-X            GET PREVIOUS INPUT CHARACTER 
F1A2 BDF507           (     ROMbasic.ASM):04685                   JSR  L90AA          CLEAR CARRY IF NUMERIC INPUT VALUE 
F1A5 25F9             (     ROMbasic.ASM):04686                   BLO  L8B24          BRANCH IF NON-NUMERIC 
F1A7 3001             (     ROMbasic.ASM):04687                   LEAX $01,X          MOVE POINTER UP ONE 
F1A9 1F10             (     ROMbasic.ASM):04688                   TFR  X,D            NOW ACCD POINTS TO ONE PAST END OF LINE NUMBER 
F1AB E061             (     ROMbasic.ASM):04689                   SUBB $01,S          SUBTRACT PRE-NUMERIC POINTER LS BYTE 
F1AD C005             (     ROMbasic.ASM):04690                   SUBB #$05           MAKE SURE THERE ARE AT LEAST 5 CHARACTERS IN THE NUMERIC LINE 
                      (     ROMbasic.ASM):04691         ;                              
F1AF 2720             (     ROMbasic.ASM):04692                   BEQ  L8B55          BRANCH IF EXACTLY 5 
F1B1 250A             (     ROMbasic.ASM):04693                   BLO  L8B41          BRANCH IF < 5 
F1B3 3384             (     ROMbasic.ASM):04694                   LEAU ,X             TRANSFER X TO U 
F1B5 50               (     ROMbasic.ASM):04695                   NEGB                NEGATE B 
F1B6 3085             (     ROMbasic.ASM):04696                   LEAX B,X            MOVE X BACK B BYTES 
F1B8 BDF046           (     ROMbasic.ASM):04697                   JSR  L89B8          *MOVE BYTES FROM (U) TO (X) UNTIL 
                      (     ROMbasic.ASM):04698         ;                             *U = END OF BASIC; (I) = NEW END OF BASIC  
F1BB 2014             (     ROMbasic.ASM):04699                   BRA  L8B55           
                      (     ROMbasic.ASM):04700         ; FORCE FIVE BYTES OF SPACE FOR THE LINE NUMBER                      
F1BD 9F47             (     ROMbasic.ASM):04701         L8B41     STX  V47            SAVE END OF NUMERIC VALUE 
F1BF 9E1B             (     ROMbasic.ASM):04702                   LDX  VARTAB         GET END OF BASIC PROGRAM 
F1C1 9F43             (     ROMbasic.ASM):04703                   STX  V43            SAVE IT 
F1C3 50               (     ROMbasic.ASM):04704                   NEGB                NEGATE B 
F1C4 3085             (     ROMbasic.ASM):04705                   LEAX B,X            ADD IT TO END OF NUMERIC POiNTER 
F1C6 9F41             (     ROMbasic.ASM):04706                   STX  V41            SAVE POINTER 
F1C8 9F1B             (     ROMbasic.ASM):04707                   STX  VARTAB         STORE END OF BASIC PROGRAM 
F1CA BDD3FE           (     ROMbasic.ASM):04708                   JSR  LAC1E          ACCD = TOP OF ARRAYS - CHECK FOR ENOUGH ROOM 
F1CD 9E45             (     ROMbasic.ASM):04709                   LDX  V45            * GET AND SAVE THE 
F1CF 9F83             (     ROMbasic.ASM):04710                   STX  CHARAD         * NEW CURRENT INPUT POINTER 
F1D1 3510             (     ROMbasic.ASM):04711         L8B55     PULS X              RESTORE POINTER TO START OF NUMERIC VALUE 
F1D3 8601             (     ROMbasic.ASM):04712                   LDA  #$01           NEW LINE NUMBER FLAG 
F1D5 A784             (     ROMbasic.ASM):04713                   STA  ,X             * SAVE NEW LINE FLAG 
F1D7 A702             (     ROMbasic.ASM):04714                   STA  $02,X          * 
F1D9 A704             (     ROMbasic.ASM):04715                   STA  $04,X          * 
F1DB D62B             (     ROMbasic.ASM):04716                   LDB  BINVAL         GET MS BYTE OF BINARY LINE NUMBER 
F1DD 2604             (     ROMbasic.ASM):04717                   BNE  L8B67          BRANCH IF IT IS NOT ZERO 
F1DF C601             (     ROMbasic.ASM):04718                   LDB  #$01           SAVE A 1 IF BYTE IS 0; OTHERWISE, BASIC WILL 
                      (     ROMbasic.ASM):04719         ;                             THINK IT IS THE END OF A LINE  
F1E1 6C02             (     ROMbasic.ASM):04720                   INC  $02,X          IF 2,X = 2, THEN PREVIOUS BYTE WAS A ZERO 
F1E3 E701             (     ROMbasic.ASM):04721         L8B67     STB  $01,X          SAVE MS BYTE OF BINARY LINE NUMBER 
F1E5 D62C             (     ROMbasic.ASM):04722                   LDB  BINVAL+1       GET IS BYTE OF BINARY LINE NUMBER 
F1E7 2604             (     ROMbasic.ASM):04723                   BNE  L8B71          BRANCH IF NOT A ZERO BYTE 
F1E9 C601             (     ROMbasic.ASM):04724                   LDB  #$01           SAVE A 1 IF BYTE IS A 0 
F1EB 6C04             (     ROMbasic.ASM):04725                   INC  $04,X          IF 4,X = 2, THEN PREVIOUS BYTE WAS A 0 
F1ED E703             (     ROMbasic.ASM):04726         L8B71     STB  $03,X          SAVE LS BYTE OF BINARY LINE NUMBER 
F1EF 9D82             (     ROMbasic.ASM):04727                   JSR  GETCCH         GET CURRENT INPUT CHARACTER 
F1F1 812C             (     ROMbasic.ASM):04728                   CMPA #','           IS IT A COMMA? 
F1F3 279A             (     ROMbasic.ASM):04729                   BEQ  L8B13          YES - PROCESS ANOTHER NUMERIC VALUE 
F1F5 209C             (     ROMbasic.ASM):04730                   BRA  L8B17          NO - GO GET AND PROCESS AN INPUT CHARACTER 
F1F7 9E19             (     ROMbasic.ASM):04731         L8B7B     LDX  TXTTAB         POINT X TO START OF BASIC PROGRAM 
F1F9 301F             (     ROMbasic.ASM):04732                   LEAX $-01,X         MOVE POINTER BACK ONE 
F1FB 3001             (     ROMbasic.ASM):04733         L8B7F     LEAX $01,X          MOVE POINTER UP ONE 
F1FD EC02             (     ROMbasic.ASM):04734                   LDD  $02,X          GET ADDRESS OF NEXT LINE 
F1FF DD68             (     ROMbasic.ASM):04735                   STD  CURLIN         SAVE IT IN CURLIN 
F201 BDF105           (     ROMbasic.ASM):04736                   JSR  L8A86          RETURN IF END OF PROGRAM 
F204 3003             (     ROMbasic.ASM):04737                   LEAX $03,X          SKIP OVER ADDRESS OF NEXT LINE AND 1ST BYTE OF LINE NUMBER 
F206 3001             (     ROMbasic.ASM):04738         L8B8A     LEAX $01,X          MOVE POINTER UP ONE 
F208 A684             (     ROMbasic.ASM):04739         L8B8C     LDA  ,X             GET CURRENT CHARACTER 
F20A 27EF             (     ROMbasic.ASM):04740                   BEQ  L8B7F          BRANCH IF END OF LINE 
F20C 4A               (     ROMbasic.ASM):04741                   DECA                INPUT CHARACTER = 1? - VALID LINE NUMBER 
F20D 271B             (     ROMbasic.ASM):04742                   BEQ  L8BAE          YES 
F20F 8002             (     ROMbasic.ASM):04743                   SUBA #$02           INPUT CHARACTER 3? - UL LINE NUMBER 
F211 26F3             (     ROMbasic.ASM):04744                   BNE  L8B8A          NO 
F213 3410             (     ROMbasic.ASM):04745                   PSHS X              SAVE CURRENT POSITION OF INPUT POINTER 
F215 8EF254           (     ROMbasic.ASM):04746                   LDX  #L8BD9-1       POINT X TO ‘UL’ MESSAGE 
F218 BDE403           (     ROMbasic.ASM):04747                   JSR  LB99C          PRINT STRING TO THE SCREEN 
F21B AEE4             (     ROMbasic.ASM):04748                   LDX  ,S             GET INPUT POINTER 
F21D EC01             (     ROMbasic.ASM):04749                   LDD  $01,X          GET THE UNDEFINED LINE NUMBER 
F21F BDE833           (     ROMbasic.ASM):04750                   JSR  LBDCC          CONVERT NUMBER IN ACCD TO DECIMAL AND DISPLAY IT 
F222 BDE82C           (     ROMbasic.ASM):04751                   JSR  LBDC5          PRINT ‘IN XXXX’ XXXX = CURRENT LINE NUMBER 
F225 BDE3C3           (     ROMbasic.ASM):04752                   JSR  LB958          SEND A CR TO CONSOLE OUT 
F228 3510             (     ROMbasic.ASM):04753                   PULS X              GET INPUT POINTER BACK 
F22A 3410             (     ROMbasic.ASM):04754         L8BAE     PSHS X              SAVE CURRENT POSITION OF INPUT POINTER 
F22C EC01             (     ROMbasic.ASM):04755                   LDD  $01,X          LOAD ACCD WITH BINARY VALUE OF LINE NUMBER 
F22E DD52             (     ROMbasic.ASM):04756                   STD  FPA0+2         SAVE IN BOTTOM 2 BYTES OF FPA0 
F230 BDEEDF           (     ROMbasic.ASM):04757                   JSR  L880E          ADJUST REST OF FPA0 AS AN INTEGER 
F233 BDE840           (     ROMbasic.ASM):04758                   JSR  LBDD9          CONVERT FPA0 TO ASCII, STORE IN LINE NUMBER 
F236 3540             (     ROMbasic.ASM):04759                   PULS U              LOAD U WITH PREVIOUS ADDRESS OF INPUT POINTER 
F238 C605             (     ROMbasic.ASM):04760                   LDB  #$05           EACH EXPANDED LINE NUMBER USES 5 BYTES 
F23A 3001             (     ROMbasic.ASM):04761         L8BBE     LEAX $01,X          MOVE POINTER FORWARD ONE 
F23C A684             (     ROMbasic.ASM):04762                   LDA  ,X             GET AN ASCII BYTE 
F23E 2705             (     ROMbasic.ASM):04763                   BEQ  L8BC9          BRANCH IF END OF NUMBER 
F240 5A               (     ROMbasic.ASM):04764                   DECB                DECREMENT BYTE COUNTER 
F241 A7C0             (     ROMbasic.ASM):04765                   STA  ,U+            STORE ASCII NUMBER IN BASIC LINE 
F243 20F5             (     ROMbasic.ASM):04766                   BRA  L8BBE          CHECK FOR ANOTHER DIGIT 
F245 30C4             (     ROMbasic.ASM):04767         L8BC9     LEAX ,U             TRANSFER NEW LINE POINTER TO (X) 
F247 5D               (     ROMbasic.ASM):04768                   TSTB DOES THE NEW LINE NUMBER REQUIRE 5 BYTES?  
F248 27BE             (     ROMbasic.ASM):04769                   BEQ  L8B8C          YES - GO GET ANOTHER INPUT CHARACTER 
F24A 31C4             (     ROMbasic.ASM):04770                   LEAY ,U             SAVE NEW LINE POINTER IN Y 
F24C 33C5             (     ROMbasic.ASM):04771                   LEAU B,U            POINT U TO END OF 5 BYTE PACKED LINE NUMBER BLOCK 
F24E BDF046           (     ROMbasic.ASM):04772                   JSR  L89B8          MOVE BYTES FROM (U) TO (X) UNTIL END OF PROGRAM 
F251 30A4             (     ROMbasic.ASM):04773                   LEAX ,Y             LOAD (X) WITH NEW LINE POINTER 
F253 20B3             (     ROMbasic.ASM):04774                   BRA  L8B8C          GO GET ANOTHER INPUT CHARACTER 
                      (     ROMbasic.ASM):04775                                        
F255 554C20           (     ROMbasic.ASM):04776         L8BD9     FCC  "UL "          UNKNOWN LINE NUMBER MESSAGE 
F258 00               (     ROMbasic.ASM):04777                   FCB  0               
                      (     ROMbasic.ASM):04778                                        
                      (     ROMbasic.ASM):04779                                        
F259 BDDEE7           (     ROMbasic.ASM):04780         HEXDOL    JSR  LB740          CONVERT FPA0 INTO A POSITIVE 2 BYTE INTEGER 
F25C 8E01F0           (     ROMbasic.ASM):04781                   LDX  #STRBUF+2      POINT TO TEMPORARY BUFFER 
F25F C604             (     ROMbasic.ASM):04782                   LDB  #$04           CONVERT 4 NIBBLES 
F261 3404             (     ROMbasic.ASM):04783         L8BE5     PSHS B              SAVE NIBBLE COUNTER 
F263 5F               (     ROMbasic.ASM):04784                   CLRB                CLEAR CARRY FLAG 
F264 8604             (     ROMbasic.ASM):04785                   LDA  #$04           4 SHIFTS 
F266 0853             (     ROMbasic.ASM):04786         L8BEA     ASL  FPA0+3         * SHIFT BOTTOM TWO BYTES OF 
F268 0952             (     ROMbasic.ASM):04787                   ROL  FPA0+2         * FPA0 LEFT ONE BIT (X2) 
F26A 59               (     ROMbasic.ASM):04788                   ROLB                IF OVERFLOW, ACCB <> 0 
F26B 4A               (     ROMbasic.ASM):04789                   DECA                * DECREMENT SHIFT COUNTER AND 
F26C 26F8             (     ROMbasic.ASM):04790                   BNE  L8BEA          * BRANCH IF NOT DONE 
F26E 5D               (     ROMbasic.ASM):04791                   TSTB CHECK FOR OVERFLOW  
F26F 260A             (     ROMbasic.ASM):04792                   BNE  L8BFF          BRANCH IF OVERFLOW 
F271 A6E4             (     ROMbasic.ASM):04793                   LDA  ,S             * GET NIBBLE COUNTER, 
F273 4A               (     ROMbasic.ASM):04794                   DECA                * DECREMENT IT AND 
F274 2705             (     ROMbasic.ASM):04795                   BEQ  L8BFF          * BRANCH IF DONE 
F276 8C01F0           (     ROMbasic.ASM):04796                   CMPX #STRBUF+2      DO NOT DO A CONVERSION UNTIL A NON-ZERO 
F279 270C             (     ROMbasic.ASM):04797                   BEQ  L8C0B          BYTE IS FOUND - LEADING ZERO SUPPRESSION 
F27B CB30             (     ROMbasic.ASM):04798         L8BFF     ADDB #'0'           ADD IN ASCII ZERO 
F27D C139             (     ROMbasic.ASM):04799                   CMPB #'9'           COMPARE TO ASCII 9 
F27F 2302             (     ROMbasic.ASM):04800                   BLS  L8C07          BRANCH IF < 9 
F281 CB07             (     ROMbasic.ASM):04801                   ADDB #7             ADD ASCII OFFSET IF HEX LETTER 
F283 E780             (     ROMbasic.ASM):04802         L8C07     STB  ,X+            STORE HEX VALUE AND ADVANCE POINTER 
F285 6F84             (     ROMbasic.ASM):04803                   CLR  ,X             CLEAR NEXT BYTE - END OF STRING FLAG 
F287 3504             (     ROMbasic.ASM):04804         L8C0B     PULS B              * GET NIBBLE COUNTER, 
F289 5A               (     ROMbasic.ASM):04805                   DECB                * DECREMENT IT AND 
F28A 26D5             (     ROMbasic.ASM):04806                   BNE  L8BE5          * BRANCH IF NOT DONE 
F28C 3262             (     ROMbasic.ASM):04807                   LEAS $02,S          PURGE RETURN ADDRESS OFF OF STACK 
F28E 8E01EF           (     ROMbasic.ASM):04808                   LDX  #STRBUF+1      RESET POINTER 
F291 7EDCBF           (     ROMbasic.ASM):04809                   JMP  LB518          SAVE STRING ON STRING STACK 
                      (     ROMbasic.ASM):04810         ; PROCESS EXCLAMATION POINT                      
F294 8601             (     ROMbasic.ASM):04811         L8E37     LDA  #$01           * SET SPACES 
F296 9799             (     ROMbasic.ASM):04812                   STA  VD9            * COUNTER = 1 
                      (     ROMbasic.ASM):04813         ; PROCESS STRING ITEM - LIST                      
F298 5A               (     ROMbasic.ASM):04814         L8E3B     DECB                DECREMENT FORMAT STRING LENGTH COUNTER 
F299 BDF435           (     ROMbasic.ASM):04815                   JSR  L8FD8          SEND A '+' TO CONSOLE OUT IF VDA <>0 
F29C 9D82             (     ROMbasic.ASM):04816                   JSR  GETCCH         GET CURRENT INPUT CHARACTER 
F29E 10270093         (     ROMbasic.ASM):04817                   LBEQ L8ED8          EXIT PRINT USING IF END OF LINE 
F2A2 D793             (     ROMbasic.ASM):04818                   STB  VD3            SAVE REMAINDER FORMAT STRING LENGTH 
F2A4 BDD902           (     ROMbasic.ASM):04819                   JSR  LB156          EVALUATE EXPRESSION 
F2A7 BDD8F2           (     ROMbasic.ASM):04820                   JSR  LB146          ‘TM’ ERROR IF NUMERIC VARIABLE 
F2AA 9E52             (     ROMbasic.ASM):04821                   LDX  FPA0+2         * GET ITEM - LIST DESCRIPTOR ADDRESS 
F2AC 9F4D             (     ROMbasic.ASM):04822                   STX  V4D            * AND SAVE IT IN V4D 
F2AE D699             (     ROMbasic.ASM):04823                   LDB  VD9            GET SPACES COUNTER 
F2B0 BDDE54           (     ROMbasic.ASM):04824                   JSR  LB6AD          PUT ACCB BYTES INTO STRING SPACE & PUT DESCRIPTOR ON STRING STACK 
F2B3 BDE406           (     ROMbasic.ASM):04825                   JSR  LB99F          PRINT THE FORMATTED STRING TO CONSOLE OUT 
                      (     ROMbasic.ASM):04826         ; PAD FORMAT STRING WITH SPACES IF ITEM - LIST STRING < FORMAT STRING LENGTH                      
F2B6 9E52             (     ROMbasic.ASM):04827                   LDX  FPA0+2         POINT X TO FORMATTED STRING DESCRIPTOR ADDRESS 
F2B8 D699             (     ROMbasic.ASM):04828                   LDB  VD9            GET SPACES COUNTER 
F2BA E084             (     ROMbasic.ASM):04829                   SUBB ,X             SUBTRACT LENGTH OF FORMATTED STRING 
F2BC 5A               (     ROMbasic.ASM):04830         L8E5F     DECB                DECREMENT DIFFERENCE 
F2BD 102B014F         (     ROMbasic.ASM):04831                   LBMI L8FB3          GO INTERPRET ANOTHER ITEM - LIST 
F2C1 BDE413           (     ROMbasic.ASM):04832                   JSR  LB9AC          PAD FORMAT STRING WITH A SPACE 
F2C4 20F6             (     ROMbasic.ASM):04833                   BRA  L8E5F          KEEP PADDING 
                      (     ROMbasic.ASM):04834         ; PERCENT SIGN - PROCESS A %SPACES% COMMAND                      
F2C6 D793             (     ROMbasic.ASM):04835         L8E69     STB  VD3            * SAVE THE CURRENT FORMAT STRING 
F2C8 9F0F             (     ROMbasic.ASM):04836                   STX  TEMPTR         * COUNTER AND POINTER 
F2CA 8602             (     ROMbasic.ASM):04837                   LDA  #$02           INITIAL SPACES COUNTER = 2 
F2CC 9799             (     ROMbasic.ASM):04838                   STA  VD9            SAVE IN SPACES COUNTER 
F2CE A684             (     ROMbasic.ASM):04839         L8E71     LDA  ,X             GET A CHARACTER FROM FORMAT STRING 
F2D0 8125             (     ROMbasic.ASM):04840                   CMPA #'%'           COMPARE TO TERMINATOR CHARACTER 
F2D2 27C4             (     ROMbasic.ASM):04841                   BEQ  L8E3B          BRANCH IF END OF SPACES COMMAND 
F2D4 8120             (     ROMbasic.ASM):04842                   CMPA #' '           BLANK 
F2D6 2607             (     ROMbasic.ASM):04843                   BNE  L8E82          BRANCH IF ILLEGAL CHARACTER 
F2D8 0C99             (     ROMbasic.ASM):04844                   INC  VD9            ADD ONE TO SPACES COUNTER 
F2DA 3001             (     ROMbasic.ASM):04845                   LEAX $01,X          MOVE FORMAT POINTER UP ONE 
F2DC 5A               (     ROMbasic.ASM):04846                   DECB                DECREMENT LENGTH COUNTER 
F2DD 26EF             (     ROMbasic.ASM):04847                   BNE  L8E71          BRANCH IF NOT END OF FORMAT STRING 
F2DF 9E0F             (     ROMbasic.ASM):04848         L8E82     LDX  TEMPTR         * RESTORE CURRENT FORMAT STRING COUNTER 
F2E1 D693             (     ROMbasic.ASM):04849                   LDB  VD3            * AND POINTER TO POSITION BEFORE SPACES COMMAND 
F2E3 8625             (     ROMbasic.ASM):04850                   LDA  #'%'           SEND A ‘%’ TO CONSOLE OUT AS A DEBUGGING AID 
                      (     ROMbasic.ASM):04851         ; ERROR PROCESSOR - ILLEGAL CHARACTER OR BAD SYNTAX IN FORMAT STRING                      
F2E5 BDF435           (     ROMbasic.ASM):04852         L8E88     JSR  L8FD8          SEND A '+' TO CONSOLE OUT IF VDA <> 0 
F2E8 BDD017           (     ROMbasic.ASM):04853                   JSR  PUTCHR         SEND CHARACTER TO CONSOLE OUT 
F2EB 2029             (     ROMbasic.ASM):04854                   BRA  L8EB9          GET NEXT CHARACTER IN FORMAT STRING 
                      (     ROMbasic.ASM):04855                                        
                      (     ROMbasic.ASM):04856         ; PRINT RAM HOOK                      
F2ED 81B1             (     ROMbasic.ASM):04857         XVEC9     CMPA #TOK_USING     USING TOKEN 
F2EF 2701             (     ROMbasic.ASM):04858                   BEQ  L8E95          BRANCH IF PRINT USING 
F2F1 39               (     ROMbasic.ASM):04859                   RTS                  
                      (     ROMbasic.ASM):04860                                        
                      (     ROMbasic.ASM):04861         ; PRINT USING                      
                      (     ROMbasic.ASM):04862         ; VDA IS USED AS A STATUS BYTE: BIT 6 = COMMA FORCE                      
                      (     ROMbasic.ASM):04863         ; BIT 5=LEADING ASTERISK FORCE; BIT 4 = FLOATING $ FORCE                      
                      (     ROMbasic.ASM):04864         ; BIT 3 = PRE SIGN FORCE; BIT 2 = POST SIGN FORCE; BIT 0 = EXPONENTIAL FORCE                      
F2F2 3262             (     ROMbasic.ASM):04865         L8E95     LEAS $02,S          PURGE RETURN ADDRESS OFF THE STACK 
F2F4 BDD904           (     ROMbasic.ASM):04866                   JSR  LB158          EVALUATE FORMAT STRING 
F2F7 BDD8F2           (     ROMbasic.ASM):04867                   JSR  LB146          ‘TM’ ERROR IF VARIABLE TYPE = NUMERIC 
F2FA C63B             (     ROMbasic.ASM):04868                   LDB  #';'           CHECK FOR ITEM LIST SEPARATOR 
F2FC BDDA1B           (     ROMbasic.ASM):04869                   JSR  LB26F          SYNTAX CHECK FOR ; 
F2FF 9E52             (     ROMbasic.ASM):04870                   LDX  FPA0+2         * GET FORMAT STRING DESCRIPTOR ADDRESS 
F301 9F95             (     ROMbasic.ASM):04871                   STX  VD5            * AND SAVE IT IN VD5 
F303 2006             (     ROMbasic.ASM):04872                   BRA  L8EAE          GO PROCESS FORMAT STRING 
F305 9697             (     ROMbasic.ASM):04873         L8EA8     LDA  VD7            *CHECK NEXT PRINT ITEM FLAG AND 
F307 2708             (     ROMbasic.ASM):04874                   BEQ  L8EB4          *‘FC’ ERROR IF NO FURTHER PRINT ITEMS 
F309 9E95             (     ROMbasic.ASM):04875                   LDX  VD5            RESET FORMAT STRING POINTER TO START OF STRING 
F30B 0F97             (     ROMbasic.ASM):04876         L8EAE     CLR  VD7            RESET NEXT PRINT ITEM FLAG 
F30D E684             (     ROMbasic.ASM):04877                   LDB  ,X             GET LENGTH OF FORMAT STRING 
F30F 2603             (     ROMbasic.ASM):04878                   BNE  L8EB7          INTERPRET FORMAT STRING IF LENGTH > 0 
F311 7EDBF1           (     ROMbasic.ASM):04879         L8EB4     JMP  LB44A          ‘FC’ ERROR IF FORMAT STRING = NULL 
F314 AE02             (     ROMbasic.ASM):04880         L8EB7     LDX  $02,X          POINT X TO START OF FORMAT STRING 
                      (     ROMbasic.ASM):04881         ; INTERPRET THE FORMAT STRING                      
F316 0F9A             (     ROMbasic.ASM):04882         L8EB9     CLR  VDA            CLEAR THE STATUS BYTE 
F318 0F99             (     ROMbasic.ASM):04883         L8EBB     CLR  VD9            CLEAR LEFT DIGIT COUNTER 
F31A A680             (     ROMbasic.ASM):04884                   LDA  ,X+            GET A CHARACTER FROM FORMAT STRING 
F31C 8121             (     ROMbasic.ASM):04885                   CMPA #'!'           EXCLAMATION POINT? 
F31E 1027FF72         (     ROMbasic.ASM):04886                   LBEQ L8E37          YES - STRING TYPE FORMAT 
F322 8123             (     ROMbasic.ASM):04887                   CMPA #'#'           NUMBER SIGN? (DIGIT LOCATOR) 
F324 275B             (     ROMbasic.ASM):04888                   BEQ  L8F24          YES - NUMERIC TYPE FORMAT 
F326 5A               (     ROMbasic.ASM):04889                   DECB                DECREMENT FORMAT STRING LENGTH 
F327 2616             (     ROMbasic.ASM):04890                   BNE  L8EE2          BRANCH IF NOT DONE 
F329 BDF435           (     ROMbasic.ASM):04891                   JSR  L8FD8          SEND A ‘+‘ TO CONSOLE OUT IF VDA <> 0 
F32C BDD017           (     ROMbasic.ASM):04892                   JSR  PUTCHR         SEND CHARACTER TO CONSOLE OUT 
F32F 9D82             (     ROMbasic.ASM):04893         L8ED2     JSR  GETCCH         GET CURRENT CHARACTER FROM BASIC 
F331 26D2             (     ROMbasic.ASM):04894                   BNE  L8EA8          BRANCH IF NOT END OF LINE 
F333 9697             (     ROMbasic.ASM):04895                   LDA  VD7            GET NEXT PRINT ITEM FLAG 
F335 2603             (     ROMbasic.ASM):04896         L8ED8     BNE  L8EDD          BRANCH IF MORE PRINT ITEMS 
F337 BDE3C3           (     ROMbasic.ASM):04897                   JSR  LB958          SEND A CARRIAGE RETURN TO CONSOLE OUT 
F33A 9E95             (     ROMbasic.ASM):04898         L8EDD     LDX  VD5            POINT X TO FORMAT STRING DESCRIPTOR 
F33C 7EDE00           (     ROMbasic.ASM):04899                   JMP  LB659          RETURN ADDRESS AND LENGTH OF FORMAT STRING - EXIT PRINT USING 
F33F 812B             (     ROMbasic.ASM):04900         L8EE2     CMPA #'+'           CHECK FOR ‘+‘ (PRE-SIGN FORCE) 
F341 2609             (     ROMbasic.ASM):04901                   BNE  L8EEF          NO PLUS 
F343 BDF435           (     ROMbasic.ASM):04902                   JSR  L8FD8          SEND A ‘+' TO CONSOLE OUT IF VDA <> 0 
F346 8608             (     ROMbasic.ASM):04903                   LDA  #$08           * LOAD THE STATUS BYTE WITH 8; 
F348 979A             (     ROMbasic.ASM):04904                   STA  VDA            * PRE-SIGN FORCE FLAG 
F34A 20CC             (     ROMbasic.ASM):04905                   BRA  L8EBB          INTERPRET THE REST OF THE FORMAT STRING 
F34C 812E             (     ROMbasic.ASM):04906         L8EEF     CMPA #'.'           DECIMAL POINT? 
F34E 274E             (     ROMbasic.ASM):04907                   BEQ  L8F41          YES 
F350 8125             (     ROMbasic.ASM):04908                   CMPA #'%'           PERCENT SIGN? 
F352 1027FF70         (     ROMbasic.ASM):04909                   LBEQ L8E69          YES 
F356 A184             (     ROMbasic.ASM):04910                   CMPA ,X             COMPARE THE PRESENT FORMAT STRING INPUT 
                      (     ROMbasic.ASM):04911         ;                                CHARACTER TO THE NEXT ONE IN THE STRING  
F358 268B             (     ROMbasic.ASM):04912         L8EFB     BNE  L8E88          NO MATCH - ILLEGAL CHARACTER 
                      (     ROMbasic.ASM):04913         ; TWO CONSECUTIVE EQUAL CHARACTERS IN FORMAT STRING                      
F35A 8124             (     ROMbasic.ASM):04914                   CMPA #'$'           DOLLAR SIGN? 
F35C 2719             (     ROMbasic.ASM):04915                   BEQ  L8F1A          YES - MAKE THE DOLLAR SIGN FLOAT 
F35E 812A             (     ROMbasic.ASM):04916                   CMPA #'*'           ASTERISK? 
F360 26F6             (     ROMbasic.ASM):04917                   BNE  L8EFB          NO - ILLEGAL CHARACTER 
F362 969A             (     ROMbasic.ASM):04918                   LDA  VDA            * GRAB THE STATUS BYTE AND BET BIT 5 
F364 8A20             (     ROMbasic.ASM):04919                   ORA  #$20           * TO INDICATE THAT THE OUTPUT WILL 
F366 979A             (     ROMbasic.ASM):04920                   STA  VDA            * BE LEFT PADDED WITH ASTERISKS 
F368 C102             (     ROMbasic.ASM):04921                   CMPB #2             * CHECK TO SEE IF THE $$ ARE THE LAST TWO 
F36A 2511             (     ROMbasic.ASM):04922                   BLO  L8F20          * CHARACTERS IN THE FORMAT STRING AND BRANCH IF SO 
F36C A601             (     ROMbasic.ASM):04923                   LDA  $01,X          GET THE NEXT CHARACTER AFTER ** 
F36E 8124             (     ROMbasic.ASM):04924                   CMPA #'$'           CHECK FOR **$ 
F370 260B             (     ROMbasic.ASM):04925                   BNE  L8F20          CHECK FOR MORE CHARACTERS 
F372 5A               (     ROMbasic.ASM):04926                   DECB                DECREMENT STRING LENGTH COUNTER 
F373 3001             (     ROMbasic.ASM):04927                   LEAX $01,X          MOVE FORMAT STRING POINTER UP ONE 
F375 0C99             (     ROMbasic.ASM):04928                   INC  VD9            ADD ONE TO LEFT DIGIT COUNTER - FOR ASTERISK PAD AND 
                      (     ROMbasic.ASM):04929         ;                             FLOATING DOLLAR SIGN COMBINATION  
F377 969A             (     ROMbasic.ASM):04930         L8F1A     LDA  VDA            * GET THE STATUS BYTE AND SET 
F379 8A10             (     ROMbasic.ASM):04931                   ORA  #$10           * BIT 4 TO INDICATE A 
F37B 979A             (     ROMbasic.ASM):04932                   STA  VDA            * FLOATING DOLLAR SIGN 
F37D 3001             (     ROMbasic.ASM):04933         L8F20     LEAX $01,X          MOVE FORMAT STRING POINTER UP ONE 
F37F 0C99             (     ROMbasic.ASM):04934                   INC  VD9            ADD ONE TO LEFT DIGIT (FLOATING $ OR ASTERISK PAD) 
                      (     ROMbasic.ASM):04935         ; PROCESS CHARACTERS TO THE LEFT OF THE DECIMAL POINT IN THE FORMAT STRING                      
F381 0F98             (     ROMbasic.ASM):04936         L8F24     CLR  VD8            CLEAR THE RIGHT DIGIT COUNTER 
F383 0C99             (     ROMbasic.ASM):04937         L8F26     INC  VD9            ADD ONE TO LEFT DIGIT COUNTER 
F385 5A               (     ROMbasic.ASM):04938                   DECB                DECREMENT FORMAT STRING LENGTH COUNTER 
F386 2749             (     ROMbasic.ASM):04939                   BEQ  L8F74          BRANCH IF END OF FORMAT STRING 
F388 A680             (     ROMbasic.ASM):04940                   LDA  ,X+            GET THE NEXT FORMAT CHARACTER 
F38A 812E             (     ROMbasic.ASM):04941                   CMPA #'.'           DECIMAL POINT? 
F38C 271E             (     ROMbasic.ASM):04942                   BEQ  L8F4F          YES 
F38E 8123             (     ROMbasic.ASM):04943                   CMPA #'#'           NUMBER SIGN? 
F390 27F1             (     ROMbasic.ASM):04944                   BEQ  L8F26          YES 
F392 812C             (     ROMbasic.ASM):04945                   CMPA #','           COMMA? 
F394 2621             (     ROMbasic.ASM):04946                   BNE  L8F5A          NO 
F396 969A             (     ROMbasic.ASM):04947                   LDA  VDA            * GET THE STATUS BYTE 
F398 8A40             (     ROMbasic.ASM):04948                   ORA  #$40           * AND SET BIT 6 WHICH IS THE 
F39A 979A             (     ROMbasic.ASM):04949                   STA  VDA            * COMMA SEPARATOR FLAG 
F39C 20E5             (     ROMbasic.ASM):04950                   BRA  L8F26          PROCESS MORE CHARACTERS TO LEFT OF DECIMAL POINT 
                      (     ROMbasic.ASM):04951         ; PROCESS DECIMAL POINT IF NO DIGITS TO LEFT OF IT                      
F39E A684             (     ROMbasic.ASM):04952         L8F41     LDA  ,X             GET NEXT FORMAT CHARACTER 
F3A0 8123             (     ROMbasic.ASM):04953                   CMPA #'#'           IS IT A NUMBER SIGN? 
F3A2 1026FF3F         (     ROMbasic.ASM):04954                   LBNE L8E88          NO 
F3A6 8601             (     ROMbasic.ASM):04955                   LDA  #1             * SET THE RIGHT DIGIT COUNTER TO 1 - 
F3A8 9798             (     ROMbasic.ASM):04956                   STA  VD8            * ALLOW ONE SPOT FOR DECIMAL POINT 
F3AA 3001             (     ROMbasic.ASM):04957                   LEAX $01,X          MOVE FORMAT POINTER UP ONE 
                      (     ROMbasic.ASM):04958         ; PROCESS DIGITS TO RIGHT OF DECIMAL POINT                      
F3AC 0C98             (     ROMbasic.ASM):04959         L8F4F     INC  VD8            ADD ONE TO RIGHT DIGIT COUNTER 
F3AE 5A               (     ROMbasic.ASM):04960                   DECB                DECREMENT FORMAT LENGTH COUNTER 
F3AF 2720             (     ROMbasic.ASM):04961                   BEQ  L8F74          BRANCH IF END OF FORMAT STRING 
F3B1 A680             (     ROMbasic.ASM):04962                   LDA  ,X+            GET A CHARACTER FROM FORMAT STRING 
F3B3 8123             (     ROMbasic.ASM):04963                   CMPA #'#'           IS IT NUMBER SIGN? 
F3B5 27F5             (     ROMbasic.ASM):04964                   BEQ  L8F4F          YES - KEEP CHECKING 
                      (     ROMbasic.ASM):04965         ; CHECK FOR EXPONENTIAL FORCE                      
F3B7 815E             (     ROMbasic.ASM):04966         L8F5A     CMPA #$5E           CHECK FOR UP ARROW 
F3B9 2616             (     ROMbasic.ASM):04967                   BNE  L8F74          NO UP ARROW 
F3BB A184             (     ROMbasic.ASM):04968                   CMPA ,X             IS THE NEXT CHARACTER AN UP ARROW? 
F3BD 2612             (     ROMbasic.ASM):04969                   BNE  L8F74          NO 
F3BF A101             (     ROMbasic.ASM):04970                   CMPA $01,X          AND THE NEXT CHARACTER? 
F3C1 260E             (     ROMbasic.ASM):04971                   BNE  L8F74          NO 
F3C3 A102             (     ROMbasic.ASM):04972                   CMPA $02,X          HOW ABOUT THE 4TH CHARACTER? 
F3C5 260A             (     ROMbasic.ASM):04973                   BNE  L8F74          NO, ALSO 
F3C7 C104             (     ROMbasic.ASM):04974                   CMPB #4             * CHECK TO SEE IF THE 4 UP ARROWS ARE IN THE 
F3C9 2506             (     ROMbasic.ASM):04975                   BLO  L8F74          * FORMAT STRING AND BRANCH IF NOT 
F3CB C004             (     ROMbasic.ASM):04976                   SUBB #4             * MOVE POINTER UP 4 AND SUBTRACT 
F3CD 3004             (     ROMbasic.ASM):04977                   LEAX $04,X          * FOUR FROM LENGTH 
F3CF 0C9A             (     ROMbasic.ASM):04978                   INC  VDA INCREMENT STATUS BYTE - EXPONENTIAL FORM  
                      (     ROMbasic.ASM):04979                                        
                      (     ROMbasic.ASM):04980         ; CHECK FOR A PRE OR POST - SIGN FORCE AT END OF FORMAT STRING                      
F3D1 301F             (     ROMbasic.ASM):04981         L8F74     LEAX $-01,X         MOVE POINTER BACK ONE 
F3D3 0C99             (     ROMbasic.ASM):04982                   INC  VD9            ADD ONE TO LEFT DIGIT COUNTER FOR PRE-SIGN FORCE 
F3D5 969A             (     ROMbasic.ASM):04983                   LDA  VDA            * PRE-SIGN 
F3D7 8508             (     ROMbasic.ASM):04984                   BITA #$08           * FORCE AND 
F3D9 2618             (     ROMbasic.ASM):04985                   BNE  L8F96          * BRANCH IF SET 
F3DB 0A99             (     ROMbasic.ASM):04986                   DEC  VD9            DECREMENT LEFT DIGIT — NO PRE-SIGN FORCE 
F3DD 5D               (     ROMbasic.ASM):04987                   TSTB * CHECK LENGTH COUNTER AND BRANCH  
F3DE 2713             (     ROMbasic.ASM):04988                   BEQ  L8F96          * IF END OF FORMAT STRING 
F3E0 A684             (     ROMbasic.ASM):04989                   LDA  ,X             GET NEXT FORMAT STRING CHARACTER 
F3E2 802D             (     ROMbasic.ASM):04990                   SUBA #'-'           CHECK FOR MINUS SIGN 
F3E4 2706             (     ROMbasic.ASM):04991                   BEQ  L8F8F          BRANCH IF MINUS SIGN 
F3E6 81FE             (     ROMbasic.ASM):04992                   CMPA #$FE           * WAS CMPA #('+')-('-') 
F3E8 2609             (     ROMbasic.ASM):04993                   BNE  L8F96          BRANCH IF NO PLUS SIGN 
F3EA 8608             (     ROMbasic.ASM):04994                   LDA  #$08           GET THE PRE-SIGN FORCE FLAG 
F3EC 8A04             (     ROMbasic.ASM):04995         L8F8F     ORA  #$04           ‘OR’ IN POST-SIGN FORCE FLAG 
F3EE 9A9A             (     ROMbasic.ASM):04996                   ORA  VDA            ‘OR’ IN THE STATUS BYTE 
F3F0 979A             (     ROMbasic.ASM):04997                   STA  VDA            SAVE THE STATUS BYTE 
F3F2 5A               (     ROMbasic.ASM):04998                   DECB                DECREMENT FORMAT STRING LENGTH 
                      (     ROMbasic.ASM):04999                                        
                      (     ROMbasic.ASM):05000         ; EVALUATE NUMERIC ITEM-LIST                      
F3F3 9D82             (     ROMbasic.ASM):05001         L8F96     JSR  GETCCH         GET CURRENT CHARACTER 
F3F5 1027FF3C         (     ROMbasic.ASM):05002                   LBEQ L8ED8          BRANCH IF END OF LINE 
F3F9 D793             (     ROMbasic.ASM):05003                   STB  VD3            SAVE FORMAT STRING LENGTH WHEN FORMAT EVALUATION ENDED 
F3FB BDD8ED           (     ROMbasic.ASM):05004                   JSR  LB141          EVALUATE EXPRESSION 
F3FE 9699             (     ROMbasic.ASM):05005                   LDA  VD9            GET THE LEFT DIGIT COUNTER 
F400 9B98             (     ROMbasic.ASM):05006                   ADDA VD8            ADD IT TO THE RIGHT DIGIT COUNTER 
F402 8111             (     ROMbasic.ASM):05007                   CMPA #17            * 
F404 1022E7E9         (     ROMbasic.ASM):05008                   LBHI LB44A          *‘FC’ ERROR IF MORE THAN 16 DIGITS AND DECIMAL POiNT 
F408 BDF442           (     ROMbasic.ASM):05009                   JSR  L8FE5          CONVERT ITEM-LIST TO FORMATTED ASCII STRING 
F40B 301F             (     ROMbasic.ASM):05010                   LEAX $-01,X         MOVE BUFFER POINTER BACK ONE 
F40D BDE403           (     ROMbasic.ASM):05011                   JSR  LB99C          DISPLAY THE FORMATTED STRING TO CONSOLE OUT 
F410 0F97             (     ROMbasic.ASM):05012         L8FB3     CLR  VD7            RESET NEXT PRINT ITEM FLAG 
F412 9D82             (     ROMbasic.ASM):05013                   JSR  GETCCH         GET CURRENT INPUT CHARACTER 
F414 270D             (     ROMbasic.ASM):05014                   BEQ  L8FC6          BRANCH IF END OF LINE 
F416 9797             (     ROMbasic.ASM):05015                   STA  VD7            SAVE CURRENT CHARACTER (<>0) IN NEXT PRINT ITEM FLAG 
F418 813B             (     ROMbasic.ASM):05016                   CMPA #';'           * CHECK FOR ; - ITEM-LIST SEPARATOR AND 
F41A 2705             (     ROMbasic.ASM):05017                   BEQ  L8FC4          * BRANCH IF SEMICOLON 
F41C BDDA19           (     ROMbasic.ASM):05018                   JSR  LB26D          SYNTAX CHECK FOR COMMA 
F41F 2002             (     ROMbasic.ASM):05019                   BRA  L8FC6          PROCESS NEXT PRINT ITEM 
F421 9D7C             (     ROMbasic.ASM):05020         L8FC4     JSR  GETNCH         GET NEXT INPUT CHARACTER 
F423 9E95             (     ROMbasic.ASM):05021         L8FC6     LDX  VD5            GET FORMAT STRING DESCRIPTOR ADDRESS 
F425 E684             (     ROMbasic.ASM):05022                   LDB  ,X             GET LENGTH OF FORMAT STRING 
F427 D093             (     ROMbasic.ASM):05023                   SUBB VD3            SUBTRACT AMOUNT OF FORMAT STRING LEFT AFTER LAST PRINT ITEM 
F429 AE02             (     ROMbasic.ASM):05024                   LDX  $02,X          *GET FORMAT STRING START ADDRESS AND ADVANCE 
F42B 3A               (     ROMbasic.ASM):05025                   ABX  *POINTER TO START OF UNUSED FORMAT STRING  
F42C D693             (     ROMbasic.ASM):05026                   LDB  VD3            * GET AMOUNT OF UNUSED FORMAT STRING 
F42E 1026FEE4         (     ROMbasic.ASM):05027                   LBNE L8EB9          * REINTERPRET FORMAT STRING FROM THAT POINT 
F432 7EF32F           (     ROMbasic.ASM):05028                   JMP  L8ED2          REINTERPRET FORMAT STRING FROM THE START IF ENTIRELY 
                      (     ROMbasic.ASM):05029         ;         USED ON LAST PRINT ITEM  
                      (     ROMbasic.ASM):05030                                        
                      (     ROMbasic.ASM):05031         ; PRINT A ‘+‘ TO CONSOLE OUT IF THE STATUS BYTE <> 0                      
F435 3402             (     ROMbasic.ASM):05032         L8FD8     PSHS A              RESTORE ACCA AND RETURN 
F437 862B             (     ROMbasic.ASM):05033                   LDA  #'+'           GET ASCII PLUS SIGN 
F439 0D9A             (     ROMbasic.ASM):05034                   TST  VDA            * CHECK THE STATUS BYTE AND 
F43B 2703             (     ROMbasic.ASM):05035                   BEQ  L8FE3          * RETURN IF = 0 
F43D BDD017           (     ROMbasic.ASM):05036                   JSR  PUTCHR         SEND A CHARACTER TO CONSOLE OUT 
F440 3582             (     ROMbasic.ASM):05037         L8FE3     PULS A,PC           RETURN ACCA AND RETURN 
                      (     ROMbasic.ASM):05038                                        
                      (     ROMbasic.ASM):05039         ; CONVERT ITEM-LIST TO DECIMAL ASCII STRING                      
F442 CE01F2           (     ROMbasic.ASM):05040         L8FE5     LDU  #STRBUF+4      POINT U TO STRING BUFFER 
F445 C620             (     ROMbasic.ASM):05041                   LDB  #SPACE         BLANK 
F447 969A             (     ROMbasic.ASM):05042                   LDA  VDA            * GET THE STATUS FLAG AND 
F449 8508             (     ROMbasic.ASM):05043                   BITA #$08           * CHECK FOR A PRE-SIGN FORCE 
F44B 2702             (     ROMbasic.ASM):05044                   BEQ  L8FF2          * BRANCH IF NO PRE-SIGN FORCE 
F44D C62B             (     ROMbasic.ASM):05045                   LDB  #'+'           PLUS SIGN 
F44F 0D54             (     ROMbasic.ASM):05046         L8FF2     TST  FP0SGN         CHECK THE SIGN OF FPA0 
F451 2A04             (     ROMbasic.ASM):05047                   BPL  L8FFA          BRANCH IF POSITIVE 
F453 0F54             (     ROMbasic.ASM):05048                   CLR  FP0SGN         FORCE FPA0 SIGN TO BE POSITIVE 
F455 C62D             (     ROMbasic.ASM):05049                   LDB  #'-'           MINUS SIGN 
F457 E7C0             (     ROMbasic.ASM):05050         L8FFA     STB  ,U+            SAVE THE SIGN IN BUFFER 
F459 C630             (     ROMbasic.ASM):05051                   LDB  #'0'           * PUT A ZERO INTO THE BUFFER 
F45B E7C0             (     ROMbasic.ASM):05052                   STB  ,U+            * 
F45D 8401             (     ROMbasic.ASM):05053                   ANDA #$01           * CHECK THE EXPONENTIAL FORCE FLAG IN 
F45F 10260107         (     ROMbasic.ASM):05054                   LBNE L910D          * THE STATUS BYTE - BRANCH IF ACTIVE 
F463 8EE827           (     ROMbasic.ASM):05055                   LDX  #LBDC0         POINT X TO FLOATING POINT 1E + 09 
F466 BDE707           (     ROMbasic.ASM):05056                   JSR  LBCA0          COMPARE FPA0 TO (X) 
F469 2B15             (     ROMbasic.ASM):05057                   BMI  L9023          BRANCH IF FPA0 < 1E+09 
F46B BDE840           (     ROMbasic.ASM):05058                   JSR  LBDD9          CONVERT FP NUMBER TO ASCII STRING 
F46E A680             (     ROMbasic.ASM):05059         L9011     LDA  ,X+            * ADVANCE POINTER TO END OF 
F470 26FC             (     ROMbasic.ASM):05060                   BNE  L9011          * ASCII STRING (ZERO BYTE) 
F472 A682             (     ROMbasic.ASM):05061         L9015     LDA  ,-X            MOVE THE 
F474 A701             (     ROMbasic.ASM):05062                   STA  $01,X          ENTIRE STRING 
F476 8C01F1           (     ROMbasic.ASM):05063                   CMPX #STRBUF+3      UP ONE 
F479 26F7             (     ROMbasic.ASM):05064                   BNE  L9015          BYTE 
F47B 8625             (     ROMbasic.ASM):05065                   LDA  #'%'           * INSERT A % SIGN AT START OF 
F47D A784             (     ROMbasic.ASM):05066                   STA  ,X             * STRING - OVERFLOW ERROR 
F47F 39               (     ROMbasic.ASM):05067                   RTS                  
                      (     ROMbasic.ASM):05068                                        
F480 964F             (     ROMbasic.ASM):05069         L9023     LDA  FP0EXP         GET EXPONENT OF FPA0 
F482 9747             (     ROMbasic.ASM):05070                   STA  V47            AND SAVE IT IN V74 
F484 2703             (     ROMbasic.ASM):05071                   BEQ  L902C          BRANCH IF FPA0 = 0 
F486 BDF62A           (     ROMbasic.ASM):05072                   JSR  L91CD          CONVERT FPA0 TO NUMBER WITH 9 SIGNIFICANT 
                      (     ROMbasic.ASM):05073         ;              PLACES TO LEFT OF DECIMAL POINT  
F489 9647             (     ROMbasic.ASM):05074         L902C     LDA  V47            GET BASE 10 EXPONENT OFFSET 
F48B 102B0081         (     ROMbasic.ASM):05075                   LBMI L90B3          BRANCH IF FPA0 < 100,000,000 
F48F 40               (     ROMbasic.ASM):05076                   NEGA                * CALCULATE THE NUMBER OF LEADING ZEROES TO INSERT - 
F490 9B99             (     ROMbasic.ASM):05077                   ADDA VD9            * SUBTRACT BASE 10 EXPONENT OFFSET AND 9 (FPA0 HAS 
F492 8009             (     ROMbasic.ASM):05078                   SUBA #$09           * 9 PLACES TO LEFT OF EXPONENT) FROM LEFT DIGIT COUNTER 
F494 BDF547           (     ROMbasic.ASM):05079                   JSR  L90EA          PUT ACCA ZEROES IN STRING BUFFER 
F497 BDF6C0           (     ROMbasic.ASM):05080                   JSR  L9263          INITIALIZE DECIMAL POINT AND COMMA COUNTERS 
F49A BDF65F           (     ROMbasic.ASM):05081                   JSR  L9202          CONVERT FPA0 TO DECIMAL ASCII IN THE STRING BUFFER 
F49D 9647             (     ROMbasic.ASM):05082                   LDA  V47            * GET BASE 10 EXPONENT AND PUT THAT MANY 
F49F BDF6DE           (     ROMbasic.ASM):05083                   JSR  L9281          * ZEROES IN STRING BUFFER - STOP AT DECIMAL POINT 
F4A2 9647             (     ROMbasic.ASM):05084                   LDA  V47            WASTED INSTRUCTION - SERVES NO PURPOSE 
F4A4 BDF6A6           (     ROMbasic.ASM):05085                   JSR  L9249          CHECK FOR DECIMAL POINT 
F4A7 9698             (     ROMbasic.ASM):05086                   LDA  VD8            GET THE RIGHT DIGIT COUNTER 
F4A9 2602             (     ROMbasic.ASM):05087                   BNE  L9050          BRANCH IF RIGHT DIGlT COUNTER <> 0 
F4AB 335F             (     ROMbasic.ASM):05088                   LEAU $-01,U         * MOVE BUFFER POINTER BACK ONE - DELETE 
                      (     ROMbasic.ASM):05089         ;              * DECIMAL POINT IF NO RIGHT DIGITS SPECiFIED  
F4AD 4A               (     ROMbasic.ASM):05090         L9050     DECA                SUBTRACT ONE (DECIMAL POINT) 
F4AE BDF547           (     ROMbasic.ASM):05091                   JSR  L90EA          PUT ACCA ZEROES INTO BUFFER (TRAILING ZEROES) 
F4B1 BDF5E2           (     ROMbasic.ASM):05092         L9054     JSR  L9185          INSERT ASTERISK PADDING, FLOATING $, AND POST-SIGN 
F4B4 4D               (     ROMbasic.ASM):05093                   TSTA                WAS THERE A POST-SIGN? 
F4B5 2706             (     ROMbasic.ASM):05094                   BEQ  L9060          NO 
F4B7 C12A             (     ROMbasic.ASM):05095                   CMPB #'*'           IS THE FIRST CHARACTER AN $? 
F4B9 2702             (     ROMbasic.ASM):05096                   BEQ  L9060          YES 
F4BB E7C0             (     ROMbasic.ASM):05097                   STB  ,U+            STORE THE POST-SIGN 
F4BD 6FC4             (     ROMbasic.ASM):05098         L9060     CLR  ,U             CLEAR THE LAST CHARACTER IN THE BUFFER 
                      (     ROMbasic.ASM):05099         ;                              
                      (     ROMbasic.ASM):05100         ; REMOVE ANY EXTRA BLANKS OR ASTERISKS FROM THE                      
                      (     ROMbasic.ASM):05101         ; STRING BUFFER TO THE LEFT OF THE DECIMAL POINT                      
F4BF 8E01F1           (     ROMbasic.ASM):05102                   LDX  #STRBUF+3 POINT X TO THE START OF THE BUFFER  
F4C2 3001             (     ROMbasic.ASM):05103         L9065     LEAX $01,X          MOVE BUFFER POINTER UP ONE 
F4C4 9F0F             (     ROMbasic.ASM):05104                   STX  TEMPTR         SAVE BUFFER POINTER IN TEMPTR 
F4C6 963A             (     ROMbasic.ASM):05105                   LDA  VARPTR+1       * GET ADDRESS OF DECIMAL POINT IN BUFFER, SUBTRACT 
F4C8 9010             (     ROMbasic.ASM):05106                   SUBA TEMPTR+1       * CURRENT POSITION AND SUBTRACT LEFT DIGIT COUNTER - 
F4CA 9099             (     ROMbasic.ASM):05107                   SUBA VD9            * THE RESULT WILL BE ZERO WHEN TEMPTR+1 IS POINTING 
                      (     ROMbasic.ASM):05108         ;              * TO THE FIRST DIGIT OF THE FORMAT STRING  
F4CC 2738             (     ROMbasic.ASM):05109                   BEQ  L90A9          RETURN IF NO DIGITS TO LEFT OF THE DECiMAL POINT 
F4CE A684             (     ROMbasic.ASM):05110                   LDA  ,X             GET THE CURRENT BUFFER CHARACTER 
F4D0 8120             (     ROMbasic.ASM):05111                   CMPA #SPACE         SPACE? 
F4D2 27EE             (     ROMbasic.ASM):05112                   BEQ  L9065          YES - ADVANCE POINTER 
F4D4 812A             (     ROMbasic.ASM):05113                   CMPA #'*'           ASTERISK? 
F4D6 27EA             (     ROMbasic.ASM):05114                   BEQ  L9065          YES - ADVANCE POINTER 
F4D8 4F               (     ROMbasic.ASM):05115                   CLRA                A ZERO ON THE STACK IS END OF DATA POINTER 
F4D9 3402             (     ROMbasic.ASM):05116         L907C     PSHS A              PUSH A CHARACTER ONTO THE STACK 
F4DB A680             (     ROMbasic.ASM):05117                   LDA  ,X+            GET NEXT CHARACTER FROM BUFFER 
F4DD 812D             (     ROMbasic.ASM):05118                   CMPA #'-'           MINUS SIGN? 
F4DF 27F8             (     ROMbasic.ASM):05119                   BEQ  L907C          YES 
F4E1 812B             (     ROMbasic.ASM):05120                   CMPA #'+'           PLUS SIGN? 
F4E3 27F4             (     ROMbasic.ASM):05121                   BEQ  L907C          YES 
                      (     ROMbasic.ASM):05122         ;          CMPA $'$'          ; DOLLAR SIGN?  - source from Ext Basic unravelled book
F4E5 8124             (     ROMbasic.ASM):05123                    CMPA #'$'          ; DOLLAR SIGN?  - this is what it should be (opcodes match Ext Basic unravelled)
                      (     ROMbasic.ASM):05124         ;          FCB  $91,$00       ; this is what the HEX file from grant's site shows
F4E7 27F0             (     ROMbasic.ASM):05125                   BEQ  L907C          YES 
F4E9 8130             (     ROMbasic.ASM):05126                   CMPA #'0'           ZERO? 
F4EB 260E             (     ROMbasic.ASM):05127                   BNE  L909E          NO - ERROR 
F4ED A601             (     ROMbasic.ASM):05128                   LDA  $01,X          GET CHARACTER FOLLOWING ZERO 
F4EF 8D16             (     ROMbasic.ASM):05129                   BSR  L90AA          CLEAR CARRY IF NUMERIC 
F4F1 2508             (     ROMbasic.ASM):05130                   BLO  L909E          BRANCH IF NOT A NUMERIC CHARACTER - ERROR 
F4F3 3502             (     ROMbasic.ASM):05131         L9096     PULS A              * PULL A CHARACTER OFF OF THE STACK 
F4F5 A782             (     ROMbasic.ASM):05132                   STA  ,-X            * AND PUT IT BACK IN THE STRING BUFFER 
F4F7 26FA             (     ROMbasic.ASM):05133                   BNE  L9096          * KEEP GOING UNTIL ZERO FLAG 
F4F9 20C7             (     ROMbasic.ASM):05134                   BRA  L9065          KEEP CLEANING UP THE INPUT BUFFER 
F4FB 3502             (     ROMbasic.ASM):05135         L909E     PULS A               
F4FD 4D               (     ROMbasic.ASM):05136                   TSTA                * THE STACK AND EXIT WHEN 
F4FE 26FB             (     ROMbasic.ASM):05137                   BNE  L909E          * ZERO FLAG FOUND 
F500 9E0F             (     ROMbasic.ASM):05138                   LDX  TEMPTR         GET THE STRING BUFFER START POINTER 
F502 8625             (     ROMbasic.ASM):05139                   LDA  #'%'           * PUT A % SIGN BEFORE THE ERROR POSITION TO 
F504 A782             (     ROMbasic.ASM):05140                   STA  ,-X            * INDICATE AN ERROR 
F506 39               (     ROMbasic.ASM):05141         L90A9     RTS                  
                      (     ROMbasic.ASM):05142         ;                              
                      (     ROMbasic.ASM):05143         ; CLEAR CARRY IF NUMERIC                      
F507 8130             (     ROMbasic.ASM):05144         L90AA     CMPA #'0'           ASCII ZERO 
F509 2504             (     ROMbasic.ASM):05145                   BLO  L90B2          RETURN IF ACCA < ASCII 0 
F50B 803A             (     ROMbasic.ASM):05146                   SUBA #$3A           *  #'9'+1 
F50D 80C6             (     ROMbasic.ASM):05147                   SUBA #$C6           * #-('9'+1)  CARRY CLEAR IF NUMERIC 
F50F 39               (     ROMbasic.ASM):05148         L90B2     RTS                  
                      (     ROMbasic.ASM):05149         ;                              
                      (     ROMbasic.ASM):05150         ; PROCESS AN ITEM-LIST WHICH IS < 100,000,000                      
F510 9698             (     ROMbasic.ASM):05151         L90B3     LDA  VD8            GET RIGHT DIGIT COUNTER 
F512 2701             (     ROMbasic.ASM):05152                   BEQ  L90B8          BRANCH IF NO FORMATTED DIGITS TO THE RIGHT OF DECIMAL PT 
F514 4A               (     ROMbasic.ASM):05153                   DECA                SUBTRACT ONE FOR DECIMAL POINT 
F515 9B47             (     ROMbasic.ASM):05154         L90B8     ADDA V47            *ADD THE BASE 10 EXPONENT OFFSET - ACCA CONTAINS THE 
                      (     ROMbasic.ASM):05155         ;         *NUMBER OF SHIFTS REQUIRED TO ADJUST FPA0 TO THE SPECIFIED  
                      (     ROMbasic.ASM):05156         ;         *NUMBER OF DlGITS TO THE RIGHT OF THE DECIMAL POINT  
F517 2B01             (     ROMbasic.ASM):05157                   BMI  L90BD          IF ACCA >= 0 THEN NO SHIFTS ARE REQUIRED 
F519 4F               (     ROMbasic.ASM):05158                   CLRA                FORCE SHIFT COUNTER = 0 
F51A 3402             (     ROMbasic.ASM):05159         L90BD     PSHS A              SAVE INITIAL SHIFT COUNTER ON THE STACK 
F51C 2A0A             (     ROMbasic.ASM):05160         L90BF     BPL  L90CB          EXIT ROUTINE IF POSITIVE 
F51E 3402             (     ROMbasic.ASM):05161                   PSHS A              SAVE SHIFT COUNTER ON STACK 
F520 BDE5E9           (     ROMbasic.ASM):05162                   JSR  LBB82          DIVIDE FPA0 BY 10 - SHIFT ONE DIGIT TO RIGHT 
F523 3502             (     ROMbasic.ASM):05163                   PULS A              GET SHIFT COUNTER FROM THE STACK 
F525 4C               (     ROMbasic.ASM):05164                   INCA                BUMP SHIFT COUNTER UP BY ONE 
F526 20F4             (     ROMbasic.ASM):05165                   BRA  L90BF          CHECK FOR FURTHER DIVISION 
F528 9647             (     ROMbasic.ASM):05166         L90CB     LDA  V47            * GET BASE 10 EXPONENT OFFSET, ADD INITIAL SHIFT COUNTER 
F52A A0E0             (     ROMbasic.ASM):05167                   SUBA ,S+            * AND SAVE NEW BASE 10 EXPONENT OFFSET - BECAUSE 
F52C 9747             (     ROMbasic.ASM):05168                   STA  V47            * FPA0 WAS SHIFTED ABOVE 
F52E 8B09             (     ROMbasic.ASM):05169                   ADDA #$09           * ADD NINE (SIGNIFICANT PLACES) AND BRANCH IF THERE ARE NO 
F530 2B19             (     ROMbasic.ASM):05170                   BMI  L90EE          * ZEROES TO THE LEFT OF THE DECIMAL POINT IN THIS PRINT ITEM 
F532 9699             (     ROMbasic.ASM):05171                   LDA  VD9            *DETERMINE HOW MANY FILLER ZEROES TO THE LEFT OF THE DECIMAL 
F534 8009             (     ROMbasic.ASM):05172                   SUBA #$09           *POINT. GET THE NUMBER OF FORMAT PLACES TO LEFT OF DECIMAL 
F536 9047             (     ROMbasic.ASM):05173                   SUBA V47            *POINT, SUBTRACT THE BASE 10 EXPONENT OFFSET AND THE CONSTANT 9 
F538 8D0D             (     ROMbasic.ASM):05174                   BSR  L90EA          *(UNNORMALIZATION)-THEN OUTPUT THAT MANY ZEROES TO THE BUFFER 
F53A BDF6C0           (     ROMbasic.ASM):05175                   JSR  L9263          INITIALIZE DECIMAL POINT AND COMMA COUNTERS 
F53D 201D             (     ROMbasic.ASM):05176                   BRA  L90FF          PROCESS THE REMAINDER OF THE PRINT ITEM 
                      (     ROMbasic.ASM):05177         ;                              
                      (     ROMbasic.ASM):05178         ; PUT (ACCA+1) ASCII ZEROES IN BUFFER                      
F53F 3402             (     ROMbasic.ASM):05179         L90E2     PSHS A              SAVE ZERO COUNTER 
F541 8630             (     ROMbasic.ASM):05180                   LDA  #'0'           * INSERT A ZERO INTO 
F543 A7C0             (     ROMbasic.ASM):05181                   STA  ,U+            * THE BUFFER 
F545 3502             (     ROMbasic.ASM):05182                   PULS A              RESTORE ZERO COUNTER 
                      (     ROMbasic.ASM):05183                                        
                      (     ROMbasic.ASM):05184         ; PUT ACCA ASCII ZEROES INTO THE BUFFER                      
F547 4A               (     ROMbasic.ASM):05185         L90EA     DECA                DECREMENT ZERO COUNTER 
F548 2AF5             (     ROMbasic.ASM):05186                   BPL  L90E2          BRANCH IF NOT DONE 
F54A 39               (     ROMbasic.ASM):05187                   RTS                  
                      (     ROMbasic.ASM):05188                                        
F54B 9699             (     ROMbasic.ASM):05189         L90EE     LDA  VD9            * GET THE LEFT DIGIT COUNTER AND PUT 
F54D 8DF8             (     ROMbasic.ASM):05190                   BSR  L90EA          * THAT MANY ZEROES IN THE STRiNG BUFFER 
F54F BDF6AA           (     ROMbasic.ASM):05191                   JSR  L924D          PUT THE DECIMAL POINT IN THE STRING BUFFER 
F552 86F7             (     ROMbasic.ASM):05192                   LDA  #-9            *DETERMINE HOW MANY FILLER ZEROES BETWEEN THE DECIMAL POINT 
F554 9047             (     ROMbasic.ASM):05193                   SUBA V47            *AND SIGNIFICANT DATA. SUBTRACT BASE 10 EXPONENT FROM -9 
F556 8DEF             (     ROMbasic.ASM):05194                   BSR  L90EA          *(UNNORMALIZATION) AND OUTPUT THAT MANY ZEROES TO BUFFER 
F558 0F45             (     ROMbasic.ASM):05195                   CLR  V45            CLEAR THE DECIMAL POINT COUNTER - SUPPRESS THE DECIMAL POINT 
F55A 0F97             (     ROMbasic.ASM):05196                   CLR  VD7            CLEAR THE COMMA COUNTER - SUPPRESS COMMAS 
F55C BDF65F           (     ROMbasic.ASM):05197         L90FF     JSR  L9202          DECODE FPA0 INTO A DECIMAL ASCII STRING 
F55F 9698             (     ROMbasic.ASM):05198                   LDA  VD8            GET THE RIGHT DIGIT COUNTER 
F561 2602             (     ROMbasic.ASM):05199                   BNE  L9108          BRANCH IF RIGHT DIGIT COUNTER <> 0 
F563 DE39             (     ROMbasic.ASM):05200                   LDU  VARPTR         RESET BUFFER PTR TO THE DECIMAL POINT IF NO DIGITS TO RIGHT 
F565 9B47             (     ROMbasic.ASM):05201         L9108     ADDA V47            *ADD BASE 10 EXPONENT - A POSITIVE ACCA WILL CAUSE THAT MANY 
                      (     ROMbasic.ASM):05202         ; *FILLER ZEROES TO BE OUTPUT TO THE RIGHT OF LAST SIGNIFICANT DATA                      
F567 16FF43           (     ROMbasic.ASM):05203                   LBRA L9050          INSERT LEADING ASTERISKS, FLOATING DOLLAR SIGN, ETC 
                      (     ROMbasic.ASM):05204         ;                              
                      (     ROMbasic.ASM):05205         ; FORCE THE NUMERIC OUTPUT FORMAT TO BE EXPONENTIAL FORMAT                      
F56A 964F             (     ROMbasic.ASM):05206         L910D     LDA  FP0EXP         * GET EXPONENT OF FPA0 AND 
F56C 3402             (     ROMbasic.ASM):05207                   PSHS A              * SAVE IT ON THE STACK 
F56E 2703             (     ROMbasic.ASM):05208                   BEQ  L9116          BRANCH IF FPA0 = 0 
F570 BDF62A           (     ROMbasic.ASM):05209                   JSR  L91CD          *CONVERT FPA0 INTO A NUMBER WITH 9 SIGNIFICANT 
                      (     ROMbasic.ASM):05210         ;                                 DIGITS TO THE LEFT OF THE DECIMAL POINT  
F573 9698             (     ROMbasic.ASM):05211         L9116     LDA  VD8            GET THE RIGHT DIGIT COUNTER 
F575 2701             (     ROMbasic.ASM):05212                   BEQ  L911B          BRANCH IF NO FORMATTED DIGITS TO THE RIGHT 
F577 4A               (     ROMbasic.ASM):05213                   DECA                SUBTRACT ONE FOR THE DECIMAL POINT 
F578 9B99             (     ROMbasic.ASM):05214         L911B     ADDA VD9            ADD TO THE LEFT DIGIT COUNTER 
F57A 7F01F1           (     ROMbasic.ASM):05215                   CLR  STRBUF+3       CLEAR BUFFER BYTE AS TEMPORARY STORAGE LOCATION 
F57D D69A             (     ROMbasic.ASM):05216                   LDB  VDA            * GET THE STATUS BYTE FOR A 
F57F C404             (     ROMbasic.ASM):05217                   ANDB #$04           * POST-BYTE FORCE; BRANCH IF 
F581 2603             (     ROMbasic.ASM):05218                   BNE  L9129          * A POST-BYTE FORCE 
F583 7301F1           (     ROMbasic.ASM):05219                   COM  STRBUF+3       TOGGLE BUFFER BYTE TO -1 IF NO POST-BYTE FORCE 
F586 BB01F1           (     ROMbasic.ASM):05220         L9129     ADDA STRBUF+3       SUBTRACT 1 IF NO POST BYTE FORCE 
F589 8009             (     ROMbasic.ASM):05221                   SUBA #$09           *SUBTRACT 9 (DUE TO THE CONVERSION TO 9 
                      (     ROMbasic.ASM):05222         ;                                 SIGNIFICANT DIGITS TO LEFT OF DECIMAL POINT)  
F58B 3402             (     ROMbasic.ASM):05223                   PSHS A              * SAVE SHIFT COUNTER ON THE STACK - ACCA CONTAINS THE NUMBER 
                      (     ROMbasic.ASM):05224         ;                                 OF SHIFTS REQUIRED TO ADJUST FPA0 FOR THE NUMBER OF  
                      (     ROMbasic.ASM):05225         ;                                 FORMATTED PLACES TO THE RIGHT OF THE DECIMAL POINT.  
F58D 2A0A             (     ROMbasic.ASM):05226         L9130     BPL  L913C          NO MORE SHIFTS WHEN ACCA >= 0 
F58F 3402             (     ROMbasic.ASM):05227                   PSHS A              SAVE SHIFT COUNTER 
F591 BDE5E9           (     ROMbasic.ASM):05228                   JSR  LBB82          DIVIDE FPA0 BY 10 - SHIFT TO RIGHT ONE 
F594 3502             (     ROMbasic.ASM):05229                   PULS A              RESTORE THE SHIFT COUNTER 
F596 4C               (     ROMbasic.ASM):05230                   INCA                ADD 1 TO SHIFT COUNTER 
F597 20F4             (     ROMbasic.ASM):05231                   BRA  L9130          CHECK FOR FURTHER SHIFTING (DIVISION) 
F599 A6E4             (     ROMbasic.ASM):05232         L913C     LDA  ,S             *GET THE INITIAL VALUE OF THE SHIFT COUNTER 
F59B 2B01             (     ROMbasic.ASM):05233                   BMI  L9141          *AND BRANCH IF SHIFTING HAS TAKEN PLACE 
F59D 4F               (     ROMbasic.ASM):05234                   CLRA                RESET ACCA IF NO SHIFTING HAS TAKEN PLACE 
F59E 40               (     ROMbasic.ASM):05235         L9141     NEGA                *CALCULATE THE POSITION OF THE DECIMAL POINT BY 
F59F 9B99             (     ROMbasic.ASM):05236                   ADDA VD9            *NEGATING SHIFT COUNTER, ADDING THE LEFT DIGIT COUNTER 
F5A1 4C               (     ROMbasic.ASM):05237                   INCA                *PLUS ONE AND THE POST-BYTE POSlTION, IF USED 
F5A2 BB01F1           (     ROMbasic.ASM):05238                   ADDA STRBUF+3       * 
F5A5 9745             (     ROMbasic.ASM):05239                   STA  V45            SAVE DECIMAL POINT COUNTER 
F5A7 0F97             (     ROMbasic.ASM):05240                   CLR  VD7            CLEAR COMMA COUNTER - NO COMMAS INSERTED 
F5A9 BDF65F           (     ROMbasic.ASM):05241                   JSR  L9202          CONVERT FPA0 INTO ASCII DECIMAL STRING 
F5AC 3502             (     ROMbasic.ASM):05242                   PULS A              * GET THE INITIAL VALUE OF SHIFT COUNTER AND 
F5AE BDF6DE           (     ROMbasic.ASM):05243                   JSR  L9281          * INSERT THAT MANY ZEROES INTO THE BUFFER 
F5B1 9698             (     ROMbasic.ASM):05244                   LDA  VD8            *GET THE RIGHT DIGIT COUNTER AND BRANCH 
F5B3 2602             (     ROMbasic.ASM):05245                   BNE  L915A          *IF NOT ZERO 
F5B5 335F             (     ROMbasic.ASM):05246                   LEAU $-01,U         MOVE BUFFER POINTER BACK ONE 
                      (     ROMbasic.ASM):05247                                        
                      (     ROMbasic.ASM):05248         ; CALCULATE VALUE OF EXPONENT AND PUT IN STRING BUFFER                      
F5B7 E6E0             (     ROMbasic.ASM):05249         L915A     LDB  ,S+            GET ORIGINAL EXPONENT OF FPA0 
F5B9 2709             (     ROMbasic.ASM):05250                   BEQ  L9167          BRANCH IF EXPONENT = 0 
F5BB D647             (     ROMbasic.ASM):05251                   LDB  V47            GET BASE 10 EXPONENT 
F5BD CB09             (     ROMbasic.ASM):05252                   ADDB #$09           ADD 9 FOR 9 SIGNIFICANT DIGIT CONVERSION 
F5BF D099             (     ROMbasic.ASM):05253                   SUBB VD9            SUBTRACT LEFT DIGIT COUNTER 
F5C1 F001F1           (     ROMbasic.ASM):05254                   SUBB STRBUF+3       ADD ONE TO EXPONENT IF POST-SIGN FORCE 
F5C4 862B             (     ROMbasic.ASM):05255         L9167     LDA  #'+'           PLUS SIGN 
F5C6 5D               (     ROMbasic.ASM):05256                   TSTB TEST EXPONENT   
F5C7 2A03             (     ROMbasic.ASM):05257                   BPL  L916F          BRANCH IF POSITIVE EXPONENT 
F5C9 862D             (     ROMbasic.ASM):05258                   LDA  #'-'           MINUS SIGN 
F5CB 50               (     ROMbasic.ASM):05259                   NEGB                CONVERT EXPONENT TO POSITIVE NUMBER 
F5CC A741             (     ROMbasic.ASM):05260         L916F     STA  $01,U          PUT SIGN OF EXPONENT IN STRING BUFFER 
F5CE 8645             (     ROMbasic.ASM):05261                   LDA  #'E'           * PUT AN ‘E’ (EXPONENTIATION FLAG) IN 
F5D0 A7C1             (     ROMbasic.ASM):05262                   STA  ,U++           * BUFFER AND SKIP OVER THE SIGN 
F5D2 862F             (     ROMbasic.ASM):05263                   LDA  #$2F           * WAS LDA #'0'-1 
                      (     ROMbasic.ASM):05264         ;CONVERT BINARY EXPONENT IN ACCB TO ASCII VALUE IN ACCA                      
F5D4 4C               (     ROMbasic.ASM):05265         L9177     INCA                ADD ONE TO TENS DIGIT COUNTER 
F5D5 C00A             (     ROMbasic.ASM):05266                   SUBB #10            *SUBTRACT 10 FROM EXPONENT AND ADD ONE TO TENS 
F5D7 24FB             (     ROMbasic.ASM):05267                   BCC  L9177          * DIGIT IF NO CARRY. TENS DIGIT DONE IF THERE IS A CARRY 
F5D9 CB3A             (     ROMbasic.ASM):05268                   ADDB #$3A           WAS ADDB #'9'+1 
F5DB EDC1             (     ROMbasic.ASM):05269                   STD  ,U++           SAVE EXPONENT IN BUFFER 
F5DD 6FC4             (     ROMbasic.ASM):05270                   CLR  ,U             CLEAR FINAL BYTE IN BUFFER - PRINT TERMINATOR 
F5DF 7EF4B1           (     ROMbasic.ASM):05271                   JMP  L9054          INSERT ASTERISK PADDING, FLOATING DOLLAR SIGN, ETC. 
                      (     ROMbasic.ASM):05272                                        
                      (     ROMbasic.ASM):05273         ; INSERT ASTERISK PADDING, FLOATING $ AND PRE-SIGN                      
F5E2 8E01F2           (     ROMbasic.ASM):05274         L9185     LDX  #STRBUF+4      POINT X TO START OF PRINT ITEM BUFFER 
F5E5 E684             (     ROMbasic.ASM):05275                   LDB  ,X             * GET SIGN BYTE OF ITEM-LIST BUFFER 
F5E7 3404             (     ROMbasic.ASM):05276                   PSHS B              * AND SAVE IT ON THE STACK 
F5E9 8620             (     ROMbasic.ASM):05277                   LDA  #SPACE         DEFAULT PAD WITH BLANKS 
F5EB D69A             (     ROMbasic.ASM):05278                   LDB  VDA            * GET STATUS BYTE AND CHECK FOR 
F5ED C520             (     ROMbasic.ASM):05279                   BITB #$20           * ASTERISK LEFT PADDING 
F5EF 3504             (     ROMbasic.ASM):05280                   PULS B              GET SIGN BYTE AGAIN 
F5F1 2708             (     ROMbasic.ASM):05281                   BEQ  L919E          BRANCH IF NO PADDING 
F5F3 862A             (     ROMbasic.ASM):05282                   LDA  #'*'           PAD WITH ASTERISK 
F5F5 C120             (     ROMbasic.ASM):05283                   CMPB #SPACE         WAS THE FIRST BYTE A BLANK (POSITIVE)? 
F5F7 2602             (     ROMbasic.ASM):05284                   BNE  L919E          NO 
F5F9 1F89             (     ROMbasic.ASM):05285                   TFR  A,B            TRANSFER PAD CHARACTER TO ACCB 
F5FB 3404             (     ROMbasic.ASM):05286         L919E     PSHS B              SAVE FIRST CHARACTER ON STACK 
F5FD A780             (     ROMbasic.ASM):05287         L91A0     STA  ,X+            STORE PAD CHARACTER IN BUFFER 
F5FF E684             (     ROMbasic.ASM):05288                   LDB  ,X             GET NEXT CHARACTER IN BUFFER 
F601 2710             (     ROMbasic.ASM):05289                   BEQ  L91B6          INSERT A ZERO IF END OF BUFFER 
F603 C145             (     ROMbasic.ASM):05290                   CMPB #'E'           * CHECK FOR AN ‘E’ AND 
F605 270C             (     ROMbasic.ASM):05291                   BEQ  L91B6          * PUT A ZERO BEFORE IT 
F607 C130             (     ROMbasic.ASM):05292                   CMPB #'0'           * REPLACE LEADING ZEROES WITH 
F609 27F2             (     ROMbasic.ASM):05293                   BEQ  L91A0          * PAD CHARACTERS 
F60B C12C             (     ROMbasic.ASM):05294                   CMPB #','           * REPLACE LEADING COMMAS 
F60D 27EE             (     ROMbasic.ASM):05295                   BEQ  L91A0          * WITH PAD CHARACTERS 
F60F C12E             (     ROMbasic.ASM):05296                   CMPB #'.'           * CHECK FOR DECIMAL POINT 
F611 2604             (     ROMbasic.ASM):05297                   BNE  L91BA          * AND DON’T PUT A ZERO BEFORE IT 
F613 8630             (     ROMbasic.ASM):05298         L91B6     LDA  #'0'           * REPLACE PREVIOUS CHARACTER 
F615 A782             (     ROMbasic.ASM):05299                   STA  ,-X            * WITH A ZERO 
F617 969A             (     ROMbasic.ASM):05300         L91BA     LDA  VDA            * GET STATUS BYTE, CHECK 
F619 8510             (     ROMbasic.ASM):05301                   BITA #$10           * FOR FLOATING $ 
F61B 2704             (     ROMbasic.ASM):05302                   BEQ  L91C4          * BRANCH IF NO FLOATING $ 
F61D C624             (     ROMbasic.ASM):05303                   LDB  #'$'           * STORE A $ IN 
F61F E782             (     ROMbasic.ASM):05304                   STB  ,-X            * BUFFER 
F621 8404             (     ROMbasic.ASM):05305         L91C4     ANDA #$04           CHECK PRE-SIGN FLAG 
F623 3504             (     ROMbasic.ASM):05306                   PULS B              GET SIGN CHARACTER 
F625 2602             (     ROMbasic.ASM):05307                   BNE  L91CC          RETURN IF POST-SIGN REQUIRED 
F627 E782             (     ROMbasic.ASM):05308                   STB  ,-X            STORE FIRST CHARACTER 
F629 39               (     ROMbasic.ASM):05309         L91CC     RTS                  
                      (     ROMbasic.ASM):05310         ;                              
                      (     ROMbasic.ASM):05311         ; CONVERT FPA0 INTO A NUMBER OF THE FORM - NNN,NNN,NNN X 10**M.                      
                      (     ROMbasic.ASM):05312         ; THE EXPONENT M WILL BE RETURNED IN V47 (BASE 10 EXPONENT).                      
F62A 3440             (     ROMbasic.ASM):05313         L91CD     PSHS U              SAVE BUFFER POINTER 
F62C 4F               (     ROMbasic.ASM):05314                   CLRA                INITIAL EXPONENT OFFSET = 0 
F62D 9747             (     ROMbasic.ASM):05315         L91D0     STA  V47            SAVE EXPONENT OFFSET 
F62F D64F             (     ROMbasic.ASM):05316                   LDB  FP0EXP         GET EXPONENT OF FPA0 
F631 C180             (     ROMbasic.ASM):05317                   CMPB #$80           * COMPARE TO EXPONENT OF .5 
F633 2211             (     ROMbasic.ASM):05318                   BHI  L91E9          * AND BRANCH IF FPA0 > = 1.0 
                      (     ROMbasic.ASM):05319                                        
                      (     ROMbasic.ASM):05320         ; IF FPA0 < 1.0, MULTIPLY IT BY 1E+09 UNTIL IT IS >= 1                      
F635 8EE827           (     ROMbasic.ASM):05321                   LDX  #LBDC0         POINT X TO FP NUMBER (1E+09) 
F638 BDE531           (     ROMbasic.ASM):05322                   JSR  LBACA          MULTIPLY FPA0 BY 1E+09 
F63B 9647             (     ROMbasic.ASM):05323                   LDA  V47            GET EXPONENT OFFSET 
F63D 8009             (     ROMbasic.ASM):05324                   SUBA #$09           SUBTRACT 9 (BECAUSE WE MULTIPLIED BY 1E+09 ABOVE) 
F63F 20EC             (     ROMbasic.ASM):05325                   BRA  L91D0          CHECK TO SEE IF > 1.0 
F641 BDE5E9           (     ROMbasic.ASM):05326         L91E4     JSR  LBB82          DIVIDE FPA0 BY 10 
F644 0C47             (     ROMbasic.ASM):05327                   INC  V47            INCREMENT EXPONENT OFFSET 
F646 8EE822           (     ROMbasic.ASM):05328         L91E9     LDX  #LBDBB         POINT X TO FP NUMBER (999,999,999) 
F649 BDE707           (     ROMbasic.ASM):05329                   JSR  LBCA0          COMPARE FPA0 TO X 
F64C 2EF3             (     ROMbasic.ASM):05330                   BGT  L91E4          BRANCH IF FPA0 > 999,999,999 
F64E 8EE81D           (     ROMbasic.ASM):05331         L91F1     LDX  #LBDB6         POINT X TO FP NUMBER (99,999,999.9) 
F651 BDE707           (     ROMbasic.ASM):05332                   JSR  LBCA0          COMPARE FPA0 TO X 
F654 2E07             (     ROMbasic.ASM):05333                   BGT  L9200          RETURN IF 999,999,999 > FPA0 > 99,999,999.9 
F656 BDE5D1           (     ROMbasic.ASM):05334                   JSR  LBB6A          MULTIPLY FPA0 BY 10 
F659 0A47             (     ROMbasic.ASM):05335                   DEC  V47            DECREMENT EXPONENT OFFSET 
F65B 20F1             (     ROMbasic.ASM):05336                   BRA  L91F1          KEEP UNNORMALIZING 
F65D 35C0             (     ROMbasic.ASM):05337         L9200     PULS U,PC           RESTORE BUFFER POINTER AND RETURN 
                      (     ROMbasic.ASM):05338         ;                              
                      (     ROMbasic.ASM):05339         ; CONVERT FPA0 INTO AN INTEGER, THEN DECODE IT                      
                      (     ROMbasic.ASM):05340         ; INTO A DECIMAL ASCII STRING IN THE BUFFER                      
F65F 3440             (     ROMbasic.ASM):05341         L9202     PSHS U              SAVE BUFFER POINTER 
F661 BDE41B           (     ROMbasic.ASM):05342                   JSR  LB9B4          ADD .5 TO FPA0 (ROUND OFF) 
F664 BDE72F           (     ROMbasic.ASM):05343                   JSR  LBCC8          CONVERT FPA0 TO INTEGER FORMAT 
F667 3540             (     ROMbasic.ASM):05344                   PULS U              RESTORE BUFFER POINTER 
                      (     ROMbasic.ASM):05345         ;                              
                      (     ROMbasic.ASM):05346         ; CONVERT FPA0 INTO A DECIMAL ASCII STRING                      
F669 8EE92C           (     ROMbasic.ASM):05347                   LDX  #LBEC5         POINT X TO UNNORMALIZED POWERS OF 10 
F66C C680             (     ROMbasic.ASM):05348                   LDB  #$80           INITIALIZE DIGIT COUNTER TO 0 + $80. 
                      (     ROMbasic.ASM):05349         ; BIT 7 SET IS USED TO INDICATE THAT THE POWER OF 10 MANTISSA                      
                      (     ROMbasic.ASM):05350         ; IS NEGATIVE. WHEN YOU ‘ADD’ A NEGATIVE MANTISSA, IT IS                      
                      (     ROMbasic.ASM):05351         ; THE SAME AS SUBTRACTING A POSITIVE ONE AND BIT 7 OF ACCB                      
                      (     ROMbasic.ASM):05352         ; IS HOW THIS ROUTINE KNOWS THAT A ‘SUBTRACTION’ IS OCCURRING.                      
F66E 8D36             (     ROMbasic.ASM):05353         L9211     BSR  L9249          CHECK FOR COMMA INSERTION 
F670 9653             (     ROMbasic.ASM):05354         L9213     LDA  FPA0+3         * ‘ADD’ A POWER OF 10 MANTISSA TO FPA0. 
F672 AB03             (     ROMbasic.ASM):05355                   ADDA $03,X          * IF THE MANTISSA IS NEGATIVE, A SUBTRACTION 
F674 9753             (     ROMbasic.ASM):05356                   STA  FPA0+3         * WILL BE WHAT REALLY TAKES PLACE. 
F676 9652             (     ROMbasic.ASM):05357                   LDA  FPA0+2         * 
F678 A902             (     ROMbasic.ASM):05358                   ADCA $02,X          * 
F67A 9752             (     ROMbasic.ASM):05359                   STA  FPA0+2         * 
F67C 9651             (     ROMbasic.ASM):05360                   LDA  FPA0+1         * 
F67E A901             (     ROMbasic.ASM):05361                   ADCA $01,X          * 
F680 9751             (     ROMbasic.ASM):05362                   STA  FPA0+1         * 
F682 9650             (     ROMbasic.ASM):05363                   LDA  FPA0           * 
F684 A984             (     ROMbasic.ASM):05364                   ADCA ,X             * 
F686 9750             (     ROMbasic.ASM):05365                   STA  FPA0           * 
F688 5C               (     ROMbasic.ASM):05366                   INCB                ADD ONE TO DIGIT COUNTER 
F689 56               (     ROMbasic.ASM):05367                   RORB ROTATE CARRY INTO BIT 7  
F68A 59               (     ROMbasic.ASM):05368                   ROLB                * SET OVERFLOW FLAG - BRANCH IF CARRY SET AND 
F68B 28E3             (     ROMbasic.ASM):05369                   BVC  L9213          * ADDING MANTISSA OR CARRY CLEAR AND SUBTRACTING MANTISSA 
F68D 2403             (     ROMbasic.ASM):05370                   BCC  L9235          BRANCH IF SUBTRACTING MANTISSA 
F68F C00B             (     ROMbasic.ASM):05371                   SUBB #10+1          WAS SUBB #10+1 
F691 50               (     ROMbasic.ASM):05372                   NEGB                * IF ADDING MANTISSA 
F692 CB2F             (     ROMbasic.ASM):05373         L9235     ADDB #$2F           WAS ADDB #'0'-1 
F694 3004             (     ROMbasic.ASM):05374                   LEAX $04,X          MOVE TO NEXT POWER OF 10 MANTISSA 
F696 1F98             (     ROMbasic.ASM):05375                   TFR  B,A            SAVE DIGIT IN ACCA 
F698 847F             (     ROMbasic.ASM):05376                   ANDA #$7F           MASK OFF ADD/SUBTRACT FLAG (BIT 7) 
F69A A7C0             (     ROMbasic.ASM):05377                   STA  ,U+            STORE DIGIT IN BUFFER 
F69C 53               (     ROMbasic.ASM):05378                   COMB                TOGGLE ADD/SUBTRACT FLAG 
F69D C480             (     ROMbasic.ASM):05379                   ANDB #$80           MASK OFF EVERYTHING BUT ADD/SUB FLAG 
F69F 8CE950           (     ROMbasic.ASM):05380                   CMPX #LBEE9         COMPARE TO END OF UNNORMALIZED POWERS OF 10 
F6A2 26CA             (     ROMbasic.ASM):05381                   BNE  L9211          BRANCH IF NOT DONE 
F6A4 6FC4             (     ROMbasic.ASM):05382                   CLR  ,U             PUT A ZERO AT END OF INTEGER 
                      (     ROMbasic.ASM):05383                                        
                      (     ROMbasic.ASM):05384         ; DECREMENT DECIMAL POINT COUNTER AND CHECK FOR COMMA INSERTION                      
F6A6 0A45             (     ROMbasic.ASM):05385         L9249     DEC  V45            DECREMENT DECIMAL POINT COUNTER 
F6A8 2609             (     ROMbasic.ASM):05386                   BNE  L9256          NOT TIME FOR DECIMAL POINT 
F6AA DF39             (     ROMbasic.ASM):05387         L924D     STU  VARPTR         SAVE BUFFER POINTER-POSITION OF THE DECIMAL POINT 
F6AC 862E             (     ROMbasic.ASM):05388                   LDA  #'.'           * STORE A DECIMAL 
F6AE A7C0             (     ROMbasic.ASM):05389                   STA  ,U+            * POINT IN THE OUTPUT BUFFER 
F6B0 0F97             (     ROMbasic.ASM):05390                   CLR  VD7            * CLEAR COMMA COUNTER - NOW IT WILL TAKE 255 
                      (     ROMbasic.ASM):05391         ;                             * DECREMENTS BEFORE ANOTHER COMMA WILL BE INSERTED 
F6B2 39               (     ROMbasic.ASM):05392                   RTS                  
F6B3 0A97             (     ROMbasic.ASM):05393         L9256     DEC  VD7            DECREMENT COMMA COUNTER 
F6B5 2608             (     ROMbasic.ASM):05394                   BNE  L9262          RETURN IF NOT TIME FOR COMMA 
F6B7 8603             (     ROMbasic.ASM):05395                   LDA  #$03           * RESET COMMA COUNTER TO 3; THREE 
F6B9 9797             (     ROMbasic.ASM):05396                   STA  VD7            * DIGITS BETWEEN COMMAS 
F6BB 862C             (     ROMbasic.ASM):05397                   LDA  #','           * PUT A COMMA INTO 
F6BD A7C0             (     ROMbasic.ASM):05398                   STA  ,U+            * THE BUFFER 
F6BF 39               (     ROMbasic.ASM):05399         L9262     RTS                  
                      (     ROMbasic.ASM):05400                                        
                      (     ROMbasic.ASM):05401         ; INITIALIZE DECIMAL POINT AND COMMA COUNTERS                      
F6C0 9647             (     ROMbasic.ASM):05402         L9263     LDA  V47            GET THE BASE 10 EXPONENT OFFSET 
F6C2 8B0A             (     ROMbasic.ASM):05403                   ADDA #10            * ADD 10 (FPA0 WAS ‘NORMALIZED’ TO 9 PLACES LEFT 
F6C4 9745             (     ROMbasic.ASM):05404                   STA  V45            * OF DECIMAL POINT) - SAVE IN DECIMAL POINT COUNTER 
F6C6 4C               (     ROMbasic.ASM):05405                   INCA                ADD ONE FOR THE DECIMAL POINT 
F6C7 8003             (     ROMbasic.ASM):05406         L926A     SUBA #$03           * DIVIDE DECIMAL POINT COUNTER BY 3; LEAVE 
F6C9 24FC             (     ROMbasic.ASM):05407                   BCC  L926A          * THE REMAINDER IN ACCA 
F6CB 8B05             (     ROMbasic.ASM):05408                   ADDA #$05           CONVERT REMAINDER INTO A NUMBER FROM 1-3 
F6CD 9797             (     ROMbasic.ASM):05409                   STA  VD7            SAVE COMMA COUNTER 
F6CF 969A             (     ROMbasic.ASM):05410                   LDA  VDA            GET STATUS BYTE 
F6D1 8440             (     ROMbasic.ASM):05411                   ANDA #$40           CHECK FOR COMMA FLAG 
F6D3 2602             (     ROMbasic.ASM):05412                   BNE  L927A          BRANCH IF COMMA FLAG ACTIVE 
F6D5 9797             (     ROMbasic.ASM):05413                   STA  VD7            CLEAR COMMA COUNTER - 255 DIGITS OUTPUT BEFORE A COMMA 
F6D7 39               (     ROMbasic.ASM):05414         L927A     RTS                  
                      (     ROMbasic.ASM):05415         ;                              
                      (     ROMbasic.ASM):05416         ; INSERT ACCA ZEROES INTO THE BUFFER                      
F6D8 3402             (     ROMbasic.ASM):05417         L927B     PSHS A              SAVE ZEROES COUNTER 
F6DA 8DCA             (     ROMbasic.ASM):05418                   BSR  L9249          CHECK FOR DECIMAL POINT 
F6DC 3502             (     ROMbasic.ASM):05419                   PULS A              RESTORE ZEROES COUNTER 
F6DE 4A               (     ROMbasic.ASM):05420         L9281     DECA                * DECREMENT ZEROES COUNTER AND 
F6DF 2B0A             (     ROMbasic.ASM):05421                   BMI  L928E          * RETURN IF < 0 
F6E1 3402             (     ROMbasic.ASM):05422                   PSHS A              SAVE ZEROES COUNTER 
F6E3 8630             (     ROMbasic.ASM):05423                   LDA  #'0'           * PUT A ZERO INTO 
F6E5 A7C0             (     ROMbasic.ASM):05424                   STA  ,U+            * THE BUFFER 
F6E7 A6E0             (     ROMbasic.ASM):05425                   LDA  ,S+            RESTORE THE ZEROES COUNTER 
F6E9 26ED             (     ROMbasic.ASM):05426                   BNE  L927B          BRANCH IF NOT DONE 
F6EB 39               (     ROMbasic.ASM):05427         L928E     RTS                  
                      (     ROMbasic.ASM):05428         
                      (     ROMbasic.ASM):05429         
                      (     ROMbasic.ASM):05430         ;
                      (     ROMbasic.ASM):05431         ; "LINE INPUT" is stupid, so the LINE token is prime takeover target
                      (     ROMbasic.ASM):05432         ; if a command needs to be added!
                      (     ROMbasic.ASM):05433         ;
                      (     ROMbasic.ASM):05434                                        
                      (     ROMbasic.ASM):05435         ; LINE                         
F6EC 8189             (     ROMbasic.ASM):05436         LINE      CMPA #TOK_INPUT     ‘INPUT’ TOKEN 
F6EE 1027F95C         (     ROMbasic.ASM):05437                   LBEQ L89C0          GO DO ‘LINE INPUT’ COMMAND 
F6F2 7EDA23           (     ROMbasic.ASM):05438                   JMP  LB277          ‘SYNTAX ERROR’ IF NOT "LINE INPUT" 
                      (     ROMbasic.ASM):05439                         
                      (     ROMbasic.ASM):05440         ; Init SCC channel A for 115.2kbps using external clock, polled
F6F5                  (     ROMbasic.ASM):05441         SCCA_INIT:
F6F5 B6E012           (     ROMbasic.ASM):05442                   LDA  ZSCCAC         ; reset the register pointer
F6F8 8EF70A           (     ROMbasic.ASM):05443                   LDX  #SCCA_TBL      ; init table pointer
F6FB A680             (     ROMbasic.ASM):05444         T0?       LDA  ,X+            ; load address from table
F6FD 2A01             (     ROMbasic.ASM):05445                   BPL  T1?            ; if positive, save register data
F6FF 39               (     ROMbasic.ASM):05446                   RTS
F700 B7E012           (     ROMbasic.ASM):05447         T1?       STA  ZSCCAC         ; write the register pointer to WR0
F703 A680             (     ROMbasic.ASM):05448                   LDA  ,X+            ; get data byte from table
F705 B7E012           (     ROMbasic.ASM):05449                   STA  ZSCCAC         ; write to SCC ch A command
F708 20F1             (     ROMbasic.ASM):05450                   BRA  T0?
                      (     ROMbasic.ASM):05451         
                      (     ROMbasic.ASM):05452         ;Initialization table for SCC Channel A in ASYNC mode, external 16x clock
                      (     ROMbasic.ASM):05453         ; thanks to John Monahan (S100Computers.com)!
F70A 0980             (     ROMbasic.ASM):05454         SCCA_TBL: FCB  $09,$80        ; Point to WR9; Reset Ch A
F70C 0900             (     ROMbasic.ASM):05455                   FCB  $09,$00        ; Point to WR9; un-reset CH A
F70E 0444             (     ROMbasic.ASM):05456                   FCB  $04,$44        ; Point to WR4; X16 clock,1 Stop,NP
F710 03C1             (     ROMbasic.ASM):05457                   FCB  $03,$C1        ; Point to WR3; Enable receiver, No Auto Enable (Hardware CTS), Receive 8 bits
F712 05EA             (     ROMbasic.ASM):05458                   FCB  $05,$EA        ; Point to WR5; Enable, Transmit 8 bits RTS,DTR, Enable
F714 0B05             (     ROMbasic.ASM):05459                   FCB  $0B,$05        ; Point to WR11; RX clock = TX clock = RTXC pin; TRXC pin = xmit clock
F716 0F00             (     ROMbasic.ASM):05460                   FCB  $0F,$00        ; Point to WR15; no INT from hardware CTS/RTS
F718 FFFF             (     ROMbasic.ASM):05461                   FCB  $FF,$FF        ; EOT marker
                      (     ROMbasic.ASM):05462         
                      (     ROMbasic.ASM):05463         ; Information about build
F71A 00               (     ROMbasic.ASM):05464                   FCB  0
F71B 4D4943524F534F46 (     ROMbasic.ASM):05465                   FCC  "MICROSOFT BASIC FOR HD6309 SBC V1.4. BUILT APRIL 10, 2020"
     5420424153494320
     464F522048443633
     3039205342432056
     312E342E20425549
     4C5420415052494C
     2031302C20323032
     30
F754 00               (     ROMbasic.ASM):05466                   FCB  0
                      (     ROMbasic.ASM):05467                                      
                      (     ROMbasic.ASM):05468         ; END OF EXTENDED BASIC                      
                      (     ROMbasic.ASM):05469         ; INTERRUPT VECTORS                      
                      (     ROMbasic.ASM):05470                   ORG  $FFF0           
FFF0 D04C             (     ROMbasic.ASM):05471         LBFF0     FDB  RESVEC         ; Divide by zero / illegal opcode trap
FFF2 009B             (     ROMbasic.ASM):05472         LBFF2     FDB  SW3VEC         ; SWI3 
FFF4 009E             (     ROMbasic.ASM):05473         LBFF4     FDB  SW2VEC         ; SWI2 
FFF6 00AA             (     ROMbasic.ASM):05474         LBFF6     FDB  FRQVEC         ; FIRQ 
FFF8 00A7             (     ROMbasic.ASM):05475         LBFF8     FDB  IRQVEC         ; IRQ 
FFFA 00A1             (     ROMbasic.ASM):05476         LBFFA     FDB  SWIVEC         ; SWI 
FFFC 00A4             (     ROMbasic.ASM):05477         LBFFC     FDB  NMIVEC         ; NMI 
FFFE D04C             (     ROMbasic.ASM):05478         LBFFE     FDB  RESVEC         ; RESET 
